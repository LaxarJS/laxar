{
    "docs": [
        {
            "location": "/", 
            "text": "LaxarJS 2 Yeoman Generator\n\n\n\n\nThe \nconvenient\n way to scaffold a new LaxarJS 2.x application, widget or control.\n\n\n\n\nNote:\n This generator produces code that works with LaxarJS version 2.x.\nIf you need to create widgets or controls for an application running LaxarJS in version 1.x, you'll have to use \ngenerator-laxarjs\n instead.\n\n\n\n   Take a look at the \ndocumentation site\n to browse documentation for all releases of this artifact.\n\n\n\nInstallation\n\n\nInstall the generator package (and optionally \nyeoman\n) globally via npm:\n\n\nnpm install -g yo generator-laxarjs2\n\n\n\n\n\nGenerators\n\n\nThe Yeoman generator \nlaxarjs2\n comes up with the main generator for scaffolding an application and three sub-generators for widgets, activities and controls.\n\n\nAvailable generators:\n\n\n\n\nlaxarjs2\n\n\nlaxarjs2:widget\n\n\nlaxarjs2:activity\n\n\nlaxarjs2:control\n\n\n\n\nApplication\n\n\nTo scaffold a new LaxarJS application, create a directory and run the generator:\n\n\nmkdir my-application\n\n\ncd my-application\n\n\nyo laxarjs2\n\n\n\n\n\n\nAfter answering several questions, the generator creates the bare-bones application scaffolding for you.\nAlternatively you can choose to let the generator create a set of very simple example widgets in the application.\nWhen choosing this option, a widget is created for every selected integration technology.\nAdditionally, a widget written in plain JavaScript is added, since the corresponding technology adapter is always part of LaxarJS.\n\n\nNext, all dependencies can be installed by running \nnpm install\n (or \nyarn\n), and after that is finished, the development web server can be started by running \nnpm start\n.\n\n\nCommand Line Options\n\n\n--banner \nbanner-file.txt\n\n\nBy using this option, a text file containing a custom header for source files can be configured.\nWhen the generator creates a new source file (\n.js\n, \n.ts\n, \n.jsx\n or \n.vue\n), this will be added as header just before the actual code starts.\n\n\nThis option will be saved in the Yeoman configuration file and will be used by sub-generators.\n\n\nWidget, Activity and Control\n\n\nThe scaffolding for a widget can be generated by running the following in the root directory of the application:\n\n\nyo laxarjs2:widget\n\n\n\n\n\n\nThe widget will be created in \napplication-root\n/application/widgets/\nwidget-name\n.\nIf the generator is not run in the \napplication root\n directory but some other sub-directory, the widget will be created directly in that directory.\n\n\nKeep in mind that the sub-generators expect to find a \nYeoman configuration file\n (\n.yo-rc.json\n) in the root directory of your application.\nHaving used the generator for the application first, the necessary configuration file will already be in your project.\nIn case you add widgets, activities or controls to an application that was created without Yeoman, simply create the file with an empty object as content:\n\n\necho \n{}\n \n .yo-rc.json\n\n\n\n\n\n\nTo create an activity or a control, use the appropriate sub-generator:\n\n\n#\n create an activity\n\nyo laxarjs2:activity\n\n\n#\n create a control\n\nyo laxarjs2:control\n\n\n\n\n\n\nBy default, activities will be created in the same folder as widgets, while controls will be created in \napplication-root\n/application/controls/\ncontrol-name\n.\nNote that LaxarJS will not automatically find artifacts outside of the default folders (\napplication-root\n/application\n).\nYou can change the defaults using the file \nlaxar.config.js\n, or add additional resolutions to the loader configuration (\nwebpack.config.js\n).\n\n\nAlso, for widgets and controls the previously selected integration technology will be pre-selected the next time one of these artifact types is generated.\nHowever, for activities the pre-selected technology will always be \nplain\n.\nThis is because an activity isn't rendered in the DOM, and any view rendering technology would thus only add bloat.\nA valid exception could be an activity that uses an AngularJS service, for instance.\n\n\nCommand Line Options\n\n\n\n\nartifact-name\n\n\n\n\nWhen asked for the artifact name, this will be prompted as default instead of the current directory.\n\n\n\n\n--banner \nbanner-file.txt\n\n\n\n\nThis is the same as explained above for the application generator.\n\n\n\n\n--directory \nartifacts-directory\n\n\n\n\nThe generator will create the widget, activity or control in a sub-directory of this directory.\nThe name of the artifact will be used as a sub-directory within this directory.\n\n\nExample:\n\n\nmy-app $ yo laxarjs2:widget hello-world-widget --directory stuff/my-widgets\n\n\n\n\n\n\nThis will create the widget in \nmy-app/stuff/my-widgets/hello-world-widget\n.", 
            "title": "README"
        }, 
        {
            "location": "/#laxarjs-2-yeoman-generator", 
            "text": "The  convenient  way to scaffold a new LaxarJS 2.x application, widget or control.   Note:  This generator produces code that works with LaxarJS version 2.x.\nIf you need to create widgets or controls for an application running LaxarJS in version 1.x, you'll have to use  generator-laxarjs  instead.  \n   Take a look at the  documentation site  to browse documentation for all releases of this artifact.", 
            "title": "LaxarJS 2 Yeoman Generator"
        }, 
        {
            "location": "/#installation", 
            "text": "Install the generator package (and optionally  yeoman ) globally via npm:  npm install -g yo generator-laxarjs2", 
            "title": "Installation"
        }, 
        {
            "location": "/#generators", 
            "text": "The Yeoman generator  laxarjs2  comes up with the main generator for scaffolding an application and three sub-generators for widgets, activities and controls.  Available generators:   laxarjs2  laxarjs2:widget  laxarjs2:activity  laxarjs2:control", 
            "title": "Generators"
        }, 
        {
            "location": "/#application", 
            "text": "To scaffold a new LaxarJS application, create a directory and run the generator:  mkdir my-application  cd my-application  yo laxarjs2   After answering several questions, the generator creates the bare-bones application scaffolding for you.\nAlternatively you can choose to let the generator create a set of very simple example widgets in the application.\nWhen choosing this option, a widget is created for every selected integration technology.\nAdditionally, a widget written in plain JavaScript is added, since the corresponding technology adapter is always part of LaxarJS.  Next, all dependencies can be installed by running  npm install  (or  yarn ), and after that is finished, the development web server can be started by running  npm start .", 
            "title": "Application"
        }, 
        {
            "location": "/#command-line-options", 
            "text": "", 
            "title": "Command Line Options"
        }, 
        {
            "location": "/#-banner-banner-filetxt", 
            "text": "By using this option, a text file containing a custom header for source files can be configured.\nWhen the generator creates a new source file ( .js ,  .ts ,  .jsx  or  .vue ), this will be added as header just before the actual code starts.  This option will be saved in the Yeoman configuration file and will be used by sub-generators.", 
            "title": "--banner &lt;banner-file.txt&gt;"
        }, 
        {
            "location": "/#widget-activity-and-control", 
            "text": "The scaffolding for a widget can be generated by running the following in the root directory of the application:  yo laxarjs2:widget   The widget will be created in  application-root /application/widgets/ widget-name .\nIf the generator is not run in the  application root  directory but some other sub-directory, the widget will be created directly in that directory.  Keep in mind that the sub-generators expect to find a  Yeoman configuration file  ( .yo-rc.json ) in the root directory of your application.\nHaving used the generator for the application first, the necessary configuration file will already be in your project.\nIn case you add widgets, activities or controls to an application that was created without Yeoman, simply create the file with an empty object as content:  echo  {}    .yo-rc.json   To create an activity or a control, use the appropriate sub-generator:  #  create an activity yo laxarjs2:activity  #  create a control yo laxarjs2:control   By default, activities will be created in the same folder as widgets, while controls will be created in  application-root /application/controls/ control-name .\nNote that LaxarJS will not automatically find artifacts outside of the default folders ( application-root /application ).\nYou can change the defaults using the file  laxar.config.js , or add additional resolutions to the loader configuration ( webpack.config.js ).  Also, for widgets and controls the previously selected integration technology will be pre-selected the next time one of these artifact types is generated.\nHowever, for activities the pre-selected technology will always be  plain .\nThis is because an activity isn't rendered in the DOM, and any view rendering technology would thus only add bloat.\nA valid exception could be an activity that uses an AngularJS service, for instance.", 
            "title": "Widget, Activity and Control"
        }, 
        {
            "location": "/#command-line-options_1", 
            "text": "artifact-name   When asked for the artifact name, this will be prompted as default instead of the current directory.   --banner  banner-file.txt   This is the same as explained above for the application generator.   --directory  artifacts-directory   The generator will create the widget, activity or control in a sub-directory of this directory.\nThe name of the artifact will be used as a sub-directory within this directory.  Example:  my-app $ yo laxarjs2:widget hello-world-widget --directory stuff/my-widgets   This will create the widget in  my-app/stuff/my-widgets/hello-world-widget .", 
            "title": "Command Line Options"
        }, 
        {
            "location": "/CHANGELOG/", 
            "text": "Changelog\n\n\nLast Changes\n\n\nv2.1.0\n\n\n\n\n#26\n: react: adapted activity template and demo widget to new controller syntax\n\n\n#25\n: react template: fixed injection spreading\n\n\n#24\n: removed obsolete tooling configuration\n\n\n\n\n#17\n: dependencies: updated several dependencies for webpack 3\n        + NEW FEATURE: see ticket for details\n\n\n\n\n\n\n#22\n: fixed name of builtin areas\n\n\n\n\n#23\n: license: Changed default from none to UNLICENSED\n        + NEW FEATURE: see ticket for details\n\n\n\n\nv2.0.2\n\n\n\n\n#20\n: React template: use new laxar-react-adapter API\n\n\n\n\nv2.0.1\n\n\n\n\n#21\n: fixed typescript version for angular2 adapter\n\n\n\n\nv2.0.0\n\n\n\n\n#19\n: app template: use (updated) style-loader\n\n\n\n\nv2.0.0-rc.4\n\n\nv2.0.0-rc.3\n\n\n\n\n#18\n: app template: added SCSS project setup\n\n\n\n\nv2.0.0-rc.2\n\n\n\n\n#6\n: app template: added a simple favicon\n\n\n#16\n: Vue.js controller: moved license header comment to script block\n\n\n#15\n: app template: using ES6 modules for adapter imports\n\n\n#13\n: app template: fixed output paths in webpack config\n\n\n#11\n: jasmine: set to newest version for generated apps\n\n\n\n\nv2.0.0-rc.1\n\n\n\n\n#12\n: fixed dependencies in package.json\n\n\n\n\nv2.0.0-rc.0\n\n\n\n\n#10\n: added simplistic tests\n\n\n#9\n: added \nlayout.json\n to generated layouts\n\n\n\n\nv2.0.0-alpha.1\n\n\n\n\n#8\n: added technology identifier to prompts\n\n\n#7\n: small doc improvements\n\n\n#5\n: removed port configuration\n\n\n\n\nv2.0.0-alpha.0\n\n\n\n\n#4\n: added .babelrc, cleaned up .gitignore and init.js\n\n\n#3\n: react: update to laxar-react-adapter@v2.0.0-beta.0\n\n\n#2\n: change output to \ninit.bundle.js\n\n\n#1\n: use website for documentation links\n\n\n\n\nv0.2.0\n\n\nv0.1.0", 
            "title": "Changelog"
        }, 
        {
            "location": "/CHANGELOG/#changelog", 
            "text": "", 
            "title": "Changelog"
        }, 
        {
            "location": "/CHANGELOG/#last-changes", 
            "text": "", 
            "title": "Last Changes"
        }, 
        {
            "location": "/CHANGELOG/#v210", 
            "text": "#26 : react: adapted activity template and demo widget to new controller syntax  #25 : react template: fixed injection spreading  #24 : removed obsolete tooling configuration   #17 : dependencies: updated several dependencies for webpack 3\n        + NEW FEATURE: see ticket for details    #22 : fixed name of builtin areas   #23 : license: Changed default from none to UNLICENSED\n        + NEW FEATURE: see ticket for details", 
            "title": "v2.1.0"
        }, 
        {
            "location": "/CHANGELOG/#v202", 
            "text": "#20 : React template: use new laxar-react-adapter API", 
            "title": "v2.0.2"
        }, 
        {
            "location": "/CHANGELOG/#v201", 
            "text": "#21 : fixed typescript version for angular2 adapter", 
            "title": "v2.0.1"
        }, 
        {
            "location": "/CHANGELOG/#v200", 
            "text": "#19 : app template: use (updated) style-loader", 
            "title": "v2.0.0"
        }, 
        {
            "location": "/CHANGELOG/#v200-rc4", 
            "text": "", 
            "title": "v2.0.0-rc.4"
        }, 
        {
            "location": "/CHANGELOG/#v200-rc3", 
            "text": "#18 : app template: added SCSS project setup", 
            "title": "v2.0.0-rc.3"
        }, 
        {
            "location": "/CHANGELOG/#v200-rc2", 
            "text": "#6 : app template: added a simple favicon  #16 : Vue.js controller: moved license header comment to script block  #15 : app template: using ES6 modules for adapter imports  #13 : app template: fixed output paths in webpack config  #11 : jasmine: set to newest version for generated apps", 
            "title": "v2.0.0-rc.2"
        }, 
        {
            "location": "/CHANGELOG/#v200-rc1", 
            "text": "#12 : fixed dependencies in package.json", 
            "title": "v2.0.0-rc.1"
        }, 
        {
            "location": "/CHANGELOG/#v200-rc0", 
            "text": "#10 : added simplistic tests  #9 : added  layout.json  to generated layouts", 
            "title": "v2.0.0-rc.0"
        }, 
        {
            "location": "/CHANGELOG/#v200-alpha1", 
            "text": "#8 : added technology identifier to prompts  #7 : small doc improvements  #5 : removed port configuration", 
            "title": "v2.0.0-alpha.1"
        }, 
        {
            "location": "/CHANGELOG/#v200-alpha0", 
            "text": "#4 : added .babelrc, cleaned up .gitignore and init.js  #3 : react: update to laxar-react-adapter@v2.0.0-beta.0  #2 : change output to  init.bundle.js  #1 : use website for documentation links", 
            "title": "v2.0.0-alpha.0"
        }, 
        {
            "location": "/CHANGELOG/#v020", 
            "text": "", 
            "title": "v0.2.0"
        }, 
        {
            "location": "/CHANGELOG/#v010", 
            "text": "", 
            "title": "v0.1.0"
        }
    ]
}