{
    "docs": [
        {
            "location": "/", 
            "text": "LaxarJS generator\n\n\n\n\nUse this Yeoman generator to start develop your LaxarJS application and artifacts.\n\n\n\n\nUsage\n\n\nFirst you have to install the node modules for \nyeoman\n:\n\n\nnpm install -g yo bower grunt-cli gulp\n\n\n\n\n\nand then install the package with the LaxarJS generator:\n\n\nnpm install -g generator-laxarjs\n\n\n\n\n\nGenerators\n\n\nThe LaxarJS Yeoman generator comes up with the main generator for scaffolding an application and three sub generators for widgets, activities and controls.\n\n\nAvailable generators:\n\n\n\n\nlaxarjs\n\n\nlaxarjs:widget\n\n\nlaxarjs:activity\n\n\nlaxarjs:control\n\n\n\n\nApplication\n\n\nTo scaffold a new LaxarJS application create a directory and execute the generator in it:\n\n\nmkdir my-application\ncd my-application\nyo laxarjs\n\n\n\n\n\nAfter answering several questions the generator creates the scaffold and after installing the dependencies with \nnpm install\n you can start the application with \ngrunt laxar-develop\n.\n\n\nSub Generators\n\n\nThe sub generators expect a Yeoman configuration file \n.yo-rc.json\n in the root directory of the application.\nIn case you have created the application with the LaxarJS generator as described above, a Yeoman configuration file was created.\nIf you used an other Yeoman generator there may be a configuration file was created.\n\n\nIf the application has no Yeoman configuration file, just create one with:\n\n\necho {} \n .yo-rc.json\n\n\n\n\n\nWidget\n\n\nTo generate the scaffold for a LaxarJS widget use the following command:\n\n\nyo laxarjs:widget\n\n\n\n\n\nThe generator creates the new widget in a directory named by the widget.\nIf the current directory is the root directory of the application, the generator uses the default path for widgets \nincludes/widgets\n.\nOtherwise the new directory with the scaffold is created in the current directory.\n\n\nActivity\n\n\nTo generate the scaffold for a LaxarJS activity use either the command\n\n\nyo laxarjs:activity\n\n\n\n\n\nor use the widget generator with the option \nactivity\n\n\nyo laxarjs:widget --activity\n\n\n\n\n\nThe generator creates the new activity in a directory named by the activity.\nIf the current directory is the root directory of the application, the generator uses the default path for widgets and activities: \nincludes/widgets\n.\nOtherwise the new directory with the scaffold is created in the current directory.\n\n\nControl\n\n\nTo generate the scaffold for a LaxarJS control use the following command:\n\n\nyo laxarjs:control\n\n\n\n\n\nThe generator creates the new control in a directory named by the control.\nIf the current directory is the root directory of the application, the generator uses the default path for controls \nincludes/controls\n.\nOtherwise the new directory with the scaffold is created in the current directory.\n\n\nArguments and Options for Sub Generators\n\n\nEvery of the three sub generators accepts the name for the artifact as argument and the destination path as option.\nThe following examples are for the widget generator but the others act analog.\n\n\nYou can pass the name for a new widget as argument from the command line:\n\n\nyo laxarjs:widget my-widget\n\n\n\n\n\nIn this case the generator creates the scaffold in the directory \nincludes/widgets/my-widget\n independently from the execution path (the default destination for controls is \nincludes/controls\n and for activities its \nincludes/widgets\n).\n\n\nWith the option \ndirectory\n it is possible to change the destination:\n\n\nyo laxarjs:widget --directory=\nincludes/widgets/destination\n\n\n\n\n\n\nThereby the generator creates the files in a directory named by the new widget in the directory \nincludes/widgets/destination\n.\n\n\nIt is possible to set the directory option and pass the name as argument:\n\n\nyo laxarjs:widget my-widget --directory=\nincludes/my-app\n\n\n\n\n\n\nBy this the full path can be set by the execution command.\nThe generator creates the new widget in the directory \nincludes/my-app/my-widget\n.", 
            "title": "README"
        }, 
        {
            "location": "/#laxarjs-generator", 
            "text": "Use this Yeoman generator to start develop your LaxarJS application and artifacts.", 
            "title": "LaxarJS generator"
        }, 
        {
            "location": "/#usage", 
            "text": "First you have to install the node modules for  yeoman :  npm install -g yo bower grunt-cli gulp  and then install the package with the LaxarJS generator:  npm install -g generator-laxarjs", 
            "title": "Usage"
        }, 
        {
            "location": "/#generators", 
            "text": "The LaxarJS Yeoman generator comes up with the main generator for scaffolding an application and three sub generators for widgets, activities and controls.  Available generators:   laxarjs  laxarjs:widget  laxarjs:activity  laxarjs:control", 
            "title": "Generators"
        }, 
        {
            "location": "/#application", 
            "text": "To scaffold a new LaxarJS application create a directory and execute the generator in it:  mkdir my-application\ncd my-application\nyo laxarjs  After answering several questions the generator creates the scaffold and after installing the dependencies with  npm install  you can start the application with  grunt laxar-develop .", 
            "title": "Application"
        }, 
        {
            "location": "/#sub-generators", 
            "text": "The sub generators expect a Yeoman configuration file  .yo-rc.json  in the root directory of the application.\nIn case you have created the application with the LaxarJS generator as described above, a Yeoman configuration file was created.\nIf you used an other Yeoman generator there may be a configuration file was created.  If the application has no Yeoman configuration file, just create one with:  echo {}   .yo-rc.json", 
            "title": "Sub Generators"
        }, 
        {
            "location": "/#widget", 
            "text": "To generate the scaffold for a LaxarJS widget use the following command:  yo laxarjs:widget  The generator creates the new widget in a directory named by the widget.\nIf the current directory is the root directory of the application, the generator uses the default path for widgets  includes/widgets .\nOtherwise the new directory with the scaffold is created in the current directory.", 
            "title": "Widget"
        }, 
        {
            "location": "/#activity", 
            "text": "To generate the scaffold for a LaxarJS activity use either the command  yo laxarjs:activity  or use the widget generator with the option  activity  yo laxarjs:widget --activity  The generator creates the new activity in a directory named by the activity.\nIf the current directory is the root directory of the application, the generator uses the default path for widgets and activities:  includes/widgets .\nOtherwise the new directory with the scaffold is created in the current directory.", 
            "title": "Activity"
        }, 
        {
            "location": "/#control", 
            "text": "To generate the scaffold for a LaxarJS control use the following command:  yo laxarjs:control  The generator creates the new control in a directory named by the control.\nIf the current directory is the root directory of the application, the generator uses the default path for controls  includes/controls .\nOtherwise the new directory with the scaffold is created in the current directory.", 
            "title": "Control"
        }, 
        {
            "location": "/#arguments-and-options-for-sub-generators", 
            "text": "Every of the three sub generators accepts the name for the artifact as argument and the destination path as option.\nThe following examples are for the widget generator but the others act analog.  You can pass the name for a new widget as argument from the command line:  yo laxarjs:widget my-widget  In this case the generator creates the scaffold in the directory  includes/widgets/my-widget  independently from the execution path (the default destination for controls is  includes/controls  and for activities its  includes/widgets ).  With the option  directory  it is possible to change the destination:  yo laxarjs:widget --directory= includes/widgets/destination   Thereby the generator creates the files in a directory named by the new widget in the directory  includes/widgets/destination .  It is possible to set the directory option and pass the name as argument:  yo laxarjs:widget my-widget --directory= includes/my-app   By this the full path can be set by the execution command.\nThe generator creates the new widget in the directory  includes/my-app/my-widget .", 
            "title": "Arguments and Options for Sub Generators"
        }, 
        {
            "location": "/CHANGELOG/", 
            "text": "Changelog\n\n\nLast Changes\n\n\nv0.2.0\n\n\n\n\n#4\n: added template for plain (non-angular) control\n\n\n#3\n: fixed jasmine2 dependency path\n\n\n\n\nv0.1.0\n\n\n\n\n#1\n: changed spec-tests to use laxar-mocks rather than laxar/laxar-testing\n\n\n#2\n: created one configuration file for bower.json defaults for the scaffolds", 
            "title": "Changelog"
        }, 
        {
            "location": "/CHANGELOG/#changelog", 
            "text": "", 
            "title": "Changelog"
        }, 
        {
            "location": "/CHANGELOG/#last-changes", 
            "text": "", 
            "title": "Last Changes"
        }, 
        {
            "location": "/CHANGELOG/#v020", 
            "text": "#4 : added template for plain (non-angular) control  #3 : fixed jasmine2 dependency path", 
            "title": "v0.2.0"
        }, 
        {
            "location": "/CHANGELOG/#v010", 
            "text": "#1 : changed spec-tests to use laxar-mocks rather than laxar/laxar-testing  #2 : created one configuration file for bower.json defaults for the scaffolds", 
            "title": "v0.1.0"
        }
    ]
}