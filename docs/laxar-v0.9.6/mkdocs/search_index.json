{
    "docs": [
        {
            "location": "/", 
            "text": "LaxarJS\n\n\nGetting Started\n\n\nThis is a very minimal getting started guide. It helps you to set up your first LaxarJS application and to create your first LaxarJS widget.\n\n\nGet the Prerequisites\n\n\nnpm install -g grunt-cli grunt-init\ngit clone https://github.com/LaxarJS/grunt-init-laxar-application.git ~/.grunt-init/laxar-application\ngit clone https://github.com/LaxarJS/grunt-init-laxar-widget.git ~/.grunt-init/laxar-widget\ngit clone https://github.com/LaxarJS/grunt-init-laxar-widget.git ~/.grunt-init/laxar-activity\n\n\n\n\n\nCreate a LaxarJS Application from Our Template\n\n\nmkdir tryout\n\ncd\n tryout\ngrunt-init laxar-application\nnpm install\nnpm start\n\n\n\n\n\nVisit your empty application at \nhttp://localhost:8000/debug.html\n\nPress Ctrl-c to stop the server for now.\n\n\nCreate your first LaxarJS widget\n\n\nCreate a widget which just displays \nHello, world!\n\n\nmkdir -p includes/widgets/tryout/my_first_widget\n\ncd\n includes/widgets/tryout/my_first_widget\ngrunt-init laxar-widget\nadd some widget-HTML:\n\necho\n \nh1\nHello, world!\n/h1\n \n default.theme/my_first_widget.html\n\n\n\n\n\nReference the widget from your page:\n\n\ncd\n -\n\necho\n \n{\n\n\n   \nlayout\n: \none_column\n,\n\n\n   \nareas\n: {\n\n\n      \nactivities\n: [ ],\n\n\n      \nheader\n: [ ],\n\n\n      \ncontent\n: [\n\n\n          {\n\n\n             \nwidget\n: \ntryout/my_first_widget\n\n\n          }\n\n\n      ],\n\n\n      \nfooter\n: [ ]\n\n\n   }\n\n\n}\n\n\n \n application/pages/page1.json\nnpm start\n\n\n\n\n\nSee your widget in action at \nhttp://localhost:8000/debug.html\n\n\nCreate a Compressed Release-Ready Version of Your Application\n\n\nFirst, stop the development server using Ctrl-c.\n\n\ngrunt dist\nnpm start\n\n\n\n\n\nNow your compressed application can be visited at \nhttp://localhost:8000/\n or deployed from the zip file that was just generated for you.\n\n\nNext Steps\n\n\nHave fun developing your first LaxarJS application.\n\n\nMake sure to have a look at the \nAPI doc\n and stay tuned for the upcoming getting started guide.", 
            "title": "README"
        }, 
        {
            "location": "/#laxarjs", 
            "text": "", 
            "title": "LaxarJS"
        }, 
        {
            "location": "/#getting-started", 
            "text": "This is a very minimal getting started guide. It helps you to set up your first LaxarJS application and to create your first LaxarJS widget.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#get-the-prerequisites", 
            "text": "npm install -g grunt-cli grunt-init\ngit clone https://github.com/LaxarJS/grunt-init-laxar-application.git ~/.grunt-init/laxar-application\ngit clone https://github.com/LaxarJS/grunt-init-laxar-widget.git ~/.grunt-init/laxar-widget\ngit clone https://github.com/LaxarJS/grunt-init-laxar-widget.git ~/.grunt-init/laxar-activity", 
            "title": "Get the Prerequisites"
        }, 
        {
            "location": "/#create-a-laxarjs-application-from-our-template", 
            "text": "mkdir tryout cd  tryout\ngrunt-init laxar-application\nnpm install\nnpm start  Visit your empty application at  http://localhost:8000/debug.html \nPress Ctrl-c to stop the server for now.", 
            "title": "Create a LaxarJS Application from Our Template"
        }, 
        {
            "location": "/#create-your-first-laxarjs-widget", 
            "text": "Create a widget which just displays  Hello, world!  mkdir -p includes/widgets/tryout/my_first_widget cd  includes/widgets/tryout/my_first_widget\ngrunt-init laxar-widget\nadd some widget-HTML: echo   h1 Hello, world! /h1    default.theme/my_first_widget.html  Reference the widget from your page:  cd  - echo   {      layout :  one_column ,      areas : {         activities : [ ],         header : [ ],         content : [            {                widget :  tryout/my_first_widget            }        ],         footer : [ ]     }  }     application/pages/page1.json\nnpm start  See your widget in action at  http://localhost:8000/debug.html", 
            "title": "Create your first LaxarJS widget"
        }, 
        {
            "location": "/#create-a-compressed-release-ready-version-of-your-application", 
            "text": "First, stop the development server using Ctrl-c.  grunt dist\nnpm start  Now your compressed application can be visited at  http://localhost:8000/  or deployed from the zip file that was just generated for you.", 
            "title": "Create a Compressed Release-Ready Version of Your Application"
        }, 
        {
            "location": "/#next-steps", 
            "text": "Have fun developing your first LaxarJS application.  Make sure to have a look at the  API doc  and stay tuned for the upcoming getting started guide.", 
            "title": "Next Steps"
        }, 
        {
            "location": "/CHANGELOG/", 
            "text": "Changelog\n\n\nLast Changes\n\n\n\n\n#6\n: The Portal now initializes an i18n object on the application's \n$rootScope\n\n\n#5\n: Testing: The run_spec-script (used to set up the spec tests) now loads controls declared in the widget.json\n\n\n#4\n: PageLoader: Added missing optional negation of generated topics and replacement of expressions in feature keys\n\n\n#3\n: Added url formatting for links in Readme.md\n\n\n#2\n: Fixed grunt-init step in Getting-Started docs\n\n\n#1\n: Added initial Getting-Started documentation", 
            "title": "Changelog"
        }, 
        {
            "location": "/CHANGELOG/#changelog", 
            "text": "", 
            "title": "Changelog"
        }, 
        {
            "location": "/CHANGELOG/#last-changes", 
            "text": "#6 : The Portal now initializes an i18n object on the application's  $rootScope  #5 : Testing: The run_spec-script (used to set up the spec tests) now loads controls declared in the widget.json  #4 : PageLoader: Added missing optional negation of generated topics and replacement of expressions in feature keys  #3 : Added url formatting for links in Readme.md  #2 : Fixed grunt-init step in Getting-Started docs  #1 : Added initial Getting-Started documentation", 
            "title": "Last Changes"
        }, 
        {
            "location": "/api/", 
            "text": "API Documentation", 
            "title": "Overview"
        }, 
        {
            "location": "/api/#api-documentation", 
            "text": "", 
            "title": "API Documentation"
        }, 
        {
            "location": "/api/laxar/", 
            "text": "Documentation\n\n\nfunction Object() { [native code] }#bootstrap( widgetModules )\n\n\nBootstraps AngularJS on the current \nwindow.document\n and sets up the LaxarJS portal. All AngularJS\nmodule names of widgets that are passed to this method will be passed to \nangular.bootstrap\n as initial\ndependencies, along with internal laxar modules. This is needed because AngularJS currently doesn't\nsupport lazy loading of modules. The \nportal_angular_dependencies\n grunt task of LaxarJS will collect\nall widgets reachable for the given \nflow.json\n, define them as dependencies of an amd module, that will\nreturn the names of their respective AngularJS modules. This list of module names can simply be passed\nto the \nboostrap\n method.\n\n\nParameters\n\n\n\n\nwidgetModules {String[]}\n: all AngularJS modules that should instantly be loaded (most probably the widgets)", 
            "title": "laxar.md"
        }, 
        {
            "location": "/api/laxar/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/laxar/#function-object-native-code-bootstrap-widgetmodules", 
            "text": "Bootstraps AngularJS on the current  window.document  and sets up the LaxarJS portal. All AngularJS\nmodule names of widgets that are passed to this method will be passed to  angular.bootstrap  as initial\ndependencies, along with internal laxar modules. This is needed because AngularJS currently doesn't\nsupport lazy loading of modules. The  portal_angular_dependencies  grunt task of LaxarJS will collect\nall widgets reachable for the given  flow.json , define them as dependencies of an amd module, that will\nreturn the names of their respective AngularJS modules. This list of module names can simply be passed\nto the  boostrap  method.", 
            "title": "function Object() { [native code] }#bootstrap( widgetModules )"
        }, 
        {
            "location": "/api/laxar/#parameters", 
            "text": "widgetModules {String[]} : all AngularJS modules that should instantly be loaded (most probably the widgets)", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/", 
            "text": "Documentation\n\n\nEventBus()\n\n\n@param {Object=} optionalConfiguration\n   configuration for the event bus instance\n\n\nParameters\n\n\n- **pendingDidTimeout {Number}**: the timeout in milliseconds used by {@link EventBus#publishAndGatherReplies}. Default is 120000ms\n\n\n\n\n\nEventBus#setErrorHandler( errorHandler )\n\n\nSets an handler for all errors that may occur during event processing. It receives an error message as\nfirst argument and a map with additional information on the problem as second argument. There may be\ninstances of \nError\n as values within the map.\nThe default error handler simply logs all issues to \nconsole.error\n or \nconsole.log\n if available.\n\n\nParameters\n\n\n\n\nerrorHandler {Function}\n: the error handler\n\n\n\n\nEventBus#setMediator( mediator )\n\n\nSets a mediator, that has the chance to alter events shortly before their delivery to the according\nsubscribers. Its sole argument is the complete list of queued events, that should be delivered during\nthe current JavaScript event loop. It then needs to return this optionally modified list again. Events\nmay be added or deleted at will, but the return type needs to be an array containing zero or more event-\nlike objects.\n\n\nParameters\n\n\n\n\nmediator {Function}\n: the mediator function\n\n\n\n\nEventBus#addInspector( inspector )\n\n\nAdds an inspector, that gets notified when certain actions within the event bus take place. Currently\nthis includes the following actions:\n\n\n\n\nsubscribe\n: a new subscriber registered for an event\n\n\npublish\n: an event is published but not yet delivered\n\n\ndeliver\n: an event is actually delivered to a subscriber\n\n\n\n\nAn inspector receives a map with the following properties:\n\n\n\n\naction\n: one of the actions from above\n\n\nsource\n: the origin of the \naction\n\n\ntarget\n: the name of the event subscriber (\ndeliver\n action)\n\n\nevent\n: the full name of the event or the subscribed event (\nsubscribe\n action)\n\n\neventObject\n: the published event item (\npublish\n action)\n\n\nsubscribedTo\n: the event, possibly with omissions, the subscriber subscribed to (\ndeliver\n action)\n\n\ncycleId\n: the id of the event cycle\n\n\n\n\nThe function returned by this method can be called to remove the inspector again and prevent it from\nbeing called for future event bus actions.\n\n\nParameters\n\n\n\n\ninspector {Function}\n: the inspector function to add\n\n\n\n\nReturns\n\n\n\n\n{Function}\n: a function to remove the inspector\n\n\n\n\nEventBus#subscribe( eventName, subscriber, optionalOptions )\n\n\nSubscribes to an event by name. An event name consists of so called \ntopics\n, where each topic is\nseparated from another by dots (\n.\n). If a topic is omitted, this is treated as a wildcard. Note that\ntwo dots in the middle or one dot at the beginning of an event name must remain, whereas a dot at the\nend may be omitted. As such every event name has kind of wildcard at its end. For example these are\nall valid event names:\n\n\n\n\nsome.event\n: matches \nsome.event\n, \nsome.event.again\n\n\n.event\n: matches \nsome.event\n, \nany.event\n, \nany.event.again\n\n\nsome..event\n: matches \nsome.fancy.event\n, \nsome.special.event\n\n\n\n\nAdditionally subtopics are supported. A subtopic are fragments within a topic, separated from another by\nsimple dashes (\n-\n). Here only suffixes of subtopics may be omitted when subscribing. Thus subscribing\nto \nsome.event\n would match an event published with name \nsome.event-again\n or even\n\nsome.event-another.again\n.\n\n\nWhen an event is delivered, the subscriber function receives two arguments:\nThe first one is the event object as it was published. If \nclone\n yields \ntrue\n this is a simple deep\ncopy of the object (note that only properties passing a JSON-(de)serialization remain). If \nfalse\n the\nobject is frozen using \nObject.freeze\n recursively in browsers that support freezing. In Any other\nbrowser this is just an identity operation.\nThe second one is a meta object with these properties:\n\n\n\n\nunsubscribe\n: A function to directly unsubscribe the called subscriber from further events\n\n\nname\n: The name of the event as it actually was delivered (i.e. without wildcards).\n\n\ncycleId\n: The cycle the event was delivered in\n\n\nsender\n: The id of the event sender, may be \nnull\n.\n\n\ninitiator\n: The id of the initator of the cycle. Currently not implemented, thus always \nnull\n.\n\n\noptions\n: The options that were passed to \npublish\n or \npublishAndGatherReplies\n respectively.\n\n\n\n\nParameters\n\n\n\n\n\n\neventName {String}\n: the name of the event to subscribe to\n\n\n\n\n\n\nsubscriber {Function}\n: a function to call whenever an event matching the name is published\n\n\n\n\n\n\noptionalOptions {Object=}\n: additional options for the subscribe action\n\n\n\n\n\n\nsubscriber {String}\n: the id of the subscriber. Default is \nnull\n\n\n\n\n\n\nclone {Boolean}\n: if \nfalse\n the event will be send frozen to the subscriber, otherwise it will receive a deep copy.\nDefault is \ntrue\n\n\n\n\n\n\n\n\n\n\nEventBus#unsubscribe( subscriber )\n\n\nRemoves all subscriptions of the given subscriber.\n\n\nParameters\n\n\n\n\nsubscriber {Function}\n: the function to unsubscribe\n\n\n\n\nEventBus#publish( eventName, optionalEvent, optionalOptions )\n\n\nAsynchronously publishes an event on the event bus. The returned promise will be queued as soon as this\nevent is delivered and, if during delivery a new event was enqueued, resolved after that new event was\ndelivered. If no new event is queued during delivery of this event, the promise is instantly resolved.\nTo make it a bit clearer, lets assume we publish and thus enqueue an event at time \nt\n. It then will be\ndelivered at time \nt+1\n. At that precise moment the promise is enqueued to be resolved soon. We then\ndistinguish between two cases:\n\n\n\n\nAt time \nt+1\n no subscriber publishes (i.e. enqueues) an event: Thus there is no event in the same\n  cycle and the promise is also resolved at time \nt+1\n.\n\n\nAt least one subscriber publishes an event at time \nt+1\n: The promise is then scheduled to be resolved\n  as soon as this event is delivered at time \nt+2\n.\nThe implication of this is the following:\nWe have two collaborators, A and B. A listens to event b and b listens to event A.\nWhenever A publishes a and B than instantly (i.e. in the same event cycle of the JavaScript runtime its\nsubscriber function was called) \"responds\" by publishing b, b arrives at the subscriber function of A\nbefore the promise of A's publish action is resolved.\nIt is hence possible to observe possible effects of an event send by oneself,under the conditions\nmentioned above.\n\n\n\n\nParameters\n\n\n\n\n\n\neventName {String}\n: the name of the event to publish\n\n\n\n\n\n\noptionalEvent {Object=}\n: the event to publish\n\n\n\n\n\n\noptionalOptions {Object=}\n: additional options for the publish action\n\n\n\n\n\n\nsender {String}\n: the id of the event sender. Default is \nnull\n\n\n\n\n\n\ndeliverToSender {Boolean}\n: if \nfalse\n the event will not be send to subscribers whose subscriber name matches\n\noptionalOptions.sender\n, else all subscribers will receive the event. Default is \ntrue\n\n\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n{Promise}\n: the delivery promise\n\n\n\n\nEventBus#publishAndGatherReplies( eventName, optionalEvent, optionalOptions )\n\n\nPublishes an event that follows the request-will-did pattern and awaits all replies. This pattern has\nevolved over time and is of great use when handling the asynchronous nature of event bus events.\n\n\nCertain rules need to be fulfilled: First the initiator needs to call this method with an event whose\nname has the suffix \nRequest\n, e.g. \ntakeActionRequest\n. All collaborators that want to react to this\nevent then either do so in the same event cycle by sending a \ndidTakeAction\n event or announce that they\nwill do something asynchronously by publishing a \nwillTakeAction\n event. In the latter case they need to\nbroadcast the end of their action by sending a \ndidTakeAction\n event. Note that for both events the same\nsender name needs to be given. Otherwise they cannot be mapped and the event bus doesn't know if all\nasynchronous replies were already received.\n\n\nAdditionally a timer is started using either the globally configured \npendingDidTimeout\n ms value or the\nvalue provided as option to this method. If that timer expires before all did\n events to all given will\n\nevents were received, the error handler is called to handle the incident and the promise is resolved as\nnormally.\n\n\nParameters\n\n\n\n\n\n\neventName {String}\n: the name of the event to publish\n\n\n\n\n\n\noptionalEvent {Object=}\n: the event to publish\n\n\n\n\n\n\noptionalOptions {Object=}\n: additional options for the publish action\n\n\n\n\n\n\nsender {String}\n: the id of the event sender. Default is \nnull\n\n\n\n\n\n\npendingDidTimeout {Number}\n: the timeout in milliseconds for pending did* events\n\n\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n{Promise}\n: \n\n\n\n\nensureFunction()\n\n\n@private", 
            "title": "lib-event_bus-event_bus.md"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#eventbus", 
            "text": "@param {Object=} optionalConfiguration\n   configuration for the event bus instance", 
            "title": "EventBus()"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#parameters", 
            "text": "- **pendingDidTimeout {Number}**: the timeout in milliseconds used by {@link EventBus#publishAndGatherReplies}. Default is 120000ms", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#eventbusseterrorhandler-errorhandler", 
            "text": "Sets an handler for all errors that may occur during event processing. It receives an error message as\nfirst argument and a map with additional information on the problem as second argument. There may be\ninstances of  Error  as values within the map.\nThe default error handler simply logs all issues to  console.error  or  console.log  if available.", 
            "title": "EventBus#setErrorHandler( errorHandler )"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#parameters_1", 
            "text": "errorHandler {Function} : the error handler", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#eventbussetmediator-mediator", 
            "text": "Sets a mediator, that has the chance to alter events shortly before their delivery to the according\nsubscribers. Its sole argument is the complete list of queued events, that should be delivered during\nthe current JavaScript event loop. It then needs to return this optionally modified list again. Events\nmay be added or deleted at will, but the return type needs to be an array containing zero or more event-\nlike objects.", 
            "title": "EventBus#setMediator( mediator )"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#parameters_2", 
            "text": "mediator {Function} : the mediator function", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#eventbusaddinspector-inspector", 
            "text": "Adds an inspector, that gets notified when certain actions within the event bus take place. Currently\nthis includes the following actions:   subscribe : a new subscriber registered for an event  publish : an event is published but not yet delivered  deliver : an event is actually delivered to a subscriber   An inspector receives a map with the following properties:   action : one of the actions from above  source : the origin of the  action  target : the name of the event subscriber ( deliver  action)  event : the full name of the event or the subscribed event ( subscribe  action)  eventObject : the published event item ( publish  action)  subscribedTo : the event, possibly with omissions, the subscriber subscribed to ( deliver  action)  cycleId : the id of the event cycle   The function returned by this method can be called to remove the inspector again and prevent it from\nbeing called for future event bus actions.", 
            "title": "EventBus#addInspector( inspector )"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#parameters_3", 
            "text": "inspector {Function} : the inspector function to add", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#returns", 
            "text": "{Function} : a function to remove the inspector", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#eventbussubscribe-eventname-subscriber-optionaloptions", 
            "text": "Subscribes to an event by name. An event name consists of so called  topics , where each topic is\nseparated from another by dots ( . ). If a topic is omitted, this is treated as a wildcard. Note that\ntwo dots in the middle or one dot at the beginning of an event name must remain, whereas a dot at the\nend may be omitted. As such every event name has kind of wildcard at its end. For example these are\nall valid event names:   some.event : matches  some.event ,  some.event.again  .event : matches  some.event ,  any.event ,  any.event.again  some..event : matches  some.fancy.event ,  some.special.event   Additionally subtopics are supported. A subtopic are fragments within a topic, separated from another by\nsimple dashes ( - ). Here only suffixes of subtopics may be omitted when subscribing. Thus subscribing\nto  some.event  would match an event published with name  some.event-again  or even some.event-another.again .  When an event is delivered, the subscriber function receives two arguments:\nThe first one is the event object as it was published. If  clone  yields  true  this is a simple deep\ncopy of the object (note that only properties passing a JSON-(de)serialization remain). If  false  the\nobject is frozen using  Object.freeze  recursively in browsers that support freezing. In Any other\nbrowser this is just an identity operation.\nThe second one is a meta object with these properties:   unsubscribe : A function to directly unsubscribe the called subscriber from further events  name : The name of the event as it actually was delivered (i.e. without wildcards).  cycleId : The cycle the event was delivered in  sender : The id of the event sender, may be  null .  initiator : The id of the initator of the cycle. Currently not implemented, thus always  null .  options : The options that were passed to  publish  or  publishAndGatherReplies  respectively.", 
            "title": "EventBus#subscribe( eventName, subscriber, optionalOptions )"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#parameters_4", 
            "text": "eventName {String} : the name of the event to subscribe to    subscriber {Function} : a function to call whenever an event matching the name is published    optionalOptions {Object=} : additional options for the subscribe action    subscriber {String} : the id of the subscriber. Default is  null    clone {Boolean} : if  false  the event will be send frozen to the subscriber, otherwise it will receive a deep copy.\nDefault is  true", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#eventbusunsubscribe-subscriber", 
            "text": "Removes all subscriptions of the given subscriber.", 
            "title": "EventBus#unsubscribe( subscriber )"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#parameters_5", 
            "text": "subscriber {Function} : the function to unsubscribe", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#eventbuspublish-eventname-optionalevent-optionaloptions", 
            "text": "Asynchronously publishes an event on the event bus. The returned promise will be queued as soon as this\nevent is delivered and, if during delivery a new event was enqueued, resolved after that new event was\ndelivered. If no new event is queued during delivery of this event, the promise is instantly resolved.\nTo make it a bit clearer, lets assume we publish and thus enqueue an event at time  t . It then will be\ndelivered at time  t+1 . At that precise moment the promise is enqueued to be resolved soon. We then\ndistinguish between two cases:   At time  t+1  no subscriber publishes (i.e. enqueues) an event: Thus there is no event in the same\n  cycle and the promise is also resolved at time  t+1 .  At least one subscriber publishes an event at time  t+1 : The promise is then scheduled to be resolved\n  as soon as this event is delivered at time  t+2 .\nThe implication of this is the following:\nWe have two collaborators, A and B. A listens to event b and b listens to event A.\nWhenever A publishes a and B than instantly (i.e. in the same event cycle of the JavaScript runtime its\nsubscriber function was called) \"responds\" by publishing b, b arrives at the subscriber function of A\nbefore the promise of A's publish action is resolved.\nIt is hence possible to observe possible effects of an event send by oneself,under the conditions\nmentioned above.", 
            "title": "EventBus#publish( eventName, optionalEvent, optionalOptions )"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#parameters_6", 
            "text": "eventName {String} : the name of the event to publish    optionalEvent {Object=} : the event to publish    optionalOptions {Object=} : additional options for the publish action    sender {String} : the id of the event sender. Default is  null    deliverToSender {Boolean} : if  false  the event will not be send to subscribers whose subscriber name matches optionalOptions.sender , else all subscribers will receive the event. Default is  true", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#returns_1", 
            "text": "{Promise} : the delivery promise", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#eventbuspublishandgatherreplies-eventname-optionalevent-optionaloptions", 
            "text": "Publishes an event that follows the request-will-did pattern and awaits all replies. This pattern has\nevolved over time and is of great use when handling the asynchronous nature of event bus events.  Certain rules need to be fulfilled: First the initiator needs to call this method with an event whose\nname has the suffix  Request , e.g.  takeActionRequest . All collaborators that want to react to this\nevent then either do so in the same event cycle by sending a  didTakeAction  event or announce that they\nwill do something asynchronously by publishing a  willTakeAction  event. In the latter case they need to\nbroadcast the end of their action by sending a  didTakeAction  event. Note that for both events the same\nsender name needs to be given. Otherwise they cannot be mapped and the event bus doesn't know if all\nasynchronous replies were already received.  Additionally a timer is started using either the globally configured  pendingDidTimeout  ms value or the\nvalue provided as option to this method. If that timer expires before all did  events to all given will \nevents were received, the error handler is called to handle the incident and the promise is resolved as\nnormally.", 
            "title": "EventBus#publishAndGatherReplies( eventName, optionalEvent, optionalOptions )"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#parameters_7", 
            "text": "eventName {String} : the name of the event to publish    optionalEvent {Object=} : the event to publish    optionalOptions {Object=} : additional options for the publish action    sender {String} : the id of the event sender. Default is  null    pendingDidTimeout {Number} : the timeout in milliseconds for pending did* events", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#returns_2", 
            "text": "{Promise} :", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#ensurefunction", 
            "text": "@private", 
            "title": "ensureFunction()"
        }, 
        {
            "location": "/api/lib/i18n/i18n/", 
            "text": "Documentation\n\n\nfunction Object() { [native code] }#format()\n\n\nShortcut to text.format, for simple chaining to the localizer.\n\n\nThese are equal:\n\n\n\n\ntext.format( i18n.localizer( tag )( i18nValue ), arg1, arg2 )\n\n\ni18n.localizer( tag ).format( i18nValue, arg1, arg2 )\n.", 
            "title": "lib-i18n-i18n.md"
        }, 
        {
            "location": "/api/lib/i18n/i18n/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/i18n/i18n/#function-object-native-code-format", 
            "text": "Shortcut to text.format, for simple chaining to the localizer.  These are equal:   text.format( i18n.localizer( tag )( i18nValue ), arg1, arg2 )  i18n.localizer( tag ).format( i18nValue, arg1, arg2 ) .", 
            "title": "function Object() { [native code] }#format()"
        }, 
        {
            "location": "/api/lib/logging/level/", 
            "text": "Documentation", 
            "title": "lib-logging-level.md"
        }, 
        {
            "location": "/api/lib/logging/level/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/logging/log/", 
            "text": "Documentation", 
            "title": "lib-logging-log.md"
        }, 
        {
            "location": "/api/lib/logging/log/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/logging/log_context/", 
            "text": "Documentation\n\n\nLogContext()\n\n\nA context for a logger instance. Each context manages a stack of scopes where each scope can hold a\ndifferent set of log tags. Initially a context already has one scope on its stack, that cannot be left.\nTrying to do so will lead to an error. Thus each party entering a scope is also responsible for leaving\nthat scope again.\n\n\nLogContext#enterScope()\n\n\nEnters a new scope by pushing a scope object with an empty set of tags onto the stack.\n\n\nLogContext#leaveScope()\n\n\nLeaves the current scope and thus discards all tags set on this scope. An error is raised if an attempt\nto remove the root scope is made.\n\n\nLogContext#addTag( tag, value )\n\n\nAdds a value for a log tag to the scope entered last, i.e. the one on the top of the stack. If a tag\nis already known for the current scope, the value is appended to the existing one using a \n;\n as\nseparator. Note that no formatting of the value takes place and a non-string value will just have its\nappropriate \ntoString\n method called.\n\n\nParameters\n\n\n\n\n\n\ntag {String}\n: the id of the tag to add a value for\n\n\n\n\n\n\nvalue {String}\n: the value to add\n\n\n\n\n\n\nLogContext#gatherTags()\n\n\nReturns a map of all tags gathered from all scopes. If there are multiple values for the same tag across\ndifferent scopes, their values are concatenated using a \n;\n as separator.\n\n\nReturns\n\n\n\n\n{Object}\n: a mapping from tag to its value(s)", 
            "title": "lib-logging-log_context.md"
        }, 
        {
            "location": "/api/lib/logging/log_context/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/logging/log_context/#logcontext", 
            "text": "A context for a logger instance. Each context manages a stack of scopes where each scope can hold a\ndifferent set of log tags. Initially a context already has one scope on its stack, that cannot be left.\nTrying to do so will lead to an error. Thus each party entering a scope is also responsible for leaving\nthat scope again.", 
            "title": "LogContext()"
        }, 
        {
            "location": "/api/lib/logging/log_context/#logcontextenterscope", 
            "text": "Enters a new scope by pushing a scope object with an empty set of tags onto the stack.", 
            "title": "LogContext#enterScope()"
        }, 
        {
            "location": "/api/lib/logging/log_context/#logcontextleavescope", 
            "text": "Leaves the current scope and thus discards all tags set on this scope. An error is raised if an attempt\nto remove the root scope is made.", 
            "title": "LogContext#leaveScope()"
        }, 
        {
            "location": "/api/lib/logging/log_context/#logcontextaddtag-tag-value", 
            "text": "Adds a value for a log tag to the scope entered last, i.e. the one on the top of the stack. If a tag\nis already known for the current scope, the value is appended to the existing one using a  ;  as\nseparator. Note that no formatting of the value takes place and a non-string value will just have its\nappropriate  toString  method called.", 
            "title": "LogContext#addTag( tag, value )"
        }, 
        {
            "location": "/api/lib/logging/log_context/#parameters", 
            "text": "tag {String} : the id of the tag to add a value for    value {String} : the value to add", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/logging/log_context/#logcontextgathertags", 
            "text": "Returns a map of all tags gathered from all scopes. If there are multiple values for the same tag across\ndifferent scopes, their values are concatenated using a  ;  as separator.", 
            "title": "LogContext#gatherTags()"
        }, 
        {
            "location": "/api/lib/logging/log_context/#returns", 
            "text": "{Object} : a mapping from tag to its value(s)", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/logging/logger/", 
            "text": "Documentation\n\n\nLogger()\n\n\n@param {Object} options\n\n\nfunction Object() { [native code] }#context {LogContext}\n\n\nThe log context of this logger.\n\n\nLogger#log( level, message, replacements )\n\n\nLogs a message. A message may contain placeholders in the form \n[#]\n where \n#\n ressembles the index\nwithin the list of \nreplacements\n. \nreplacements\n are incrementally counted starting at \n0\n. If the\nlog level is below the configured log level the message simply is discarded.\n\n\nParameters\n\n\n\n\n\n\nlevel {Number}\n: the level for this message\n\n\n\n\n\n\nmessage {String}\n: the message to log\n\n\n\n\n\n\nreplacements {...*}\n: objects that should replace placeholders within the message\n\n\n\n\n\n\nLogger#addLogChannel( channel )\n\n\nAdds a new channel to forward log messages to. A channel is called synchronously for every log message\nand is responsible to trigger something asynchronously itself if necessary. Each message is an object\nhaving the following properties:\n\n\n\n\nid\n: a unique, incremented id of the log message\n\n\nlevel\n: the log level of the message in string representation\n\n\ntext\n: the actual message that was logged\n\n\nreplacements\n: the raw list of replacements passed along the message\n\n\ntime\n: JavaScript Date instance when the message was logged\n\n\ntags\n: A map of all log tags currently set on the logger's scope\n\n\nsourceInfo\n: if supported, a map containing \nfile\n, \nline\n and \nchar\n where the logging took place\n\n\n\n\nParameters\n\n\n\n\nchannel {Function}\n: the log channel to add\n\n\n\n\nLogger#removeLogChannel( channel )\n\n\nRemoves a log channel and thus stops sending further messages to it.\n\n\nParameters\n\n\n\n\nchannel {Function}\n: the log channel to remove\n\n\n\n\nLogger#setLogThreshold( threshold )\n\n\nSets the threshold for log messages. Log messages with a lower level will be discarded upon logging.\n\n\nParameters\n\n\n\n\nthreshold {String|Number}\n: the numeric or the string value of the log level to use as threshold", 
            "title": "lib-logging-logger.md"
        }, 
        {
            "location": "/api/lib/logging/logger/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/logging/logger/#logger", 
            "text": "@param {Object} options", 
            "title": "Logger()"
        }, 
        {
            "location": "/api/lib/logging/logger/#function-object-native-code-context-logcontext", 
            "text": "The log context of this logger.", 
            "title": "function Object() { [native code] }#context {LogContext}"
        }, 
        {
            "location": "/api/lib/logging/logger/#loggerlog-level-message-replacements", 
            "text": "Logs a message. A message may contain placeholders in the form  [#]  where  #  ressembles the index\nwithin the list of  replacements .  replacements  are incrementally counted starting at  0 . If the\nlog level is below the configured log level the message simply is discarded.", 
            "title": "Logger#log( level, message, replacements )"
        }, 
        {
            "location": "/api/lib/logging/logger/#parameters", 
            "text": "level {Number} : the level for this message    message {String} : the message to log    replacements {...*} : objects that should replace placeholders within the message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/logging/logger/#loggeraddlogchannel-channel", 
            "text": "Adds a new channel to forward log messages to. A channel is called synchronously for every log message\nand is responsible to trigger something asynchronously itself if necessary. Each message is an object\nhaving the following properties:   id : a unique, incremented id of the log message  level : the log level of the message in string representation  text : the actual message that was logged  replacements : the raw list of replacements passed along the message  time : JavaScript Date instance when the message was logged  tags : A map of all log tags currently set on the logger's scope  sourceInfo : if supported, a map containing  file ,  line  and  char  where the logging took place", 
            "title": "Logger#addLogChannel( channel )"
        }, 
        {
            "location": "/api/lib/logging/logger/#parameters_1", 
            "text": "channel {Function} : the log channel to add", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/logging/logger/#loggerremovelogchannel-channel", 
            "text": "Removes a log channel and thus stops sending further messages to it.", 
            "title": "Logger#removeLogChannel( channel )"
        }, 
        {
            "location": "/api/lib/logging/logger/#parameters_2", 
            "text": "channel {Function} : the log channel to remove", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/logging/logger/#loggersetlogthreshold-threshold", 
            "text": "Sets the threshold for log messages. Log messages with a lower level will be discarded upon logging.", 
            "title": "Logger#setLogThreshold( threshold )"
        }, 
        {
            "location": "/api/lib/logging/logger/#parameters_3", 
            "text": "threshold {String|Number} : the numeric or the string value of the log level to use as threshold", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/testing/http_mock/", 
            "text": "Documentation\n\n\nHttpMock( q )\n\n\nA http client mock for unit tests. All mocked http methods (like e.g. \nget\n, \npost\n or \nput\n) are being\nspied on.\n\n\nParameters\n\n\n\n\nq {$q}\n: a promise library conforming to AngularJS's \n$q\n\n\n\n\nfunction Object() { [native code] }#history {Array}\n\n\nA list of all http activities that took place so far. Each entry is a string consisting of the http\nmethod, a boolean flag indicating whether the request could be handled successfully, the requested\nurl and the time stamp of the request. Use this for debugging purposes in your test case only.\n\n\nfunction Object() { [native code] }#responseMap {Object}\n\n\nA map of http methods to maps of urls to the mocked response objects.", 
            "title": "lib-testing-http_mock.md"
        }, 
        {
            "location": "/api/lib/testing/http_mock/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/testing/http_mock/#httpmock-q", 
            "text": "A http client mock for unit tests. All mocked http methods (like e.g.  get ,  post  or  put ) are being\nspied on.", 
            "title": "HttpMock( q )"
        }, 
        {
            "location": "/api/lib/testing/http_mock/#parameters", 
            "text": "q {$q} : a promise library conforming to AngularJS's  $q", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/testing/http_mock/#function-object-native-code-history-array", 
            "text": "A list of all http activities that took place so far. Each entry is a string consisting of the http\nmethod, a boolean flag indicating whether the request could be handled successfully, the requested\nurl and the time stamp of the request. Use this for debugging purposes in your test case only.", 
            "title": "function Object() { [native code] }#history {Array}"
        }, 
        {
            "location": "/api/lib/testing/http_mock/#function-object-native-code-responsemap-object", 
            "text": "A map of http methods to maps of urls to the mocked response objects.", 
            "title": "function Object() { [native code] }#responseMap {Object}"
        }, 
        {
            "location": "/api/lib/testing/jquery_mock/", 
            "text": "Documentation\n\n\nfunction Object() { [native code] }#mockResult( method, selectorOrElement, result )\n\n\nMocks the result to a jQuery method call. The mocked result is only returned if \nselectorOrElement\n\nmatches either the selector or the DOM element the jQuery object was created with.\n\n\nParameters\n\n\n\n\n\n\nmethod {String}\n: name of the method to mock the result for\n\n\n\n\n\n\nselectorOrElement {String|HTMLElement}\n: the selector or DOM element for which the mocked result is returned\n\n\n\n\n\n\nresult {*}\n: the mocked result\n\n\n\n\n\n\nfunction Object() { [native code] }#mockMethod( method, selectorOrElement, mockMethod )\n\n\nMocks the call to a jQuery method. The mock method is only called if \nselectorOrElement\n matches either\nthe selector or the DOM element the jQuery object was created with.\n\n\nParameters\n\n\n\n\n\n\nmethod {String}\n: name of the method to mock the result for\n\n\n\n\n\n\nselectorOrElement {String|HTMLElement}\n: the selector or DOM element for which the mocked result is returned\n\n\n\n\n\n\nmockMethod {Function}\n: the function to call instead of the original one\n\n\n\n\n\n\nfunction Object() { [native code] }#mockReset()\n\n\nRemoves all mocked methods and results from jQuery and reattaches the original implementations.", 
            "title": "lib-testing-jquery_mock.md"
        }, 
        {
            "location": "/api/lib/testing/jquery_mock/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/testing/jquery_mock/#function-object-native-code-mockresult-method-selectororelement-result", 
            "text": "Mocks the result to a jQuery method call. The mocked result is only returned if  selectorOrElement \nmatches either the selector or the DOM element the jQuery object was created with.", 
            "title": "function Object() { [native code] }#mockResult( method, selectorOrElement, result )"
        }, 
        {
            "location": "/api/lib/testing/jquery_mock/#parameters", 
            "text": "method {String} : name of the method to mock the result for    selectorOrElement {String|HTMLElement} : the selector or DOM element for which the mocked result is returned    result {*} : the mocked result", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/testing/jquery_mock/#function-object-native-code-mockmethod-method-selectororelement-mockmethod", 
            "text": "Mocks the call to a jQuery method. The mock method is only called if  selectorOrElement  matches either\nthe selector or the DOM element the jQuery object was created with.", 
            "title": "function Object() { [native code] }#mockMethod( method, selectorOrElement, mockMethod )"
        }, 
        {
            "location": "/api/lib/testing/jquery_mock/#parameters_1", 
            "text": "method {String} : name of the method to mock the result for    selectorOrElement {String|HTMLElement} : the selector or DOM element for which the mocked result is returned    mockMethod {Function} : the function to call instead of the original one", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/testing/jquery_mock/#function-object-native-code-mockreset", 
            "text": "Removes all mocked methods and results from jQuery and reattaches the original implementations.", 
            "title": "function Object() { [native code] }#mockReset()"
        }, 
        {
            "location": "/api/lib/testing/matchers/", 
            "text": "Documentation\n\n\nshint validthis:true", 
            "title": "lib-testing-matchers.md"
        }, 
        {
            "location": "/api/lib/testing/matchers/#documentation", 
            "text": "shint validthis:true", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/testing/portal_mocks/", 
            "text": "Documentation", 
            "title": "lib-testing-portal_mocks.md"
        }, 
        {
            "location": "/api/lib/testing/portal_mocks/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/testing/portal_mocks_angular/", 
            "text": "Documentation", 
            "title": "lib-testing-portal_mocks_angular.md"
        }, 
        {
            "location": "/api/lib/testing/portal_mocks_angular/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/testing/run_spec/", 
            "text": "Documentation", 
            "title": "lib-testing-run_spec.md"
        }, 
        {
            "location": "/api/lib/testing/run_spec/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/testing/testing/", 
            "text": "Documentation", 
            "title": "lib-testing-testing.md"
        }, 
        {
            "location": "/api/lib/testing/testing/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/utilities/array/", 
            "text": "Documentation", 
            "title": "lib-utilities-array.md"
        }, 
        {
            "location": "/api/lib/utilities/array/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/utilities/assert/", 
            "text": "Documentation\n\n\nAssertion( subject, optionalDetails )\n\n\nConstructor for Assert.\n\n\nParameters\n\n\n\n\n\n\nsubject {*}\n: the object assertions are made for\n\n\n\n\n\n\noptionalDetails {String=}\n: details that should be printed whenever no details are given for an assertion method\n\n\n\n\n\n\nAssertion#isNotNull( optionalDetails )\n\n\nThrows an error if the subject is \nnull\n or \nundefined\n.\n\n\nParameters\n\n\n\n\noptionalDetails {String=}\n: details to append to the error message\n\n\n\n\nReturns\n\n\n\n\n{Assertion}\n: this instance\n\n\n\n\nAssertion#hasType( type, optionalDetails )\n\n\nThrows an error if the subject is not of the given type. No error is thrown for \nnull\n or \nundefined\n.\n\n\nParameters\n\n\n\n\n\n\ntype {Function}\n: the expected type of the subject\n\n\n\n\n\n\noptionalDetails {String=}\n: details to append to the error message\n\n\n\n\n\n\nReturns\n\n\n\n\n{Assertion}\n: this instance\n\n\n\n\nAssertion#hasProperty( property, optionalDetails )\n\n\nThrows an error if the subject is no object or the given property is not defined on it.\n\n\nParameters\n\n\n\n\n\n\nproperty {String}\n: the property that is expected for the subject\n\n\n\n\n\n\noptionalDetails {String=}\n: details to append to the error message\n\n\n\n\n\n\nReturns\n\n\n\n\n{Assertion}\n: this instance\n\n\n\n\nassert( subject, optionalDetails )\n\n\nCreates and returns a mew \nAssertion\n instance for the given \nsubject\n.\n\n\nParameters\n\n\n\n\n\n\nsubject {*}\n: the object assertions are made for\n\n\n\n\n\n\noptionalDetails {String=}\n: details that should be printed whenever no details are given for an assertion method\n\n\n\n\n\n\nReturns\n\n\n\n\n{Assertion}\n: the assertion instance\n\n\n\n\nfunction Object() { [native code] }#codeIsUnreachable( optionalDetails )\n\n\nMarks a code path as erroneous if reached by throwing an error.\n\n\nParameters\n\n\n\n\noptionalDetails {String=}\n: details to append to the error message\n\n\n\n\nfunction Object() { [native code] }#state( expression, optionalDetails )\n\n\nThrows an error if the given expression is falsy.\n\n\nParameters\n\n\n\n\n\n\nexpression {*}\n: the expression to test for truthyness\n\n\n\n\n\n\noptionalDetails {String=}\n: details to append to the error message", 
            "title": "lib-utilities-assert.md"
        }, 
        {
            "location": "/api/lib/utilities/assert/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/utilities/assert/#assertion-subject-optionaldetails", 
            "text": "Constructor for Assert.", 
            "title": "Assertion( subject, optionalDetails )"
        }, 
        {
            "location": "/api/lib/utilities/assert/#parameters", 
            "text": "subject {*} : the object assertions are made for    optionalDetails {String=} : details that should be printed whenever no details are given for an assertion method", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/assert/#assertionisnotnull-optionaldetails", 
            "text": "Throws an error if the subject is  null  or  undefined .", 
            "title": "Assertion#isNotNull( optionalDetails )"
        }, 
        {
            "location": "/api/lib/utilities/assert/#parameters_1", 
            "text": "optionalDetails {String=} : details to append to the error message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/assert/#returns", 
            "text": "{Assertion} : this instance", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/utilities/assert/#assertionhastype-type-optionaldetails", 
            "text": "Throws an error if the subject is not of the given type. No error is thrown for  null  or  undefined .", 
            "title": "Assertion#hasType( type, optionalDetails )"
        }, 
        {
            "location": "/api/lib/utilities/assert/#parameters_2", 
            "text": "type {Function} : the expected type of the subject    optionalDetails {String=} : details to append to the error message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/assert/#returns_1", 
            "text": "{Assertion} : this instance", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/utilities/assert/#assertionhasproperty-property-optionaldetails", 
            "text": "Throws an error if the subject is no object or the given property is not defined on it.", 
            "title": "Assertion#hasProperty( property, optionalDetails )"
        }, 
        {
            "location": "/api/lib/utilities/assert/#parameters_3", 
            "text": "property {String} : the property that is expected for the subject    optionalDetails {String=} : details to append to the error message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/assert/#returns_2", 
            "text": "{Assertion} : this instance", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/utilities/assert/#assert-subject-optionaldetails", 
            "text": "Creates and returns a mew  Assertion  instance for the given  subject .", 
            "title": "assert( subject, optionalDetails )"
        }, 
        {
            "location": "/api/lib/utilities/assert/#parameters_4", 
            "text": "subject {*} : the object assertions are made for    optionalDetails {String=} : details that should be printed whenever no details are given for an assertion method", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/assert/#returns_3", 
            "text": "{Assertion} : the assertion instance", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/utilities/assert/#function-object-native-code-codeisunreachable-optionaldetails", 
            "text": "Marks a code path as erroneous if reached by throwing an error.", 
            "title": "function Object() { [native code] }#codeIsUnreachable( optionalDetails )"
        }, 
        {
            "location": "/api/lib/utilities/assert/#parameters_5", 
            "text": "optionalDetails {String=} : details to append to the error message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/assert/#function-object-native-code-state-expression-optionaldetails", 
            "text": "Throws an error if the given expression is falsy.", 
            "title": "function Object() { [native code] }#state( expression, optionalDetails )"
        }, 
        {
            "location": "/api/lib/utilities/assert/#parameters_6", 
            "text": "expression {*} : the expression to test for truthyness    optionalDetails {String=} : details to append to the error message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/object/", 
            "text": "Documentation\n\n\nfillArrayWithNull()\n\n\n@private", 
            "title": "lib-utilities-object.md"
        }, 
        {
            "location": "/api/lib/utilities/object/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/utilities/object/#fillarraywithnull", 
            "text": "@private", 
            "title": "fillArrayWithNull()"
        }, 
        {
            "location": "/api/lib/utilities/path/", 
            "text": "Documentation", 
            "title": "lib-utilities-path.md"
        }, 
        {
            "location": "/api/lib/utilities/path/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/utilities/storage/", 
            "text": "Documentation\n\n\nStorage( backend, namespace )\n\n\nWrapper for \nwindow.localStorage\n or \nwindow.sessionStorage\n providing a more convenient api. In fact it\nprovides a K/V store where values can be any \"JSON-stringifyable\" object and stores them in a \nbackend\n\nonly supporting strings as values.\n\n\nParameters\n\n\n\n\n\n\nbackend {Object}\n: the K/V store, probably only accepting string values\n\n\n\n\n\n\nnamespace {String}\n: prefix for all keys for namespacing purposes\n\n\n\n\n\n\nStorage#getItem( key )\n\n\nRetrieves an item by key from the store. Note that the namespace the store was created with is prepended\nautomatically to the key.\n\n\nParameters\n\n\n\n\nkey {String}\n: the key of the item to retrieve\n\n\n\n\nReturns\n\n\n\n\n{*}\n: the value or \nnull\n if it doesn't exist in the store\n\n\n\n\nStorage#setItem( key, value )\n\n\nSets a value for a key. An existing value will be overwritten Note that the namespace the store was\ncreated with is prepended automatically to the key.\n\n\nParameters\n\n\n\n\n\n\nkey {String}\n: the key of the item to set\n\n\n\n\n\n\nvalue {*}\n: the new value to set\n\n\n\n\n\n\nStorage#removeItem( key )\n\n\nRemoves the value associated with \nkey\n from the store. Note that the namespace the store was created\nwith is prepended automatically to the key.\n\n\nParameters\n\n\n\n\nkey {String}\n: the key of the item to remove", 
            "title": "lib-utilities-storage.md"
        }, 
        {
            "location": "/api/lib/utilities/storage/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/utilities/storage/#storage-backend-namespace", 
            "text": "Wrapper for  window.localStorage  or  window.sessionStorage  providing a more convenient api. In fact it\nprovides a K/V store where values can be any \"JSON-stringifyable\" object and stores them in a  backend \nonly supporting strings as values.", 
            "title": "Storage( backend, namespace )"
        }, 
        {
            "location": "/api/lib/utilities/storage/#parameters", 
            "text": "backend {Object} : the K/V store, probably only accepting string values    namespace {String} : prefix for all keys for namespacing purposes", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/storage/#storagegetitem-key", 
            "text": "Retrieves an item by key from the store. Note that the namespace the store was created with is prepended\nautomatically to the key.", 
            "title": "Storage#getItem( key )"
        }, 
        {
            "location": "/api/lib/utilities/storage/#parameters_1", 
            "text": "key {String} : the key of the item to retrieve", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/storage/#returns", 
            "text": "{*} : the value or  null  if it doesn't exist in the store", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/utilities/storage/#storagesetitem-key-value", 
            "text": "Sets a value for a key. An existing value will be overwritten Note that the namespace the store was\ncreated with is prepended automatically to the key.", 
            "title": "Storage#setItem( key, value )"
        }, 
        {
            "location": "/api/lib/utilities/storage/#parameters_2", 
            "text": "key {String} : the key of the item to set    value {*} : the new value to set", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/storage/#storageremoveitem-key", 
            "text": "Removes the value associated with  key  from the store. Note that the namespace the store was created\nwith is prepended automatically to the key.", 
            "title": "Storage#removeItem( key )"
        }, 
        {
            "location": "/api/lib/utilities/storage/#parameters_3", 
            "text": "key {String} : the key of the item to remove", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/string/", 
            "text": "Documentation", 
            "title": "lib-utilities-string.md"
        }, 
        {
            "location": "/api/lib/utilities/string/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/manuals/", 
            "text": "return to index\n\n\nManuals\n\n\n\n\nWriting Pages", 
            "title": "Overview"
        }, 
        {
            "location": "/manuals/#manuals", 
            "text": "Writing Pages", 
            "title": "Manuals"
        }, 
        {
            "location": "/manuals/i18n/", 
            "text": "return to the manuals\n\n\nPreliminary readings:\n\n\n\n\nWidgets and Activities\n\n\n\n\nInternationalizing a widget (i18n)\n\n\nIn LaxarJS, internationalization of widgets is optional.\nRead on if you are interested in writing widgets that support multiple languages, and even switching them without reloading the page.\n\n\nConcept of i18n in LaxarJS\n\n\nLaxarJS distinguishes \nlocales\n and \nlanguage tags\n for internationalization.\nEach locale has a constant name like \"default\" or \"customer\" and a language tag like \"en_US\", which can change over time.\nThe language tag of a given locale can be modified through activities or widgets when the application is running.\nTo change the language tag of a locale an activity has to publish the \nchangeLocaleRequest.{locale}\n event.\n\n\nExample: To change the language tag of the locale \nmyLocale\n to \nde_DE\n, the following event has to be published:\n\n\n$scope\n.\neventBus\n.\npublish\n(\n \nchangeLocaleRequest.myLocale.\n,\n\n    \n{\n \n        \nlocale\n:\n \nmyLocale\n,\n \n        \nlanguageTag\n:\n \nde_DE\n \n    \n}\n\n\n);\n\n\n\n\n\n\nIf a widget is interested in changes to \nmyLocale\n, it would subscribe to the corresponding \ndidChangeLocale\n-event, which is published by the LaxarJS flow-controller:\n\n\n$scope\n.\neventBus\n.\nsubscribe\n(\n \ndidChangeLocale.myLocale.\n,\n \nfunction\n(\n \nevent\n \n)\n \n{\n\n   \nax\n.\nlog\n.\ninfo\n(\n \nI have received tag [0] for locale [1]\n,\n \nevent\n.\nlanguageTag\n,\n \nevent\n.\nlocale\n \n);\n\n\n}\n \n);\n\n\n\n\n\n\nWidgets can use the language tags that they receive over the event bus to \nlocalize\n internationalized values.\nInternationalized values are JSON-Objects which contain an entry for each supported language tag.\nBy convention, variables and properties that contain internationalized values are prefixed with \ni18n\n:\n\n\ni18nHtmlText\n:\n \n{\n\n    \nen_US\n:\n \nUpload file\n,\n\n    \nde_DE\n:\n \nDatei hochladen\n\n\n}\n\n\n\n\n\n\nLaxarJS provides some tools which help to deal with i18n.\nThey are based on the events shown above, and demonstrated in the following section.\n\n\nWriting an i18n-capable Widget\n\n\nTo be able to localize internationalized values in templates, widgets can use the i18n-directives which are provided by Laxar-UiKit.\nThis is accomplished by adding the i18n control to the top-level entry \ncontrols\n in the \nwidget.json\n.\nIf missing, this entry must be created:\n\n\ncontrols\n:\n \n[\n\n    \nlaxar_uikit/controls/i18n\n\n\n]\n\n\n\n\n\n\nNext, we have to add a feature \ni18n\n.\nIt allows page authors to configure the name of the locale (e.g. \"customer\") to be used by this widget.\nThe actual language tag associated with that locale (for example en_GB) is then used to localize internationalized values.\n\n\ni18n\n:\n \n{\n\n   \ndescription\n:\n \nWhich locale to use for displaying this widget.\n,\n\n   \ntype\n:\n \nobject\n,\n\n   \nproperties\n:\n \n{\n\n      \nlocale\n:\n \n{\n\n         \ntype\n:\n \nstring\n,\n\n         \ndescription\n:\n \nThe topic under which to expect the locale for this widget.\n,\n\n         \ndefault\n:\n \ndefault\n\n      \n}\n\n   \n}\n\n\n}\n\n\n\n\n\n\nIf not already done, we import the Laxar-Patterns library into the widget controller (\nmy_widget.js\n).\nThe i18n-handler offered by Laxar-Patterns subscribes the widget to the right \ndidChangeLocale\n-events for us, by using the feature configuration that we added in the previous step:\n\n\ndefine\n(\n \n[\n   \n   \nlaxar_patterns\n\n\n],\n \nfunction\n(\n \npatterns\n \n)\n \n{\n\n   \npatterns\n.\ni18n\n.\nhandlerFor\n(\n \n$scope\n \n).\nscopeLocaleFromFeature\n(\n \ni18n\n \n);\n\n   \n...\n\n\n}\n\n\n\n\n\n\nAny updates to the i18n-locale received over the event bus will now be saved under \n$scope.i18n\n, along with their tags.\nMore locales may be registered for other features (if a single widget wants to use more than one language at the same time), resulting ins something like:\n\n\n$scope.i\n18\nn\n \n=\n \n{\n      \n   \nlocale:\n \ndefault\n,\n\n   \ntags:\n \n{\n\n      \ndefault\n:\n \nen_US\n,\n\n      \ncustomer\n:\n \nde_DE\n,\n\n      \nsupport\n:\n \nen_GB\n\n   \n}\n\n\n}\n\n\n\n\n\n\nIn the HTML template we can now use the angular filter \naxLocalize\n to convert an i18nHtmlText to a string:\n\n\np\n \ndata-ng-bind-html\n=\nmodel.i18nHtmlText | axLocalize:i18n\n/\np\n\n\n\n\n\n\nThe filter expects an object for internationalization or a string if the value is not internationalized.\nIt uses \n$scope.i18n.locale\n (passed as an argument to the filter) to select the correct language tag.\nEvery property of the object should have a language tag as key and the translated text or html as value.\n\n\ni18nHtmlText\n:\n \n{\n\n    \nen_US\n:\n \nUpload file \nem\nnow\n/em\n,\n\n    \nde_DE\n:\n \nDatei \nem\njetzt\n/em\n hochladen\n\n\n}\n\n\n\n\n\n\nLocalizing values in the controller\n\n\nIn some cases it is more appropriate to create the localized string inside the controller of the widget.\nThis is the case if the localization has to be retrieved from the server first.\n\n\np\n \ndata-ng-bind-html\n=\nmodel.htmlVeryLongDocument\n/\np\n\n\n\n\n\n\nTo achieve this, we obtain a \nlocalize\n function when we subscribe the widget to the didChangeLocale event.\nLike the \naxLocalize\n-directive, this function automatically uses the current language tag:\n\n\nvar\n \nlocalize\n \n=\n \npatterns\n.\ni18n\n.\nhandlerFor\n(\n \n$scope\n \n).\nscopeLocaleFromFeature\n(\n \ni18n\n,\n \n{\n\n    \nonChange\n:\n \nupdateLocalization\n\n\n}\n \n).\nlocalizer\n();\n\n\n\n\n\n\nThen we can transform any object with language tag properties to a string using the \nlocalize\n function:\n\n\nfunction\n \nupdateLocalization\n()\n \n{\n\n   \nvar\n \ndocumentUrl\n \n=\n \nlocalize\n(\n \n$scope\n.\nfeatures\n.\ni18nDocumentUrl\n \n);\n\n   \n$http\n.\nget\n(\n \ndocumentUrl\n \n).\nthen\n(\n \nfunction\n(\n \nresponse\n \n)\n \n{\n\n      \n$scope\n.\nmodel\n.\nhtmlVeryLongDocument\n \n=\n \nresponse\n.\ndata\n;\n\n   \n}\n \n);\n\n\n}", 
            "title": "Internationalizing a widget (i18n)"
        }, 
        {
            "location": "/manuals/i18n/#internationalizing-a-widget-i18n", 
            "text": "In LaxarJS, internationalization of widgets is optional.\nRead on if you are interested in writing widgets that support multiple languages, and even switching them without reloading the page.", 
            "title": "Internationalizing a widget (i18n)"
        }, 
        {
            "location": "/manuals/i18n/#concept-of-i18n-in-laxarjs", 
            "text": "LaxarJS distinguishes  locales  and  language tags  for internationalization.\nEach locale has a constant name like \"default\" or \"customer\" and a language tag like \"en_US\", which can change over time.\nThe language tag of a given locale can be modified through activities or widgets when the application is running.\nTo change the language tag of a locale an activity has to publish the  changeLocaleRequest.{locale}  event.  Example: To change the language tag of the locale  myLocale  to  de_DE , the following event has to be published:  $scope . eventBus . publish (   changeLocaleRequest.myLocale. , \n     {  \n         locale :   myLocale ,  \n         languageTag :   de_DE  \n     }  );   If a widget is interested in changes to  myLocale , it would subscribe to the corresponding  didChangeLocale -event, which is published by the LaxarJS flow-controller:  $scope . eventBus . subscribe (   didChangeLocale.myLocale. ,   function (   event   )   { \n    ax . log . info (   I have received tag [0] for locale [1] ,   event . languageTag ,   event . locale   );  }   );   Widgets can use the language tags that they receive over the event bus to  localize  internationalized values.\nInternationalized values are JSON-Objects which contain an entry for each supported language tag.\nBy convention, variables and properties that contain internationalized values are prefixed with  i18n :  i18nHtmlText :   { \n     en_US :   Upload file , \n     de_DE :   Datei hochladen  }   LaxarJS provides some tools which help to deal with i18n.\nThey are based on the events shown above, and demonstrated in the following section.", 
            "title": "Concept of i18n in LaxarJS"
        }, 
        {
            "location": "/manuals/i18n/#writing-an-i18n-capable-widget", 
            "text": "To be able to localize internationalized values in templates, widgets can use the i18n-directives which are provided by Laxar-UiKit.\nThis is accomplished by adding the i18n control to the top-level entry  controls  in the  widget.json .\nIf missing, this entry must be created:  controls :   [ \n     laxar_uikit/controls/i18n  ]   Next, we have to add a feature  i18n .\nIt allows page authors to configure the name of the locale (e.g. \"customer\") to be used by this widget.\nThe actual language tag associated with that locale (for example en_GB) is then used to localize internationalized values.  i18n :   { \n    description :   Which locale to use for displaying this widget. , \n    type :   object , \n    properties :   { \n       locale :   { \n          type :   string , \n          description :   The topic under which to expect the locale for this widget. , \n          default :   default \n       } \n    }  }   If not already done, we import the Laxar-Patterns library into the widget controller ( my_widget.js ).\nThe i18n-handler offered by Laxar-Patterns subscribes the widget to the right  didChangeLocale -events for us, by using the feature configuration that we added in the previous step:  define (   [    \n    laxar_patterns  ],   function (   patterns   )   { \n    patterns . i18n . handlerFor (   $scope   ). scopeLocaleFromFeature (   i18n   ); \n    ...  }   Any updates to the i18n-locale received over the event bus will now be saved under  $scope.i18n , along with their tags.\nMore locales may be registered for other features (if a single widget wants to use more than one language at the same time), resulting ins something like:  $scope.i 18 n   =   {       \n    locale:   default , \n    tags:   { \n       default :   en_US , \n       customer :   de_DE , \n       support :   en_GB \n    }  }   In the HTML template we can now use the angular filter  axLocalize  to convert an i18nHtmlText to a string:  p   data-ng-bind-html = model.i18nHtmlText | axLocalize:i18n / p   The filter expects an object for internationalization or a string if the value is not internationalized.\nIt uses  $scope.i18n.locale  (passed as an argument to the filter) to select the correct language tag.\nEvery property of the object should have a language tag as key and the translated text or html as value.  i18nHtmlText :   { \n     en_US :   Upload file  em now /em , \n     de_DE :   Datei  em jetzt /em  hochladen  }", 
            "title": "Writing an i18n-capable Widget"
        }, 
        {
            "location": "/manuals/i18n/#localizing-values-in-the-controller", 
            "text": "In some cases it is more appropriate to create the localized string inside the controller of the widget.\nThis is the case if the localization has to be retrieved from the server first.  p   data-ng-bind-html = model.htmlVeryLongDocument / p   To achieve this, we obtain a  localize  function when we subscribe the widget to the didChangeLocale event.\nLike the  axLocalize -directive, this function automatically uses the current language tag:  var   localize   =   patterns . i18n . handlerFor (   $scope   ). scopeLocaleFromFeature (   i18n ,   { \n     onChange :   updateLocalization  }   ). localizer ();   Then we can transform any object with language tag properties to a string using the  localize  function:  function   updateLocalization ()   { \n    var   documentUrl   =   localize (   $scope . features . i18nDocumentUrl   ); \n    $http . get (   documentUrl   ). then (   function (   response   )   { \n       $scope . model . htmlVeryLongDocument   =   response . data ; \n    }   );  }", 
            "title": "Localizing values in the controller"
        }, 
        {
            "location": "/manuals/writing_pages/", 
            "text": "return to the manuals\n\n\nPreliminary readings:\n\n\n\n\nCreating Layouts\n\n\nWidgets and Activities\n\n\n\n\nWriting Pages\n\n\nPages are written in a declarative fashion using the JSON format. Starting point is a simple object and some specific properties that will be explained in this document.\n\n\nLayouts and Areas\n\n\nFirst of all a page should specify the layout which defines the available widget areas and how they are arranged visually when rendered by the web browser. If a page is intended to be used as a base page for inheritance (see chapter \nInheritance\n for more information), the layout property should be omitted as for the time being only one page in an extension chain may define a layout.\n\n\nConfiguring the layout is done via the \nlayout\n property of the page object. Its value is the name of the layout which is in turn a relative path to where the specific layout's assets are located (see \nCreating Layouts\n for further information). If for example the desired layout is located at \npopups/layout_one\n, the according page (without any widgets yet) would look like this:\n\n\n{\n   \nlayout\n: \npopups/layout_one\n\n}\n\n\n\n\n\nNow let's assume the html file of \npopups/layout_one\n looks like this:\n\n\ndiv\n\n   \ndiv ax-widget-area=\nheader\n/div\n\n   \ndiv ax-widget-area=\ncontent\n/div\n\n   \ndiv ax-widget-area=\nfooter\n/div\n\n\n/div\n\n\n\n\n\n\nHence there are three areas available, that can be occupied by widgets on the page. To do so, we add another top-level key \nareas\n parallel to\nlayout\n. Its value is a map, where each key is the name of a widget area defined in the layout and the values are arrays, that will later receive the widgets. The order of the areas in the map doesn't matter, as the layout decides where each area will later be displayed. Nevertheless it is advised to keep the order, as it simplifies matters. We thus get the following page file:\n\n\n{\n   \nlayout\n: \npopups/layout_one\n,\n   \nareas\n: {\n      \nheader\n: [],\n      \ncontent\n: [],\n      \nfooter\n: []\n   }\n}\n\n\n\n\n\nThe arrays can now be filled with the widgets to render within each area. In contrast to the area map order is important here, as this is the order in which the widgets will be rendered in the DOM.\n\n\nEach entry in the array is an object that can either reference a widget or a \ncomposition\n. It thus needs to specify either \nwidget\n or \ncomposition\n as key. Additionally a page wide unique (even over inheritance) \nid\n property can be provided. This can be useful for debugging and is mandatory in case a widget provides one or more embedded areas (like e.g. the popover widget). The latter case is explained in detail later in \nTODO\n. Finally it is possible to provide configuration for a widget or a composition under the key \nfeatures\n.\n\n\nOur example with some simple exemplary content:\n\n\n{\n   \nlayout\n: \npopups/layout_one\n,\n   \nareas\n: {\n      \nheader\n: [\n         {\n            \nwidget\n: \nportal/headline_widget\n,\n            \nfeatures\n: {\n               \nheadline\n: {\n                  \nhtmlText\n: \nWelcome!\n,\n                  \nlevel\n: 3\n               }\n            }\n         }\n      ],\n      \ncontent\n: [\n         {\n            \nwidget\n: \nportal/command_bar_widget\n,\n            \nfeatures\n: {\n               \nnext\n: {\n                  \nenabled\n: true\n               }\n            }\n         },\n         {\n            \ncomposition\n: \npopup_composition\n,\n            \nfeatures\n: {\n               \nopenPopup\n: {\n                  \nonActions\n: [ \nnext\n ]\n               }\n            }\n         }\n      ],\n      \nfooter\n: [\n         {\n            \nwidget\n: \nportal/html_display_widget\n,\n            \nfeatures\n: {\n               \ncontent\n: {\n                  \nresource\n: \nfooterTextResource\n\n               }\n            }\n         }\n      ]\n   }\n}\n\n\n\n\n\nInheritance\n\n\nThe most simple way to reuse parts of a page specification is by inheritance. Due to the intentional lack of complex additional inheritance features it is also the most limited way of specification reuse. Nevertheless it has its valid use cases as in every user interface there are some elements that never change across pages. These should be extracted into a base page which defines no layout and than reused by all other pages defining the layout necessary to display their contents.\n\n\nValid candidate widgets for base pages are application headlines, informational notes in a footer area or activities providing common tasks for all pages. Let's apply this to our example from above and extract the HeadlineWidget into a base page called \nbase_page.json\n.\n\n\n{\n   \nareas\n: {\n      \nheader\n: [\n         {\n            \nwidget\n: \nportal/headline_widget\n,\n            \nfeatures\n: {\n               \nheadline\n: {\n                  \nhtmlText\n: \nWelcome!\n,\n                  \nlevel\n: 3\n               }\n            }\n         }\n      ]\n   }\n}\n\n\n\n\n\nWe now can modify our original page using the keyword \nextends\n that references the base page. The parts already provided by the base page can then be deleted:\n\n\n{\n   \nlayout\n: \npopups/layout_one\n,\n   \nextends\n: \nbase_page\n,\n   \nareas\n: {\n      \ncontent\n: [\n         {\n            \nwidget\n: \nportal/command_bar_widget\n,\n            \nfeatures\n: {\n               \nnext\n: {\n                  \nenabled\n: true\n               }\n            }\n         },\n         {\n            \ncomposition\n: \npopup_composition\n,\n            \nfeatures\n: {\n               \nopenPopup\n: {\n                  \nonActions\n: [ \nnext\n ]\n               }\n            }\n         }\n      ],\n      \nfooter\n: [\n         {\n            \nwidget\n: \nportal/html_display_widget\n,\n            \nfeatures\n: {\n               \ncontent\n: {\n                  \nresource\n: \nfooterTextResource\n\n               }\n            }\n         }\n      ]\n   }\n}\n\n\n\n\n\nIt is also possible to add widgets to an area, that is already filled with one or more widgets in the base page. Those widgets in the extending page will be appended to the according area and thus appear after the base widgets in the DOM. If a widget should explicitly be added before another widget, this can be achieved using the keyword \ninsertBeforeId\n. Note that for this to work it's necessary to provide an \nid\n property at the according widget in the base page.\n\n\nLet's assume we wanted to add another additional headline in one extending page. We therefore change the base page first and add an id to the existing headline:\n\n\n{\n   \nareas\n: {\n      \nheader\n: [\n         {\n            \nwidget\n: \nportal/headline_widget\n,\n            \nid\n: \nmainHeadline\n,\n            \nfeatures\n: {\n               \nheadline\n: {\n                  \nhtmlText\n: \nWelcome!\n,\n                  \nlevel\n: 3\n               }\n            }\n         }\n      ]\n   }\n}\n\n\n\n\n\nThe page that has the need to add content thus looks something like this:\n\n\n{\n   \nlayout\n: \npopups/layout_one\n,\n   \nextends\n: \nbase_page\n,\n   \nareas\n: {\n      \nheader\n: [\n         {\n            \nwidget\n: \nportal/headline_widget\n,\n            \ninsertBeforeId\n: \nmainHeadline\n,\n            \nfeatures\n: {\n                \nheadline\n: {\n                   \nhtmlText\n: \nYou just won one billion dollar!\n\n                }\n            }\n         }\n      ],\n      \ncontent\n: [ \n ... some widgets ... \n ],\n      \nfooter\n: [ \n ... some widgets ... \n ]\n   }\n}\n\n\n\n\n\nThat is all inheritance can do for you. Compositions are the way to got for sophisticated reuse of partial specifications. So read on!\n\n\nCompositions\n\n\nIn short compositions are a mixture of page and widget definition: They fill areas with widgets, specify which features are configurable and are used within another page (or composition) like a normal widget.", 
            "title": "Writing Pages"
        }, 
        {
            "location": "/manuals/writing_pages/#writing-pages", 
            "text": "Pages are written in a declarative fashion using the JSON format. Starting point is a simple object and some specific properties that will be explained in this document.", 
            "title": "Writing Pages"
        }, 
        {
            "location": "/manuals/writing_pages/#layouts-and-areas", 
            "text": "First of all a page should specify the layout which defines the available widget areas and how they are arranged visually when rendered by the web browser. If a page is intended to be used as a base page for inheritance (see chapter  Inheritance  for more information), the layout property should be omitted as for the time being only one page in an extension chain may define a layout.  Configuring the layout is done via the  layout  property of the page object. Its value is the name of the layout which is in turn a relative path to where the specific layout's assets are located (see  Creating Layouts  for further information). If for example the desired layout is located at  popups/layout_one , the according page (without any widgets yet) would look like this:  {\n    layout :  popups/layout_one \n}  Now let's assume the html file of  popups/layout_one  looks like this:  div \n    div ax-widget-area= header /div \n    div ax-widget-area= content /div \n    div ax-widget-area= footer /div  /div   Hence there are three areas available, that can be occupied by widgets on the page. To do so, we add another top-level key  areas  parallel to layout . Its value is a map, where each key is the name of a widget area defined in the layout and the values are arrays, that will later receive the widgets. The order of the areas in the map doesn't matter, as the layout decides where each area will later be displayed. Nevertheless it is advised to keep the order, as it simplifies matters. We thus get the following page file:  {\n    layout :  popups/layout_one ,\n    areas : {\n       header : [],\n       content : [],\n       footer : []\n   }\n}  The arrays can now be filled with the widgets to render within each area. In contrast to the area map order is important here, as this is the order in which the widgets will be rendered in the DOM.  Each entry in the array is an object that can either reference a widget or a  composition . It thus needs to specify either  widget  or  composition  as key. Additionally a page wide unique (even over inheritance)  id  property can be provided. This can be useful for debugging and is mandatory in case a widget provides one or more embedded areas (like e.g. the popover widget). The latter case is explained in detail later in  TODO . Finally it is possible to provide configuration for a widget or a composition under the key  features .  Our example with some simple exemplary content:  {\n    layout :  popups/layout_one ,\n    areas : {\n       header : [\n         {\n             widget :  portal/headline_widget ,\n             features : {\n                headline : {\n                   htmlText :  Welcome! ,\n                   level : 3\n               }\n            }\n         }\n      ],\n       content : [\n         {\n             widget :  portal/command_bar_widget ,\n             features : {\n                next : {\n                   enabled : true\n               }\n            }\n         },\n         {\n             composition :  popup_composition ,\n             features : {\n                openPopup : {\n                   onActions : [  next  ]\n               }\n            }\n         }\n      ],\n       footer : [\n         {\n             widget :  portal/html_display_widget ,\n             features : {\n                content : {\n                   resource :  footerTextResource \n               }\n            }\n         }\n      ]\n   }\n}", 
            "title": "Layouts and Areas"
        }
    ]
}