{
    "docs": [
        {
            "location": "/", 
            "text": "LaxarJS Patterns\n\n\nTo allow for widgets to cooperate without tight coupling, it is very useful to share a basic event vocabulary.\nThe LaxarJS Runtime already defines the semantics of \ncore event patterns\n.\nFor application-level events, \nLaxarJS Patterns\n provides an additional vocabulary, which may be grouped into a handful of \npattern families\n.\nBefore starting with the patterns, make sure that you are familiar with the \nLaxarJS Core Concepts\n and the \nLaxarJS events manual\n.\n\n\nFor efficient usage of the available pattern libraries in your widgets, you should consult the \nAPI docs\n as well.\n\n\nFamilies of LaxarJS Patterns\n\n\nMost application-level events have to do with \nresources\n, \nactions\n and \nflags\n.\nThere is a common theme to how these patterns are used:\nWidgets define \nwhat events\n generally concern them, but the page configuration is used to constrain \nwhere\n or \nwhen\n they are interested in these events:\n\n\n* an email viewer is interested in _resource-events_, but only for the _currently selected email_ resource, not for the _mailbox_ resource\n* a navigation activity may be interested in _action-events_, but only in those generated by the _next_ and _previous_ buttons, not in those generated by the _save_ button\n* a widget presenting real-time stock market information is interested in _flag-events_, but only those that tell wether its container popover widget is currently open, so that it may pause updates otherwise\n\n\n\n\n\nResources\n\n\nPossibly the most important family of patterns, \nresource events\n deals with sharing, validating and persisting application \nresources\n.\nHere, \nresource\n usually refers to a \nJSON\n representation of a \nREST\n resource, for example in \nHAL\n format.\nHowever, LaxarJS and the patterns described here do not actually make assumptions about the origin or the internal structure of resources, except that they are directly representable as JSON objects.\nThis means that it is perfectly acceptable to obtain resources through a different mechanism than HTTP (such as \nWebSockets\n or \nlocalStorage\n).\n\n\nThe resource patterns cover events starting with the following topics:\n\n\n* `didReplace` and `didUpdate`\n* `validateRequest`, `willValidate` and `didValidate`\n* `saveRequest`, `willSave` and `didSave`\n\n\n\n\n\nmore on resources \u00bb\n\n\nActions\n\n\nWidgets may publish \nrequests for action\n to indicate that the user has triggered some functionality outside of their own scope.\nDepending on the page configuration, other widgets will respond to these actions in whatever way is appropriate or configured for them.\nWidgets may respond using the \nwill/did\n-mechanism\n, for long running actions.\n\n\nThe actions pattern covers events starting with the following topics:\n\n\n* `takeActionRequest`, `willTakeAction` and `didTakeAction`\n\n\n\n\n\nmore on actions \u00bb\n\n\nFlags\n\n\nFlags\n allow widgets to communicate boolean state.\nFor example, one activity could track validation events from all widgets on a page and publish a flag describing the overall validation state.\nA navigation widget could then enable or disable its \"save\" button according to that state.\n\n\nThe flag pattern covers events starting with the following topics:\n\n\n* `didChangeFlag`\n\n\n\n\n\nmore on flags \u00bb\n\n\nErrors\n\n\nSometimes widgets and especially activities have to indicate an error situation that is not recoverable (such as a network problem).\nThe \nerror events\n can be used to broadcast these problems, and have another component handle them, through means such as logging, displaying a problem message to the user or navigating to an error page.\n\n\nThe error pattern covers events starting with the following topics:\n\n\n* `didEncounterError`\n\n\n\n\n\nmore on errors \u00bb", 
            "title": "README"
        }, 
        {
            "location": "/#laxarjs-patterns", 
            "text": "To allow for widgets to cooperate without tight coupling, it is very useful to share a basic event vocabulary.\nThe LaxarJS Runtime already defines the semantics of  core event patterns .\nFor application-level events,  LaxarJS Patterns  provides an additional vocabulary, which may be grouped into a handful of  pattern families .\nBefore starting with the patterns, make sure that you are familiar with the  LaxarJS Core Concepts  and the  LaxarJS events manual .  For efficient usage of the available pattern libraries in your widgets, you should consult the  API docs  as well.", 
            "title": "LaxarJS Patterns"
        }, 
        {
            "location": "/#families-of-laxarjs-patterns", 
            "text": "Most application-level events have to do with  resources ,  actions  and  flags .\nThere is a common theme to how these patterns are used:\nWidgets define  what events  generally concern them, but the page configuration is used to constrain  where  or  when  they are interested in these events:  * an email viewer is interested in _resource-events_, but only for the _currently selected email_ resource, not for the _mailbox_ resource\n* a navigation activity may be interested in _action-events_, but only in those generated by the _next_ and _previous_ buttons, not in those generated by the _save_ button\n* a widget presenting real-time stock market information is interested in _flag-events_, but only those that tell wether its container popover widget is currently open, so that it may pause updates otherwise", 
            "title": "Families of LaxarJS Patterns"
        }, 
        {
            "location": "/#resources", 
            "text": "Possibly the most important family of patterns,  resource events  deals with sharing, validating and persisting application  resources .\nHere,  resource  usually refers to a  JSON  representation of a  REST  resource, for example in  HAL  format.\nHowever, LaxarJS and the patterns described here do not actually make assumptions about the origin or the internal structure of resources, except that they are directly representable as JSON objects.\nThis means that it is perfectly acceptable to obtain resources through a different mechanism than HTTP (such as  WebSockets  or  localStorage ).  The resource patterns cover events starting with the following topics:  * `didReplace` and `didUpdate`\n* `validateRequest`, `willValidate` and `didValidate`\n* `saveRequest`, `willSave` and `didSave`  more on resources \u00bb", 
            "title": "Resources"
        }, 
        {
            "location": "/#actions", 
            "text": "Widgets may publish  requests for action  to indicate that the user has triggered some functionality outside of their own scope.\nDepending on the page configuration, other widgets will respond to these actions in whatever way is appropriate or configured for them.\nWidgets may respond using the  will/did -mechanism , for long running actions.  The actions pattern covers events starting with the following topics:  * `takeActionRequest`, `willTakeAction` and `didTakeAction`  more on actions \u00bb", 
            "title": "Actions"
        }, 
        {
            "location": "/#flags", 
            "text": "Flags  allow widgets to communicate boolean state.\nFor example, one activity could track validation events from all widgets on a page and publish a flag describing the overall validation state.\nA navigation widget could then enable or disable its \"save\" button according to that state.  The flag pattern covers events starting with the following topics:  * `didChangeFlag`  more on flags \u00bb", 
            "title": "Flags"
        }, 
        {
            "location": "/#errors", 
            "text": "Sometimes widgets and especially activities have to indicate an error situation that is not recoverable (such as a network problem).\nThe  error events  can be used to broadcast these problems, and have another component handle them, through means such as logging, displaying a problem message to the user or navigating to an error page.  The error pattern covers events starting with the following topics:  * `didEncounterError`  more on errors \u00bb", 
            "title": "Errors"
        }, 
        {
            "location": "/CHANGELOG/", 
            "text": "Changelog\n\n\nLast Changes\n\n\nv1.1.0\n\n\n\n\n#46\n: validation: implemented validation handler\n        + NEW FEATURE: see ticket for details\n\n\n\n\nv1.1.0-alpha.2\n\n\n\n\n#53\n: resources: pass \nmeta\n to event callbacks\n\n\n#50\n: patches: added deprecation notice\n\n\n\n\nv1.1.0-alpha.1\n\n\n\n\n#52\n: resources: fixed whenAllWereReplaced with multiple handlers for the same topic\n\n\n\n\nv1.1.0-alpha.0\n\n\n\n\n\n\n#51\n: resources: allow to mark resource configuration as optional\n        + NEW FEATURE: see ticket for details\n\n\n\n\n\n\n#49\n: documentation: clarify argument order for json.createPatch\n\n\n\n\n\n\n#48\n: tests: allow to execute spec-tests using a project RequireJS configuration\n        + NEW FEATURE: see ticket for details\n\n\n\n\n\n\n#47\n: added Travis-CI build integration\n        + NEW FEATURE: see ticket for details\n\n\n\n\n\n\n#45\n: api-doc: update generated api doc\n\n\n\n\n\n\nv1.0.0\n\n\n\n\n#44\n: documentation: fixed some minor issues\n\n\n\n\nv1.0.0-beta.0\n\n\n\n\n#43\n: tests: fixed usage of laxar_testing for laxar-dist\n\n\n#42\n: documentation: provided updated API doc for relevant modules\n\n\n\n\nv1.0.0-alpha.3\n\n\n\n\n#40\n: documentation: small fixes\n\n\n\n\nv1.0.0-alpha.2\n\n\n\n\n#39\n: project: renamed from \nlaxar-patterns\n to \nlaxar-patterns\n\n        + \nBREAKING CHANGE:\n see ticket for details\n\n\n\n\nv1.0.0-alpha.1\n\n\n\n\n#37\n: json: updated fast-json-patch to latest official release.\n\n\n\n\nv1.0.0-alpha.0\n\n\n\n\n#36\n: actions. fixed minification bug due to missing strict DI.\n\n\n\n\n#29\n: resources: set \nresources\n as fixed bucket name.\n        + \nBREAKING CHANGE:\n see ticket for details\n\n\n\n\n\n\n#34\n: actions. removed support for done callback in action handlers.\n        + \nBREAKING CHANGE:\n see ticket for details\n\n\n\n\n\n\n#33\n: actions: added support for event objects in action handlers\n        + NEW FEATURE: see ticket for details\n\n\n\n\n\n\n#25\n: footprint: removed underscore dependency\n\n\n\n\n#27\n: resources: removed handling of didUpdate events with deprecated event payload.\n        + \nBREAKING CHANGE:\n see ticket for details\n\n\n\n\nv0.20.0\n\n\n\n\n#35\n: cleanup: removed dist-task fragments from grunt- and package configuration\n\n\n#31\n: documentation: fixed wrong payload attribute in flags.md\n\n\n#32\n: resources: updatePublisher should ignore empty updates\n        + NEW FEATURE: see ticket for details\n\n\n\n\nv0.19.0\n\n\n\n\n#30\n: resources: allow paths for \nisSame\n comparison\n\n\n#28\n: visibility: use publishAndGatherReplies in request publishers\n\n\n\n\nv0.18.0\n\n\n\n\n#26\n: documentation: overview, resource/action/flag/error patterns\n\n\n#24\n: refactoring: use \nlaxar.string\n rather than \nlaxar.text\n\n\n\n\nv0.17.0\n\n\n\n\n#23\n: actions: added promise support for asynchronous handlers.\n\n\n\n\nv0.16.0\n\n\n\n\n#22\n: actions: implemented action handler and publisher convenience.\n        + NEW FEATURE: see ticket for details\n\n\n\n\nv0.15.0\n\n\n\n\n#21\n: resources: added deliverToSender option to event publishers.\n\n\n#20\n: fixed wrongly global assert in jshintrc.\n\n\n\n\nv0.14.0\n\n\n\n\n#19\n: tests: make sure PhantomJS is installed properly, before running spec tests.\n\n\n#18\n: added support for visibility events\n        + NEW FEATURE: see ticket for details\n\n\n\n\nv0.13.0\n\n\n\n\n#17\n: replace and update publishers now return a promise.\n\n\n#16\n: don't try to load \nwidget.json\n in laxar-patterns specs.\n\n\n#15\n: json: added helpers to work with json pointer (rfc-6901) and json patch (rfc-6902)\n\n\n#14\n: temporarily switched to the LaxarJS fork of json patch.\n\n\n\n\nv0.12.0\n\n\n\n\n\n\n#12\n: added support for JSON patch in didUpdate events.\n        + NEW FEATURE: see ticket for details\n\n\n\n\n\n\n#13\n: Remove some obsolete NPM \ndevDependencies\n.\n\n\n\n\n#11\n: added missing require path mapping for jjv and jjve.\n\n\n\n\nv0.11.0\n\n\n\n\n\n\n#8\n: resources: added method \nwereAllReplaced\n to find out if all registered resources have been replaced\n        + NEW FEATURE: see ticket for details\n\n\n\n\n\n\n#10\n: errors: implemented publisher for the didEncounterError event\n        + NEW FEATURE: see ticket for details\n\n\n\n\n\n\n#7\n: resources: fixed null-pointer when handling \nisOptional\n\n\n\n\n#6\n: i18n: fixed localize to not use fallback for non-i18n values.\n\n\n#9\n: jshintrc: disabled enforcement of dot notation for object property access.\n\n\n#5\n: Fixed jshint violation\n\n\n\n\nv0.10.0\n\n\n\n\n#4\n: Allowed to keep receiving updates from \nwhenAllWereReplaced\n after initial replacement (set watch option to true).\n\n\n#2\n: Gracefully handle optional resources, fixed resource spec tests.\n\n\n#3\n: \npatches.create\n: exclude properties starting with \n$$\n.\n\n\n#1\n: Update Bower from ~1.2.8 to ~1.3.3.", 
            "title": "Changelog"
        }, 
        {
            "location": "/CHANGELOG/#changelog", 
            "text": "", 
            "title": "Changelog"
        }, 
        {
            "location": "/CHANGELOG/#last-changes", 
            "text": "", 
            "title": "Last Changes"
        }, 
        {
            "location": "/CHANGELOG/#v110", 
            "text": "#46 : validation: implemented validation handler\n        + NEW FEATURE: see ticket for details", 
            "title": "v1.1.0"
        }, 
        {
            "location": "/CHANGELOG/#v110-alpha2", 
            "text": "#53 : resources: pass  meta  to event callbacks  #50 : patches: added deprecation notice", 
            "title": "v1.1.0-alpha.2"
        }, 
        {
            "location": "/CHANGELOG/#v110-alpha1", 
            "text": "#52 : resources: fixed whenAllWereReplaced with multiple handlers for the same topic", 
            "title": "v1.1.0-alpha.1"
        }, 
        {
            "location": "/CHANGELOG/#v110-alpha0", 
            "text": "#51 : resources: allow to mark resource configuration as optional\n        + NEW FEATURE: see ticket for details    #49 : documentation: clarify argument order for json.createPatch    #48 : tests: allow to execute spec-tests using a project RequireJS configuration\n        + NEW FEATURE: see ticket for details    #47 : added Travis-CI build integration\n        + NEW FEATURE: see ticket for details    #45 : api-doc: update generated api doc", 
            "title": "v1.1.0-alpha.0"
        }, 
        {
            "location": "/CHANGELOG/#v100", 
            "text": "#44 : documentation: fixed some minor issues", 
            "title": "v1.0.0"
        }, 
        {
            "location": "/CHANGELOG/#v100-beta0", 
            "text": "#43 : tests: fixed usage of laxar_testing for laxar-dist  #42 : documentation: provided updated API doc for relevant modules", 
            "title": "v1.0.0-beta.0"
        }, 
        {
            "location": "/CHANGELOG/#v100-alpha3", 
            "text": "#40 : documentation: small fixes", 
            "title": "v1.0.0-alpha.3"
        }, 
        {
            "location": "/CHANGELOG/#v100-alpha2", 
            "text": "#39 : project: renamed from  laxar-patterns  to  laxar-patterns \n        +  BREAKING CHANGE:  see ticket for details", 
            "title": "v1.0.0-alpha.2"
        }, 
        {
            "location": "/CHANGELOG/#v100-alpha1", 
            "text": "#37 : json: updated fast-json-patch to latest official release.", 
            "title": "v1.0.0-alpha.1"
        }, 
        {
            "location": "/CHANGELOG/#v100-alpha0", 
            "text": "#36 : actions. fixed minification bug due to missing strict DI.   #29 : resources: set  resources  as fixed bucket name.\n        +  BREAKING CHANGE:  see ticket for details    #34 : actions. removed support for done callback in action handlers.\n        +  BREAKING CHANGE:  see ticket for details    #33 : actions: added support for event objects in action handlers\n        + NEW FEATURE: see ticket for details    #25 : footprint: removed underscore dependency   #27 : resources: removed handling of didUpdate events with deprecated event payload.\n        +  BREAKING CHANGE:  see ticket for details", 
            "title": "v1.0.0-alpha.0"
        }, 
        {
            "location": "/CHANGELOG/#v0200", 
            "text": "#35 : cleanup: removed dist-task fragments from grunt- and package configuration  #31 : documentation: fixed wrong payload attribute in flags.md  #32 : resources: updatePublisher should ignore empty updates\n        + NEW FEATURE: see ticket for details", 
            "title": "v0.20.0"
        }, 
        {
            "location": "/CHANGELOG/#v0190", 
            "text": "#30 : resources: allow paths for  isSame  comparison  #28 : visibility: use publishAndGatherReplies in request publishers", 
            "title": "v0.19.0"
        }, 
        {
            "location": "/CHANGELOG/#v0180", 
            "text": "#26 : documentation: overview, resource/action/flag/error patterns  #24 : refactoring: use  laxar.string  rather than  laxar.text", 
            "title": "v0.18.0"
        }, 
        {
            "location": "/CHANGELOG/#v0170", 
            "text": "#23 : actions: added promise support for asynchronous handlers.", 
            "title": "v0.17.0"
        }, 
        {
            "location": "/CHANGELOG/#v0160", 
            "text": "#22 : actions: implemented action handler and publisher convenience.\n        + NEW FEATURE: see ticket for details", 
            "title": "v0.16.0"
        }, 
        {
            "location": "/CHANGELOG/#v0150", 
            "text": "#21 : resources: added deliverToSender option to event publishers.  #20 : fixed wrongly global assert in jshintrc.", 
            "title": "v0.15.0"
        }, 
        {
            "location": "/CHANGELOG/#v0140", 
            "text": "#19 : tests: make sure PhantomJS is installed properly, before running spec tests.  #18 : added support for visibility events\n        + NEW FEATURE: see ticket for details", 
            "title": "v0.14.0"
        }, 
        {
            "location": "/CHANGELOG/#v0130", 
            "text": "#17 : replace and update publishers now return a promise.  #16 : don't try to load  widget.json  in laxar-patterns specs.  #15 : json: added helpers to work with json pointer (rfc-6901) and json patch (rfc-6902)  #14 : temporarily switched to the LaxarJS fork of json patch.", 
            "title": "v0.13.0"
        }, 
        {
            "location": "/CHANGELOG/#v0120", 
            "text": "#12 : added support for JSON patch in didUpdate events.\n        + NEW FEATURE: see ticket for details    #13 : Remove some obsolete NPM  devDependencies .   #11 : added missing require path mapping for jjv and jjve.", 
            "title": "v0.12.0"
        }, 
        {
            "location": "/CHANGELOG/#v0110", 
            "text": "#8 : resources: added method  wereAllReplaced  to find out if all registered resources have been replaced\n        + NEW FEATURE: see ticket for details    #10 : errors: implemented publisher for the didEncounterError event\n        + NEW FEATURE: see ticket for details    #7 : resources: fixed null-pointer when handling  isOptional   #6 : i18n: fixed localize to not use fallback for non-i18n values.  #9 : jshintrc: disabled enforcement of dot notation for object property access.  #5 : Fixed jshint violation", 
            "title": "v0.11.0"
        }, 
        {
            "location": "/CHANGELOG/#v0100", 
            "text": "#4 : Allowed to keep receiving updates from  whenAllWereReplaced  after initial replacement (set watch option to true).  #2 : Gracefully handle optional resources, fixed resource spec tests.  #3 :  patches.create : exclude properties starting with  $$ .  #1 : Update Bower from ~1.2.8 to ~1.3.3.", 
            "title": "v0.10.0"
        }, 
        {
            "location": "/api/actions.js/", 
            "text": "actions\n\n\nThis module provides helpers for patterns regarding \ntakeActionRequest\n, \nwillTakeAction\n and\n\n\ndidTakeAction\n events.\n\n\nContents\n\n\nModule Members\n\n\n\n\npublisherForFeature\n\n\npublisher\n\n\nhandlerFor\n\n\n\n\nTypes\n\n\n\n\nActionHandler\n\n\nActionHandler#registerActionsFromFeature\n\n\nActionHandler#registerActions\n\n\n\n\n\n\n\n\nModule Members\n\n\npublisherForFeature( scope, feature, optionalOptions )\n\n\nCreates and returns a function to publish \ntakeActionRequest\n events for a given action feature. The\naction to publish is expected to be at the key \naction\n under the given feature path.\n\n\nApart from that this function works just like \npublisher\n.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nscope\n\n\nObject\n\n\nthe scope the publisher works on. Needs at least an EventBus instance as \neventBus\n property\n\n\n\n\n\n\nfeature\n\n\nString\n\n\nthe feature to take the action name from\n\n\n\n\n\n\noptionalOptions\n\n\nObject\n\n\noptions for the publisher\n\n\n\n\n\n\noptionalOptions.deliverToSender\n\n\nBoolean\n\n\nthe value is forward to \neventBus.publishAndGatherReplies\n: if \ntrue\n the event will also be delivered to the publisher. Default is \nfalse\n\n\n\n\n\n\noptionalOptions.onSuccess\n\n\nFunction\n\n\na function that is called when the overall outcome yields \"SUCCESS\"\n\n\n\n\n\n\noptionalOptions.onError\n\n\nFunction\n\n\na function that is called when the overall outcome yields \"ERROR\"\n\n\n\n\n\n\noptionalOptions.onComplete\n\n\nFunction\n\n\na function that is called always, independently of the overall outcome\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFunction\n\n\nthe publisher as described above\n\n\n\n\n\n\n\n\npublisher( scope, action, optionalOptions )\n\n\nCreates and returns a function to publish \ntakeActionRequest\n events for a given action. The outcomes of\nall given \ndidTakeAction\n events are interpreted and optional callbacks according to the overall outcome\nare called. Interpretation is simple: If at least one \ndidTakeAction\n event yields the outcome \"ERROR\",\nthe overall outcome is also erroneous. In any other case the overall outcome will be successful.\n\n\nThe promise returned by the publisher is resolved, if the overall outcome is successful and rejected if\nthe outcome is erroneous. All callbacks, be it the \non*\n handlers or the then handlers of the promise,\nwill receive the list of events and meta information of all \ndidTakeAction\n events\n(see \nEventBus#publishAndGatherReplies()\n for details).\n\n\nExample:\n\n\npublisher\n \n=\n \nactions\n.\npublisher\n(\n \nscope\n,\n \nsave\n,\n \n{\n\n   \nonSuccess\n:\n \nfunction\n()\n \n{\n \ncloseApplication\n();\n \n},\n\n   \nonError\n:\n \nfunction\n()\n \n{\n \ndisplayError\n();\n \n}\n\n\n}\n \n);\n\n\n\n$button\n.\non\n(\n \nclick\n,\n \npublisher\n \n);\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nscope\n\n\nObject\n\n\nthe scope the publisher works on. Needs at least an EventBus instance as \neventBus\n property\n\n\n\n\n\n\naction\n\n\nString\n\n\nthe action to publish on call of the publisher\n\n\n\n\n\n\noptionalOptions\n\n\nObject\n\n\noptions for the publisher\n\n\n\n\n\n\noptionalOptions.deliverToSender\n\n\nBoolean\n\n\nthe value is forward to \neventBus.publishAndGatherReplies\n: if \ntrue\n the event will also be delivered to the publisher. Default is \nfalse\n\n\n\n\n\n\noptionalOptions.onSuccess\n\n\nFunction\n\n\na function that is called when the overall outcome yields \"SUCCESS\"\n\n\n\n\n\n\noptionalOptions.onError\n\n\nFunction\n\n\na function that is called when the overall outcome yields \"ERROR\"\n\n\n\n\n\n\noptionalOptions.onComplete\n\n\nFunction\n\n\na function that is called always, independently of the overall outcome\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFunction\n\n\nthe publisher as described above\n\n\n\n\n\n\n\n\nhandlerFor( scope )\n\n\nCreates a new action handler instance for \ntakeActionRequest\n events. It handles sending of an optional\n\nwillTakeAction\n event and the final, possibly later asynchronously following \ndidTakeAction\n event.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nscope\n\n\nObject\n\n\nthe scope the handler should work with. It is expected to find an \neventBus\n property there with which it can do the event handling\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nActionHandler\n\n\nan action handler instance\n\n\n\n\n\n\n\n\nTypes\n\n\nActionHandler\n\n\nActionHandler#registerActionsFromFeature( feature, handler )\n\n\nRegisters a handler for \ntakeActionRequest\n events with actions from a feature. It is assumed that the\ngiven feature has an \nonActions\n property, which is a set of actions to listen to. The set may be empty,\n\nnull\n or \nundefined\n, in which case the handler simply won't be attached to any event.\n\n\nApart from that this function works just like \nActionHandler#registerActions\n.\n\n\nExample:\nConsider the following configuration for a widget:\n\n\n{\n\n   \nfeatures\n:\n \n{\n\n      \nopen\n:\n \n{\n\n         \nonActions\n:\n \n[\n \nopenAction1\n,\n \nopenAction2\n \n]\n\n      \n},\n\n      \nsave\n:\n \n{\n\n         \nonActions\n:\n \n[\n \nsave\n \n]\n\n      \n}\n\n   \n}\n\n\n}\n\n\n\n\n\n\nAn example using that would be:\n\n\nactions\n.\nhandlerFor\n(\n \nscope\n \n)\n\n   \n.\nregisterActionsFromFeature\n(\n \nopen\n,\n \nfunction\n(\n \nevent\n,\n \nmeta\n \n)\n \n{\n\n      \nsomethingSynchronous\n();\n\n      \nreturn\n \nactions\n.\nOUTCOME_SUCCESS\n;\n\n   \n}\n \n)\n\n   \n.\nregisterActionsFromFeature\n(\n \nsave\n,\n \nfunction\n(\n \nevent\n,\n \nmeta\n \n)\n \n{\n\n      \nreturn\n \n$q\n.\nwhen\n(\n \nsomethingAsynchronous\n()\n \n);\n\n   \n}\n \n);\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfeature\n\n\nString\n\n\nthe feature to read the actions to watch from\n\n\n\n\n\n\nhandler\n\n\nFunction\n\n\nthe handler to call whenever a \ntakeActionRequest\n event with matching action is received\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nActionHandler\n\n\nthis instance for chaining\n\n\n\n\n\n\n\n\nActionHandler#registerActions( actions, handler )\n\n\nRegisters a handler for \ntakeActionRequest\n events for a set of actions. The set may be empty, in\nwhich case the handler simply won't be attached to any event.\n\n\nThe handler is assumed to be a function that receives the event and meta object of the underlying\n\ntakeActionRequest\n event when called. In order to send the correct \ndidTakeAction\n event as response,\nthe return value of the handler is interpreted according to the following rules:\n\n\n\n\n\n\nthe handler throws an error\n\n\n\n\nthe \ndidTakeAction\n event is sent with outcome \nERROR\n\n\nthe error is re-thrown\n\n\n\n\n\n\n\n\nthe handler returns a simple value or a promise, that is later resolved with a value\n\n\n\n\nif the value is a plain object, it is used as basis for the event object and\n\n\nif the object has a property \noutcome\n with value \nERROR\n, the \ndidTakeAction\n event is sent with\n  outcome \nERROR\n\n\n\n\n\n\notherwise, or if the value is no plain object, the \ndidTakeAction\n event is sent with outcome\n\nSUCCESS\n\n\n\n\n\n\n\n\nthe handler returns a promise, that is later rejected with a value\n\n\n\n\nif the value is a plain object, it is used as basis for the event object and\n\n\nif the object has a property \noutcome\n with value \nSUCCESS\n, the \ndidTakeAction\n event is sent with\noutcome \nSUCCESS\n\n\n\n\n\n\notherwise, or if the value is no plain object, the \ndidTakeAction\n event is sent with outcome \nERROR\n\n\n\n\n\n\n\n\nSo basically simple return values or resolved promises are assumed to be successful if they don't state\notherwise, while rejected promises are assumed to be erroneous, if they don't state otherwise.\n\n\nExample:\n\n\nactions\n.\nhandlerFor\n(\n \nscope\n \n)\n\n   \n.\nregisterActions\n(\n \n[\n \nopen\n \n],\n \nfunction\n(\n \nevent\n,\n \nmeta\n \n)\n \n{\n\n      \nreturn\n \n42\n\n   \n}\n \n)\n\n   \n.\nregisterActions\n(\n \n[\n \nsave\n \n],\n \nfunction\n(\n \nevent\n,\n \nmeta\n \n)\n \n{\n\n      \nreturn\n \n$q\n.\nwhen\n(\n \n{\n \nresultValue\n:\n \n42\n \n}\n \n);\n\n   \n}\n \n);\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nactions\n\n\nArray.\nString\n\n\na set of actions to watch\n\n\n\n\n\n\nhandler\n\n\nFunction\n\n\nthe handler to call whenever a \ntakeActionRequest\n event with matching action is received\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nActionHandler\n\n\nthis instance for chaining", 
            "title": "actions"
        }, 
        {
            "location": "/api/actions.js/#actions", 
            "text": "This module provides helpers for patterns regarding  takeActionRequest ,  willTakeAction  and  didTakeAction  events.", 
            "title": "actions"
        }, 
        {
            "location": "/api/actions.js/#contents", 
            "text": "Module Members   publisherForFeature  publisher  handlerFor   Types   ActionHandler  ActionHandler#registerActionsFromFeature  ActionHandler#registerActions", 
            "title": "Contents"
        }, 
        {
            "location": "/api/actions.js/#module-members", 
            "text": "", 
            "title": "Module Members"
        }, 
        {
            "location": "/api/actions.js/#parameters", 
            "text": "Property  Type  Description      scope  Object  the scope the publisher works on. Needs at least an EventBus instance as  eventBus  property    feature  String  the feature to take the action name from    optionalOptions  Object  options for the publisher    optionalOptions.deliverToSender  Boolean  the value is forward to  eventBus.publishAndGatherReplies : if  true  the event will also be delivered to the publisher. Default is  false    optionalOptions.onSuccess  Function  a function that is called when the overall outcome yields \"SUCCESS\"    optionalOptions.onError  Function  a function that is called when the overall outcome yields \"ERROR\"    optionalOptions.onComplete  Function  a function that is called always, independently of the overall outcome", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/actions.js/#returns", 
            "text": "Type  Description      Function  the publisher as described above", 
            "title": "Returns"
        }, 
        {
            "location": "/api/actions.js/#parameters_1", 
            "text": "Property  Type  Description      scope  Object  the scope the publisher works on. Needs at least an EventBus instance as  eventBus  property    action  String  the action to publish on call of the publisher    optionalOptions  Object  options for the publisher    optionalOptions.deliverToSender  Boolean  the value is forward to  eventBus.publishAndGatherReplies : if  true  the event will also be delivered to the publisher. Default is  false    optionalOptions.onSuccess  Function  a function that is called when the overall outcome yields \"SUCCESS\"    optionalOptions.onError  Function  a function that is called when the overall outcome yields \"ERROR\"    optionalOptions.onComplete  Function  a function that is called always, independently of the overall outcome", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/actions.js/#returns_1", 
            "text": "Type  Description      Function  the publisher as described above", 
            "title": "Returns"
        }, 
        {
            "location": "/api/actions.js/#parameters_2", 
            "text": "Property  Type  Description      scope  Object  the scope the handler should work with. It is expected to find an  eventBus  property there with which it can do the event handling", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/actions.js/#returns_2", 
            "text": "Type  Description      ActionHandler  an action handler instance", 
            "title": "Returns"
        }, 
        {
            "location": "/api/actions.js/#types", 
            "text": "", 
            "title": "Types"
        }, 
        {
            "location": "/api/actions.js/#parameters_3", 
            "text": "Property  Type  Description      feature  String  the feature to read the actions to watch from    handler  Function  the handler to call whenever a  takeActionRequest  event with matching action is received", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/actions.js/#returns_3", 
            "text": "Type  Description      ActionHandler  this instance for chaining", 
            "title": "Returns"
        }, 
        {
            "location": "/api/actions.js/#parameters_4", 
            "text": "Property  Type  Description      actions  Array. String  a set of actions to watch    handler  Function  the handler to call whenever a  takeActionRequest  event with matching action is received", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/actions.js/#returns_4", 
            "text": "Type  Description      ActionHandler  this instance for chaining", 
            "title": "Returns"
        }, 
        {
            "location": "/api/errors.js/", 
            "text": "errors\n\n\nThis module provides helpers for patterns regarding \ndidEncounterError\n events.\n\n\nContents\n\n\nModule Members\n\n\n\n\nerrorPublisherForFeature\n\n\n\n\nModule Members\n\n\nerrorPublisherForFeature( scope, featurePath, options )\n\n\nCreates and returns a function to publish didEncounterError events related to a specific feature.\nGenerated events will not be delivered to the sender.\n\n\nThe returned publisher function takes these arguments:\n\n\n\n\ncode\n: a generic code that identifies the failing operation (such as 'HTTP_PUT', 'HTTP_GET')\n\n\nmessagePath\n: to lookup a human-readable message under this publisher's feature configuration\n\n\ndata\n: additional information to be used for substituting in the message, It should contain the\n  fields \nresource\n and \nlocation\n if applicable.\n\n\ncause\n: more diagnostic information on the error's cause, such as the underlying HTTP status code\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nscope\n\n\nObject\n\n\nthe scope the publisher works on\n\n\n\n\n\n\nfeaturePath\n\n\nString\n\n\nthe configuration path for (i18n) error-messages to publish\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nan optional object with additional configuration\n\n\n\n\n\n\noptions.localizer\n\n\nFunction\n\n\na function such as \ni18nHandler.localize\n to prepare messages\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFunction\n\n\na publisher function with four arguments as described above", 
            "title": "errors"
        }, 
        {
            "location": "/api/errors.js/#errors", 
            "text": "This module provides helpers for patterns regarding  didEncounterError  events.", 
            "title": "errors"
        }, 
        {
            "location": "/api/errors.js/#contents", 
            "text": "Module Members   errorPublisherForFeature", 
            "title": "Contents"
        }, 
        {
            "location": "/api/errors.js/#module-members", 
            "text": "", 
            "title": "Module Members"
        }, 
        {
            "location": "/api/errors.js/#parameters", 
            "text": "Property  Type  Description      scope  Object  the scope the publisher works on    featurePath  String  the configuration path for (i18n) error-messages to publish    options  Object  an optional object with additional configuration    options.localizer  Function  a function such as  i18nHandler.localize  to prepare messages", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/errors.js/#returns", 
            "text": "Type  Description      Function  a publisher function with four arguments as described above", 
            "title": "Returns"
        }, 
        {
            "location": "/api/flags.js/", 
            "text": "flags\n\n\nThis module provides helpers for patterns regarding \ndidChangeFlag\n events.\n\n\nContents\n\n\nModule Members\n\n\n\n\nhandlerFor\n\n\n\n\nTypes\n\n\n\n\nFlagHandler\n\n\nFlagHandler#registerFlagFromFeature\n\n\nFlagHandler#registerFlag\n\n\n\n\n\n\n\n\nModule Members\n\n\nhandlerFor( scope )\n\n\nCreates a new handler instance for didChangeFlag events, on which one can attach a listener for\naccumulated flag changes. Assume for example a feature like \ndisableOn\n, which defines a set of flags,\nwhere a \ntrue\n state of any of the flags disables the widget. The developer shouldn't care about single\nflag states but should only be notified, if a change of one flag leads to a change of the accumulated\n\"any flag should be true\" state.\n\n\nAdditionally it is possible to let the handler set the current state of the accumulated flag on a given\nscope property.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nscope\n\n\nObject\n\n\nthe scope the handler should work with. It is expected to find an \neventBus\n property there with which it can do the event handling\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFlagHandler\n\n\na flag handler instance\n\n\n\n\n\n\n\n\nTypes\n\n\nFlagHandler\n\n\nFlagHandler#registerFlagFromFeature( featurePath, optionalOptions )\n\n\nRegisters a flag or a set of flags from the given feature. In contrast to the \nResourceHandler\n here\nthe complete attribute path to the flag(s) must be provided. This is due to the fact that there is no\nconvention on names for flags on a feature, as there can coexist multiple flags for one feature, each\ninfluencing a different aspect of this feature.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfeaturePath\n\n\nString\n\n\nthe attribute path to the configured flag(s) within the feature map\n\n\n\n\n\n\noptionalOptions\n\n\nObject\n\n\noptions and callbacks to use\n\n\n\n\n\n\noptionalOptions.initialState\n\n\nBoolean\n\n\nthe optional initial state of the accumulated state. If not given each non-inverted flag is initially assumed to be \nfalse\n and \ntrue\n, if it is inverted\n\n\n\n\n\n\noptionalOptions.onChange\n\n\nFunction\n, \nArray.\nFunction\n\n\na function or a list of functions to call whenever the accumulated state of the flags changes. It receives the new state as first argument and its previous state as second argument\n\n\n\n\n\n\noptionalOptions.scopeKey\n\n\nString\n\n\nthe key to set the current accumulated state on in the scope. If not given, nothing happens. For example \nflags.myFlag\n would set \nscope.flags.myFlag\n to the currently valid accumulated state\n\n\n\n\n\n\noptionalOptions.predicate\n\n\nString\n\n\none of these:\n- \nany\n: if any of the flag's states is \ntrue\n, the accumulated state is \ntrue\n. This is the default\n- \nall\n: if all of the flag's states are \ntrue\n, the accumulated state is \ntrue\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFlagHandler\n\n\nthis instance for chaining\n\n\n\n\n\n\n\n\nFlagHandler#registerFlag( possibleFlags, optionalOptions )\n\n\nRegisters a flag or a set of flags given as argument. Even \nundefined\n, \nnull\n or an empty array\nare handled gracefully and treated as an empty set of flags, thus never changing their states.\n\n\nThe new accumulated state is set on \nscope.flags\n if that is defined. Otherwise it is set on\n\nscope.model\n.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npossibleFlags\n\n\nString\n, \nArray.\nString\n\n\none or a list of flags to watch\n\n\n\n\n\n\noptionalOptions\n\n\nObject\n\n\noptions and callbacks to use\n\n\n\n\n\n\noptionalOptions.initialState\n\n\nBoolean\n\n\nthe optional initial state of the accumulated state. If not given each non-inverted flag is initially assumed to be \nfalse\n and \ntrue\n, if it is inverted\n\n\n\n\n\n\noptionalOptions.onChange\n\n\nFunction\n, \nArray.\nFunction\n\n\na function or a list of functions to call whenever the accumuated state of the flags changes. It receives the new state as first argument and its previous state as second argument\n\n\n\n\n\n\noptionalOptions.scopeKey\n\n\nString\n\n\nthe key to set the current accumulated state on in the scope. If not given, nothing happens. For example \nflags.myFlag\n would set \nscope.flags.myFlag\n to the currently valid accumulated state\n\n\n\n\n\n\noptionalOptions.predicate\n\n\nString\n\n\none of these:\n- \nany\n: if any of the flag's sates is \ntrue\n, the accumulated state is \ntrue\n. This is the default\n- \nall\n: if all of the flag's states are \ntrue\n, the accumulated state is \ntrue\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFlagHandler\n\n\nthis instance for chaining", 
            "title": "flags"
        }, 
        {
            "location": "/api/flags.js/#flags", 
            "text": "This module provides helpers for patterns regarding  didChangeFlag  events.", 
            "title": "flags"
        }, 
        {
            "location": "/api/flags.js/#contents", 
            "text": "Module Members   handlerFor   Types   FlagHandler  FlagHandler#registerFlagFromFeature  FlagHandler#registerFlag", 
            "title": "Contents"
        }, 
        {
            "location": "/api/flags.js/#module-members", 
            "text": "", 
            "title": "Module Members"
        }, 
        {
            "location": "/api/flags.js/#parameters", 
            "text": "Property  Type  Description      scope  Object  the scope the handler should work with. It is expected to find an  eventBus  property there with which it can do the event handling", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/flags.js/#returns", 
            "text": "Type  Description      FlagHandler  a flag handler instance", 
            "title": "Returns"
        }, 
        {
            "location": "/api/flags.js/#types", 
            "text": "", 
            "title": "Types"
        }, 
        {
            "location": "/api/flags.js/#parameters_1", 
            "text": "Property  Type  Description      featurePath  String  the attribute path to the configured flag(s) within the feature map    optionalOptions  Object  options and callbacks to use    optionalOptions.initialState  Boolean  the optional initial state of the accumulated state. If not given each non-inverted flag is initially assumed to be  false  and  true , if it is inverted    optionalOptions.onChange  Function ,  Array. Function  a function or a list of functions to call whenever the accumulated state of the flags changes. It receives the new state as first argument and its previous state as second argument    optionalOptions.scopeKey  String  the key to set the current accumulated state on in the scope. If not given, nothing happens. For example  flags.myFlag  would set  scope.flags.myFlag  to the currently valid accumulated state    optionalOptions.predicate  String  one of these: -  any : if any of the flag's states is  true , the accumulated state is  true . This is the default -  all : if all of the flag's states are  true , the accumulated state is  true", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/flags.js/#returns_1", 
            "text": "Type  Description      FlagHandler  this instance for chaining", 
            "title": "Returns"
        }, 
        {
            "location": "/api/flags.js/#parameters_2", 
            "text": "Property  Type  Description      possibleFlags  String ,  Array. String  one or a list of flags to watch    optionalOptions  Object  options and callbacks to use    optionalOptions.initialState  Boolean  the optional initial state of the accumulated state. If not given each non-inverted flag is initially assumed to be  false  and  true , if it is inverted    optionalOptions.onChange  Function ,  Array. Function  a function or a list of functions to call whenever the accumuated state of the flags changes. It receives the new state as first argument and its previous state as second argument    optionalOptions.scopeKey  String  the key to set the current accumulated state on in the scope. If not given, nothing happens. For example  flags.myFlag  would set  scope.flags.myFlag  to the currently valid accumulated state    optionalOptions.predicate  String  one of these: -  any : if any of the flag's sates is  true , the accumulated state is  true . This is the default -  all : if all of the flag's states are  true , the accumulated state is  true", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/flags.js/#returns_2", 
            "text": "Type  Description      FlagHandler  this instance for chaining", 
            "title": "Returns"
        }, 
        {
            "location": "/api/i18n.js/", 
            "text": "i18n\n\n\nThis module provides helpers for patterns regarding \ndidChangeLocale\n events.\n\n\nContents\n\n\nModule Members\n\n\n\n\nhandlerFor\n\n\n\n\nTypes\n\n\n\n\nI18nHandler\n\n\nI18nHandler#registerLocale\n\n\nI18nHandler#registerLocaleFromFeature\n\n\n\n\n\n\n\n\nModule Members\n\n\nhandlerFor( scope, optionalI18nPath )\n\n\nObtain a handler which applies didChangeLocale-events to the given scope.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nscope\n\n\nObject\n\n\nthe scope instance for which i18n-state should be managed\n\n\n\n\n\n\noptionalI18nPath\n\n\nString\n\n\nan optional path within the scope (default: \n'i18n'\n) where to store i18n-state\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nI18nHandler\n\n\na handler which manages the i18n-object on the scope, and which allows to register for locale changes, by topic or by feature\n\n\n\n\n\n\n\n\nTypes\n\n\nI18nHandler\n\n\nI18nHandler#registerLocale( possibleLocales, optionalOptions )\n\n\nManage changes to the given locale(s).\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npossibleLocales\n\n\nString\n, \nArray.\nString\n\n\nzero, one or more locale topics to manage\n\n\n\n\n\n\noptionalOptions\n\n\nObject\n\n\nan optional configuration object\n\n\n\n\n\n\noptionalOptions.onChange\n\n\nFunction\n, \nArray.\nFunction\n\n\na function or a list of functions to call whenever one of the locales changes It receives the event which triggered the change as the first argument, and the previous language-tag as the second argument\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nObject\n\n\nthis instance for chaining\n\n\n\n\n\n\n\n\nI18nHandler#registerLocaleFromFeature( featurePath, optionalOptions )\n\n\nLook for the given feature path within the feature configuration and register for changes to the\ncorresponding locale. If there is a key 'locale' at the given feature, that entry is used.\nOtherwise, the entire configuration path has to be specified.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfeaturePath\n\n\nString\n\n\nA feature path for the current scope.\n\n\n\n\n\n\noptionalOptions\n\n\nObject\n\n\nAn optional configuration object.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nObject\n\n\nthis instance for chaining", 
            "title": "i18n"
        }, 
        {
            "location": "/api/i18n.js/#i18n", 
            "text": "This module provides helpers for patterns regarding  didChangeLocale  events.", 
            "title": "i18n"
        }, 
        {
            "location": "/api/i18n.js/#contents", 
            "text": "Module Members   handlerFor   Types   I18nHandler  I18nHandler#registerLocale  I18nHandler#registerLocaleFromFeature", 
            "title": "Contents"
        }, 
        {
            "location": "/api/i18n.js/#module-members", 
            "text": "", 
            "title": "Module Members"
        }, 
        {
            "location": "/api/i18n.js/#parameters", 
            "text": "Property  Type  Description      scope  Object  the scope instance for which i18n-state should be managed    optionalI18nPath  String  an optional path within the scope (default:  'i18n' ) where to store i18n-state", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/i18n.js/#returns", 
            "text": "Type  Description      I18nHandler  a handler which manages the i18n-object on the scope, and which allows to register for locale changes, by topic or by feature", 
            "title": "Returns"
        }, 
        {
            "location": "/api/i18n.js/#types", 
            "text": "", 
            "title": "Types"
        }, 
        {
            "location": "/api/i18n.js/#parameters_1", 
            "text": "Property  Type  Description      possibleLocales  String ,  Array. String  zero, one or more locale topics to manage    optionalOptions  Object  an optional configuration object    optionalOptions.onChange  Function ,  Array. Function  a function or a list of functions to call whenever one of the locales changes It receives the event which triggered the change as the first argument, and the previous language-tag as the second argument", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/i18n.js/#returns_1", 
            "text": "Type  Description      Object  this instance for chaining", 
            "title": "Returns"
        }, 
        {
            "location": "/api/i18n.js/#parameters_2", 
            "text": "Property  Type  Description      featurePath  String  A feature path for the current scope.    optionalOptions  Object  An optional configuration object.", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/i18n.js/#returns_2", 
            "text": "Type  Description      Object  this instance for chaining", 
            "title": "Returns"
        }, 
        {
            "location": "/api/json.js/", 
            "text": "json\n\n\nThis module provides helpers for dealing with patches for JSON structures, specifically regarding\n\nRFC 6901\n and \nRFC 6902\n.\n\n\nContents\n\n\nModule Members\n\n\n\n\ngetPointer\n\n\nsetPointer\n\n\npointerToPath\n\n\npathToPointer\n\n\napplyPatch\n\n\ncreatePatch\n\n\n\n\nModule Members\n\n\ngetPointer( object, pointer, fallback )\n\n\nLookup a nested object using an rfc-6901 JSON pointer.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nobject\n\n\nObject\n, \nArray\n\n\nthe object in which to lookup an entry\n\n\n\n\n\n\npointer\n\n\nString\n\n\na valid JSON pointer conforming to rfc-6901\n\n\n\n\n\n\nfallback\n\n\n*\n\n\na value to return if the JSON pointer does not point to any value within the object\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*\n\n\nthe value found at the JSON pointer, or the fallback value\n\n\n\n\n\n\n\n\nsetPointer( object, pointer, value )\n\n\nSet a nested item within a structure using an rfc-6901 JSON pointer. Missing containers along the path\nwill be created (using ax.object.path). The object is modified in-place.\n\n\nJSON pointer segments of the type '/-' (for appending to an array) are not supported. You can use a\nsingle JSON patch 'add' operation to achieve the desired effect.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nobject\n\n\nObject\n, \nArray\n\n\nthe object in which to lookup an entry\n\n\n\n\n\n\npointer\n\n\nString\n\n\na valid JSON pointer conforming to rfc-6901\n\n\n\n\n\n\nvalue\n\n\n*\n\n\nthe value to set at the place indicated by the pointer\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nObject\n, \nArray\n\n\nthe modified object (for chaining)\n\n\n\n\n\n\n\n\npointerToPath( pointer )\n\n\nTransform an rfc-6901 JSON pointer into a laxar object path.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npointer\n\n\nString\n\n\na valid JSON pointer conforming to rfc-6901\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nString\n\n\na path that can be used with ax.object.path\n\n\n\n\n\n\n\n\npathToPointer( path )\n\n\nTransform a laxar object path into an rfc-6901 JSON pointer.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nString\n\n\na LaxarJS object path where segments are separated using '.'\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nString\n\n\na valid JSON pointer conforming to rfc-6901\n\n\n\n\n\n\n\n\napplyPatch( object, patches )\n\n\nCalls fast-json-patch to apply the given rfc-6902 JSON patch sequence in-place. If the patch sequence\nfails to apply, the behavior is undefined.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nobject\n\n\nObject\n, \nArray\n\n\nthe object to patch (in-place)\n\n\n\n\n\n\npatches\n\n\nArray\n\n\na sequence of patches as defined by rfc-6902\n\n\n\n\n\n\n\n\ncreatePatch( fromState, toState )\n\n\nCalls fast-json-patch to create a rfc-6902 conform JSON patch sequence.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfromState\n\n\nObject\n, \nArray\n\n\nthe state on which to base the list of patches\n\n\n\n\n\n\ntoState\n\n\nObject\n, \nArray\n\n\nthe target state: the desired result of applying the newly created patches to the \nfromState\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nArray\n\n\na sequence of patches as defined by rfc-6902", 
            "title": "json"
        }, 
        {
            "location": "/api/json.js/#json", 
            "text": "This module provides helpers for dealing with patches for JSON structures, specifically regarding RFC 6901  and  RFC 6902 .", 
            "title": "json"
        }, 
        {
            "location": "/api/json.js/#contents", 
            "text": "Module Members   getPointer  setPointer  pointerToPath  pathToPointer  applyPatch  createPatch", 
            "title": "Contents"
        }, 
        {
            "location": "/api/json.js/#module-members", 
            "text": "", 
            "title": "Module Members"
        }, 
        {
            "location": "/api/json.js/#parameters", 
            "text": "Property  Type  Description      object  Object ,  Array  the object in which to lookup an entry    pointer  String  a valid JSON pointer conforming to rfc-6901    fallback  *  a value to return if the JSON pointer does not point to any value within the object", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/json.js/#returns", 
            "text": "Type  Description      *  the value found at the JSON pointer, or the fallback value", 
            "title": "Returns"
        }, 
        {
            "location": "/api/json.js/#parameters_1", 
            "text": "Property  Type  Description      object  Object ,  Array  the object in which to lookup an entry    pointer  String  a valid JSON pointer conforming to rfc-6901    value  *  the value to set at the place indicated by the pointer", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/json.js/#returns_1", 
            "text": "Type  Description      Object ,  Array  the modified object (for chaining)", 
            "title": "Returns"
        }, 
        {
            "location": "/api/json.js/#parameters_2", 
            "text": "Property  Type  Description      pointer  String  a valid JSON pointer conforming to rfc-6901", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/json.js/#returns_2", 
            "text": "Type  Description      String  a path that can be used with ax.object.path", 
            "title": "Returns"
        }, 
        {
            "location": "/api/json.js/#parameters_3", 
            "text": "Property  Type  Description      path  String  a LaxarJS object path where segments are separated using '.'", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/json.js/#returns_3", 
            "text": "Type  Description      String  a valid JSON pointer conforming to rfc-6901", 
            "title": "Returns"
        }, 
        {
            "location": "/api/json.js/#parameters_4", 
            "text": "Property  Type  Description      object  Object ,  Array  the object to patch (in-place)    patches  Array  a sequence of patches as defined by rfc-6902", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/json.js/#parameters_5", 
            "text": "Property  Type  Description      fromState  Object ,  Array  the state on which to base the list of patches    toState  Object ,  Array  the target state: the desired result of applying the newly created patches to the  fromState", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/json.js/#returns_4", 
            "text": "Type  Description      Array  a sequence of patches as defined by rfc-6902", 
            "title": "Returns"
        }, 
        {
            "location": "/api/patches.js/", 
            "text": "patches\n\n\nModule for old-style LaxarJS patches used with the didUpdate event.\n\n\nContents\n\n\nModule Members\n\n\n\n\napply\n\n\ncreate\n\n\nmerge\n\n\n\n\nModule Members\n\n\napply( obj, patchMap )\n\n\nApplies all patches given as mapping from object path to new value. If a path fragment doesn't exist\nit is automatically inserted, using an array if the next key would be an integer. If a value is\nappended to an array all values in between are set to \nnull\n.\n\n\nThis patch format cannot express all operations. Use \njson.applyPatch\n instead.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nobj\n\n\nObject\n\n\nthe object to apply the patches on\n\n\n\n\n\n\npatchMap\n\n\nObject\n\n\nthe mapping of paths to new values\n\n\n\n\n\n\n\n\ncreate( result, base )\n\n\nCreates a map of patches that describe the difference between to objects or arrays. Each entry is a\npath mapped to the changed value. This map can be applied to another object using \napplyPatches\n.\n\n\nProperties that start with '$$' are ignored when creating patches, so that for example the $$hashCode\nadded by AngularJS ngRepeat is ignored.\n\n\nThis patch format cannot express all operations. Use \njson.createPatch\n instead.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nresult\n\n\nObject\n\n\nthe resulting object the patch map should establish\n\n\n\n\n\n\nbase\n\n\nObject\n\n\nthe object used to base the patches upon\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nObject\n\n\nthe mapping of path to patch-value\n\n\n\n\n\n\n\n\nmerge( first, second )\n\n\nMerges two patch maps and returns the result. When properties exist in both patch maps, properties\nwithin the second map overwrite those found within the first one.\n\n\nThis patch format cannot express all operations.\nConcatenate \njson.createPatch\n sequences instead of using this method.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfirst\n\n\nObject\n\n\nfirst map to merge\n\n\n\n\n\n\nsecond\n\n\nObject\n\n\nsecond map to merge\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nObject\n\n\nthe result of the merging", 
            "title": "patches"
        }, 
        {
            "location": "/api/patches.js/#patches", 
            "text": "Module for old-style LaxarJS patches used with the didUpdate event.", 
            "title": "patches"
        }, 
        {
            "location": "/api/patches.js/#contents", 
            "text": "Module Members   apply  create  merge", 
            "title": "Contents"
        }, 
        {
            "location": "/api/patches.js/#module-members", 
            "text": "", 
            "title": "Module Members"
        }, 
        {
            "location": "/api/patches.js/#parameters", 
            "text": "Property  Type  Description      obj  Object  the object to apply the patches on    patchMap  Object  the mapping of paths to new values", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/patches.js/#parameters_1", 
            "text": "Property  Type  Description      result  Object  the resulting object the patch map should establish    base  Object  the object used to base the patches upon", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/patches.js/#returns", 
            "text": "Type  Description      Object  the mapping of path to patch-value", 
            "title": "Returns"
        }, 
        {
            "location": "/api/patches.js/#parameters_2", 
            "text": "Property  Type  Description      first  Object  first map to merge    second  Object  second map to merge", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/patches.js/#returns_1", 
            "text": "Type  Description      Object  the result of the merging", 
            "title": "Returns"
        }, 
        {
            "location": "/api/resources.js/", 
            "text": "resources\n\n\nThis module provides helpers for patterns regarding \ndidReplace\n and \ndidUpdate\n events.\n\n\nDefinition of the \ncontext\n object mentioned throughout this api:\n\n\nIn the simplest case this can be the AngularJS \n$scope\n passed into a widget. Technically this can be\nany object exposing these three properties:\n\n\n\n\neventBus\n: The event bus instance used for event subscriptions and publishing events\n\n\nfeatures\n: The configuration of the widget, used for automagical resource handling\n\n\nresources\n: An object where all registered resources and updates to them are written to. Will be\n  added if it doesn't exist.\n\n\n\n\nContents\n\n\nModule Members\n\n\n\n\nreplaceHandler\n\n\nupdateHandler\n\n\nreplacePublisherForFeature\n\n\nupdatePublisherForFeature\n\n\nhandlerFor\n\n\nisSame\n\n\n\n\nTypes\n\n\n\n\nResourceHandler\n\n\nResourceHandler#registerResourceFromFeature\n\n\nResourceHandler#registerResource\n\n\nResourceHandler#whenAllWereReplaced\n\n\nResourceHandler#wereAllReplaced\n\n\n\n\n\n\n\n\nModule Members\n\n\nreplaceHandler( context, modelKey )\n\n\nCreates and returns a simple handler function for didReplace events. Replaces will be written to\n\ncontext.resources\n under the given value for \nmodelKey\n.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontext\n\n\nObject\n\n\nthe context the handler works on\n\n\n\n\n\n\nmodelKey\n\n\nString\n\n\nthe property of \ncontext,resources\n the handler writes replaces to\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFunction\n\n\nthe handler function\n\n\n\n\n\n\n\n\nupdateHandler( context, modelKey )\n\n\nCreates and returns a simple handler function for didUpdate events. Updates will be written to\n\ncontext.resources\n under the given value for \nmodelKey\n.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontext\n\n\nObject\n\n\nthe context the handler works on\n\n\n\n\n\n\nmodelKey\n\n\nString\n\n\nthe property of \ncontext.resources\n the handler applies updates to\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFunction\n\n\nthe handler function\n\n\n\n\n\n\n\n\nreplacePublisherForFeature( context, featurePath, optionalOptions )\n\n\nCreates and returns a function to publish didReplace events for the resource found as feature\nconfiguration. Resolution of the \nfeaturePath\n argument works just as explained in the documentation for\n\nResourceHandler#registerResourceFromFeature\n. The publisher returns the promise returned by\nthe underlying event bus call.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontext\n\n\nObject\n\n\nthe context the publisher works on\n\n\n\n\n\n\nfeaturePath\n\n\nString\n\n\nthe property of \ncontext.features\n the publisher reads the resource name from\n\n\n\n\n\n\noptionalOptions\n\n\nObject\n\n\noptions for the publisher\n\n\n\n\n\n\noptionalOptions.deliverToSender\n\n\nBoolean\n\n\nthe value is forwarded to \neventBus.publish\n: if \ntrue\n the event will also be delivered to the publisher. Default is \nfalse\n\n\n\n\n\n\noptionalOptions.isOptional\n\n\nBoolean\n\n\nif \ntrue\n, don't throw an error if \nfeaturePath.resource\n is missing. Instead return a publisher that doesn't do anything when called. Default is \nfalse\n.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFunction\n\n\nthe publisher function. Takes the data to publish as single argument\n\n\n\n\n\n\n\n\nupdatePublisherForFeature( context, featurePath, optionalOptions )\n\n\nCreates and returns a function to publish didUpdate events for the resource found as feature\nconfiguration. Resolution of the \nfeaturePath\n argument works just as explained in the documentation for\n\nResourceHandler#registerResourceFromFeature\n. The publisher returns the promise returned by\nthe underlying event bus call. The returned function only accepts one argument, which is the JSON patch\nsequence conforming to \nRFC 6902\n.\n\n\nExample:\n\n\nvar\n \npublisher\n \n=\n \nresources\n.\nupdatePublisherForFeature\n(\n \ncontext\n,\n \npath\n \n);\n\n\npublisher\n(\n \n[\n\n   \n{\n \nop\n:\n \nremove\n,\n \npath\n:\n \n/accounts/2\n \n},\n\n   \n{\n \nop\n:\n \nreplace\n,\n \npath\n:\n \n/contacts/hans/number\n,\n \nvalue\n:\n \n+49 123 4563432\n \n}\n\n\n]\n \n);\n\n\n\n\n\n\nAdditionally the returned function has a method \ncompareAndPublish\n that accepts the previous version of\na resource as first argument and the current version of the resource as second argument. It then creates\nthe JSON patch sequence itself and sends the according didUpdate event. It also returns the promise\nreturned by the underlying event bus call.\n\n\nExample:\n\n\nvar\n \npublisher\n \n=\n \nresources\n.\nupdatePublisherForFeature\n(\n \ncontext\n,\n \npath\n \n);\n\n\npublisher\n.\ncompareAndPublish\n(\n \nobsoleteVersion\n,\n \ncurrentVersion\n \n);\n\n\n\n\n\n\nNote that a generic generation of patches might lead to strange, large patch sequences, especially when\nremoving entries. The diff library doesn't know about identities and as such won't recognize where a\nspecific element was removed. As a consequence instead of generating a remove operation, this could\nresult in a very large number of replace operations that shift the properties from successors to the\nfront in order to overwrite instead of remove the entry.\nIn such cases one is better off by manually creating a patch with operation remove, as the knowledge\nabout the domain is available at the user of this publisher.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontext\n\n\nObject\n\n\nthe context the publisher works on\n\n\n\n\n\n\nfeaturePath\n\n\nString\n\n\nthe property of \ncontext.features\n the publisher reads the resource name from\n\n\n\n\n\n\noptionalOptions\n\n\nObject\n\n\noptions for the publisher\n\n\n\n\n\n\noptionalOptions.deliverToSender\n\n\nBoolean\n\n\nthe value is forward to \neventBus.publish\n: if \ntrue\n the event will also be delivered to the publisher. Default is \nfalse\n\n\n\n\n\n\noptionalOptions.isOptional\n\n\nBoolean\n\n\nif \ntrue\n, don't throw an error if \nfeaturePath.resource\n is missing. Instead return a publisher that doesn't do anything when called. Default is \nfalse\n.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFunction\n\n\nthe publisher function as described above\n\n\n\n\n\n\n\n\nhandlerFor( context )\n\n\nCreates a new handler instance for didReplace and didUpdate events. It already handles setting of the\nresource data on didReplace in the context.resources property and updating that data on didUpdate events.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontext\n\n\nObject\n\n\nthe context the handler should work with. It expects to find an \neventBus\n property there with which it can do the event handling\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nResourceHandler\n\n\na resource handler instance\n\n\n\n\n\n\n\n\nisSame( resourceA, resourceB, compareAttributes )\n\n\nTests if two objects represent the same resource.\n\n\nThe test takes place as follows:\n - Let value of \ncounter\n be zero.\n - For each attribute (or attribute path) in \nattribute\n test the following:\n      - If both objects contain the attribute (or a defined value at the given path), check for\n      identity using \n===\n.\n            - If this check is negative, skip further testing and let the result of the function be \nfalse\n.\n            - If it is positive, increment \ncounter\n.\n      - If none of the objects contains the attribute (or a defined value at the given path), skip to\n      the next attribute.\n      - If the attribute (or a defined value at the given path) exist only in one of the objects, skip\n      further testing and let the result of the function be \nfalse\n.\n - If all attributes have been tested and the value of \ncounter\n is greater than zero, let the result\n   of the function be \ntrue\n, \nfalse\n otherwise.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nresourceA\n\n\nObject\n\n\nthe first object to test\n\n\n\n\n\n\nresourceB\n\n\nObject\n\n\nthe second object to test\n\n\n\n\n\n\ncompareAttributes\n\n\nArray.\nString\n\n\nthe list of attributes determining resource identity\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBoolean\n\n\ntrue\n if both objects are assumed to represent the same resource, \nfalse\n otherwise\n\n\n\n\n\n\n\n\nTypes\n\n\nResourceHandler\n\n\nResourceHandler#registerResourceFromFeature( featurePath, optionalOptions )\n\n\nRegisters default event handlers for a feature. The \nfeature\n argument is interpreted as attribute\npath to an object having a \nresource\n property of type string holding the name of the resource to\nregister the handler for. All replacements and updates will be written to \ncontext.resources\n by the\nrules written at \noptions.modelKey\n doc.\n\n\nExample:\nConsider the following configuration:\n\n\n{\n\n   \nfeatures\n:\n \n{\n\n      \nsomeFeature\n:\n \n{\n\n         \nsomeResourceConfig\n:\n \n{\n\n            \nresource\n:\n \nmyResource\n\n         \n}\n\n      \n}\n\n   \n}\n\n\n}\n\n\n\n\n\n\nThe according call, using an AngularJS Scope as context, would be (providing none of the options):\n\n\npatterns\n.\nresources\n,\nhandlerFor\n(\n \n$scope\n \n)\n\n   \n.\nregisterResourceFromFeature\n(\n \nsomeFeature.someResourceConfig\n \n);\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfeaturePath\n\n\nString\n\n\nthe attribute path to the feature for the resource\n\n\n\n\n\n\noptionalOptions\n\n\nObject\n\n\noptions and callbacks to use\n\n\n\n\n\n\noptionalOptions.onReplace\n\n\nFunction\n, \nArray.\nFunction\n\n\na function or a list of functions to call when a didReplace event is received. Each function receives the event object as argument. If \noptions.omitFirstReplace\n is \ntrue\n, it is only called first the second time a didReplace event occurs\n\n\n\n\n\n\noptionalOptions.onUpdate\n\n\nFunction\n, \nArray.\nFunction\n\n\na function or a list of functions to call when a didUpdate event is received. Each function receives the event object as argument\n\n\n\n\n\n\noptionalOptions.onUpdateReplace\n\n\nFunction\n, \nArray.\nFunction\n\n\na function or a list of functions to call when a didUpdate or a didReplace event is received. Each function receives the event object as argument. If \noptions.omitFirstReplace\n is \ntrue\n, it is only called first for didReplace events the second time such an event occurs\n\n\n\n\n\n\noptionalOptions.omitFirstReplace\n\n\nBoolean\n\n\nif \ntrue\n \noptions.onReplace\n is only called after the first time a didReplace event occurred. Default is \nfalse\n\n\n\n\n\n\noptionalOptions.modelKey\n\n\nString\n\n\nthe key to use for the resource in \ncontext.resources\n. If not given the last path fragment of \nfeaturePath\n is used. For example if the path is \nmyfeature.superResource\n the key will be \nsuperResource\n\n\n\n\n\n\noptionalOptions.isOptional\n\n\nBoolean\n\n\nif set to \ntrue\n, missing configuration for this resource is silently ignored and no handlers are registered. If set to \nfalse\n, an error will be raised in this case (default is \nfalse\n)\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nResourceHandler\n\n\nthis instance for chaining\n\n\n\n\n\n\n\n\nResourceHandler#registerResource( resource, optionalOptions )\n\n\nRegisters default event handlers for a known resource name. All replacements and updates will be\nwritten to \ncontext.resources\n.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nresource\n\n\nString\n\n\nthe resource the handler should be registered for\n\n\n\n\n\n\noptionalOptions\n\n\nObject\n\n\noptions and callbacks to use\n\n\n\n\n\n\noptionalOptions.onReplace\n\n\nFunction\n, \nArray.\nFunction\n\n\na function or a list of functions to call when a didReplace event is received. Each function receives the event object as argument. If \noptions.omitFirstReplace\n is \ntrue\n, it is only called first the second time a didReplace event occurs\n\n\n\n\n\n\noptionalOptions.onUpdate\n\n\nFunction\n, \nArray.\nFunction\n\n\na function or a list of functions to call when a didUpdate event is received. Each function receives the event object as argument\n\n\n\n\n\n\noptionalOptions.onUpdateReplace\n\n\nFunction\n, \nArray.\nFunction\n\n\na function or a list of functions to call when a didUpdate or a didReplace event is received. Each function receives the event object as argument. If \noptions.omitFirstReplace\n is \ntrue\n, it is only called first for didReplace events the second time such an event occurs\n\n\n\n\n\n\noptionalOptions.omitFirstReplace\n\n\nBoolean\n\n\nif \ntrue\n \noptions.onReplace\n is only called after the first time a didReplace event occurred. Default is \nfalse\n\n\n\n\n\n\noptionalOptions.modelKey\n\n\nString\n\n\nthe key to use for the resource in \ncontext.resources\n. If not given the value of \nresource\n is used\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nResourceHandler\n\n\nthis instance for chaining\n\n\n\n\n\n\n\n\nResourceHandler#whenAllWereReplaced( callback, optionalOptions )\n\n\nRegisters a callback that is called once all resources were initially replaced. If more resource\nhandlers are registered before all relevant didReplace events were received, those are also waited\nfor.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncallback\n\n\nFunction\n\n\nthe function to call\n\n\n\n\n\n\noptionalOptions\n\n\nBoolean\n\n\nan optional set of parameters to specify watch behavior\n\n\n\n\n\n\noptionalOptions.watch\n\n\nBoolean\n\n\nif \ntrue\n, the callback will be called again whenever resources are modified after all were replaced at least once\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nResourceHandler\n\n\nthis instance for chaining\n\n\n\n\n\n\n\n\nResourceHandler#wereAllReplaced()\n\n\nAllows to find out if there are still outstanding resources, or if all resources have been replaced.\nCan be used in update-/replace-handlers to determine if all dependencies are satisfied.\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBoolean\n\n\ntrue\n if all resources registered with this handler (so far) have been replaced at least once, \nfalse\n if there are still outstanding resources", 
            "title": "resources"
        }, 
        {
            "location": "/api/resources.js/#resources", 
            "text": "This module provides helpers for patterns regarding  didReplace  and  didUpdate  events.  Definition of the  context  object mentioned throughout this api:  In the simplest case this can be the AngularJS  $scope  passed into a widget. Technically this can be\nany object exposing these three properties:   eventBus : The event bus instance used for event subscriptions and publishing events  features : The configuration of the widget, used for automagical resource handling  resources : An object where all registered resources and updates to them are written to. Will be\n  added if it doesn't exist.", 
            "title": "resources"
        }, 
        {
            "location": "/api/resources.js/#contents", 
            "text": "Module Members   replaceHandler  updateHandler  replacePublisherForFeature  updatePublisherForFeature  handlerFor  isSame   Types   ResourceHandler  ResourceHandler#registerResourceFromFeature  ResourceHandler#registerResource  ResourceHandler#whenAllWereReplaced  ResourceHandler#wereAllReplaced", 
            "title": "Contents"
        }, 
        {
            "location": "/api/resources.js/#module-members", 
            "text": "", 
            "title": "Module Members"
        }, 
        {
            "location": "/api/resources.js/#parameters", 
            "text": "Property  Type  Description      context  Object  the context the handler works on    modelKey  String  the property of  context,resources  the handler writes replaces to", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/resources.js/#returns", 
            "text": "Type  Description      Function  the handler function", 
            "title": "Returns"
        }, 
        {
            "location": "/api/resources.js/#parameters_1", 
            "text": "Property  Type  Description      context  Object  the context the handler works on    modelKey  String  the property of  context.resources  the handler applies updates to", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/resources.js/#returns_1", 
            "text": "Type  Description      Function  the handler function", 
            "title": "Returns"
        }, 
        {
            "location": "/api/resources.js/#parameters_2", 
            "text": "Property  Type  Description      context  Object  the context the publisher works on    featurePath  String  the property of  context.features  the publisher reads the resource name from    optionalOptions  Object  options for the publisher    optionalOptions.deliverToSender  Boolean  the value is forwarded to  eventBus.publish : if  true  the event will also be delivered to the publisher. Default is  false    optionalOptions.isOptional  Boolean  if  true , don't throw an error if  featurePath.resource  is missing. Instead return a publisher that doesn't do anything when called. Default is  false .", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/resources.js/#returns_2", 
            "text": "Type  Description      Function  the publisher function. Takes the data to publish as single argument", 
            "title": "Returns"
        }, 
        {
            "location": "/api/resources.js/#parameters_3", 
            "text": "Property  Type  Description      context  Object  the context the publisher works on    featurePath  String  the property of  context.features  the publisher reads the resource name from    optionalOptions  Object  options for the publisher    optionalOptions.deliverToSender  Boolean  the value is forward to  eventBus.publish : if  true  the event will also be delivered to the publisher. Default is  false    optionalOptions.isOptional  Boolean  if  true , don't throw an error if  featurePath.resource  is missing. Instead return a publisher that doesn't do anything when called. Default is  false .", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/resources.js/#returns_3", 
            "text": "Type  Description      Function  the publisher function as described above", 
            "title": "Returns"
        }, 
        {
            "location": "/api/resources.js/#parameters_4", 
            "text": "Property  Type  Description      context  Object  the context the handler should work with. It expects to find an  eventBus  property there with which it can do the event handling", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/resources.js/#returns_4", 
            "text": "Type  Description      ResourceHandler  a resource handler instance", 
            "title": "Returns"
        }, 
        {
            "location": "/api/resources.js/#parameters_5", 
            "text": "Property  Type  Description      resourceA  Object  the first object to test    resourceB  Object  the second object to test    compareAttributes  Array. String  the list of attributes determining resource identity", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/resources.js/#returns_5", 
            "text": "Type  Description      Boolean  true  if both objects are assumed to represent the same resource,  false  otherwise", 
            "title": "Returns"
        }, 
        {
            "location": "/api/resources.js/#types", 
            "text": "", 
            "title": "Types"
        }, 
        {
            "location": "/api/resources.js/#parameters_6", 
            "text": "Property  Type  Description      featurePath  String  the attribute path to the feature for the resource    optionalOptions  Object  options and callbacks to use    optionalOptions.onReplace  Function ,  Array. Function  a function or a list of functions to call when a didReplace event is received. Each function receives the event object as argument. If  options.omitFirstReplace  is  true , it is only called first the second time a didReplace event occurs    optionalOptions.onUpdate  Function ,  Array. Function  a function or a list of functions to call when a didUpdate event is received. Each function receives the event object as argument    optionalOptions.onUpdateReplace  Function ,  Array. Function  a function or a list of functions to call when a didUpdate or a didReplace event is received. Each function receives the event object as argument. If  options.omitFirstReplace  is  true , it is only called first for didReplace events the second time such an event occurs    optionalOptions.omitFirstReplace  Boolean  if  true   options.onReplace  is only called after the first time a didReplace event occurred. Default is  false    optionalOptions.modelKey  String  the key to use for the resource in  context.resources . If not given the last path fragment of  featurePath  is used. For example if the path is  myfeature.superResource  the key will be  superResource    optionalOptions.isOptional  Boolean  if set to  true , missing configuration for this resource is silently ignored and no handlers are registered. If set to  false , an error will be raised in this case (default is  false )", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/resources.js/#returns_6", 
            "text": "Type  Description      ResourceHandler  this instance for chaining", 
            "title": "Returns"
        }, 
        {
            "location": "/api/resources.js/#parameters_7", 
            "text": "Property  Type  Description      resource  String  the resource the handler should be registered for    optionalOptions  Object  options and callbacks to use    optionalOptions.onReplace  Function ,  Array. Function  a function or a list of functions to call when a didReplace event is received. Each function receives the event object as argument. If  options.omitFirstReplace  is  true , it is only called first the second time a didReplace event occurs    optionalOptions.onUpdate  Function ,  Array. Function  a function or a list of functions to call when a didUpdate event is received. Each function receives the event object as argument    optionalOptions.onUpdateReplace  Function ,  Array. Function  a function or a list of functions to call when a didUpdate or a didReplace event is received. Each function receives the event object as argument. If  options.omitFirstReplace  is  true , it is only called first for didReplace events the second time such an event occurs    optionalOptions.omitFirstReplace  Boolean  if  true   options.onReplace  is only called after the first time a didReplace event occurred. Default is  false    optionalOptions.modelKey  String  the key to use for the resource in  context.resources . If not given the value of  resource  is used", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/resources.js/#returns_7", 
            "text": "Type  Description      ResourceHandler  this instance for chaining", 
            "title": "Returns"
        }, 
        {
            "location": "/api/resources.js/#parameters_8", 
            "text": "Property  Type  Description      callback  Function  the function to call    optionalOptions  Boolean  an optional set of parameters to specify watch behavior    optionalOptions.watch  Boolean  if  true , the callback will be called again whenever resources are modified after all were replaced at least once", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/resources.js/#returns_8", 
            "text": "Type  Description      ResourceHandler  this instance for chaining", 
            "title": "Returns"
        }, 
        {
            "location": "/api/resources.js/#returns_9", 
            "text": "Type  Description      Boolean  true  if all resources registered with this handler (so far) have been replaced at least once,  false  if there are still outstanding resources", 
            "title": "Returns"
        }, 
        {
            "location": "/api/validation.js/", 
            "text": "validation\n\n\nThis module provides helpers for patterns regarding \nvalidateRequest\n, \nwillValidate\n and\n\n\ndidValidate\n events.\n\n\nValidation messages can have one of the following structures:\n\n\n\n\nA simple html message object (locale to string mapping). It will get a default level of \nERROR\n.\n\n\nA html message object as required by the messages widget consisting of a html message object under the\n  key \nhtmlMessage\n and a level under the key \nlevel\n.\n\n\n\n\nContents\n\n\nModule Members\n\n\n\n\nsuccessEvent\n\n\nerrorEvent\n\n\nhandlerFor\n\n\n\n\nTypes\n\n\n\n\nValidationHandler\n\n\nValidationHandler#registerResourceFromFeature\n\n\nValidationHandler#registerResource\n\n\n\n\n\n\n\n\nModule Members\n\n\nsuccessEvent( resource, htmlMessages )\n\n\nCreates and returns an event resembling a successful validation result.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nresource\n\n\nString\n\n\nname of the validated resource\n\n\n\n\n\n\nhtmlMessages...\n\n\nArray.\nObject\n, \nObject\n, \nArray.\nString\n, \nString\n\n\nmessages associated with the result. They should have the structure as described in the module\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nObject\n\n\nthe validation event\n\n\n\n\n\n\n\n\nerrorEvent( resource, htmlMessages )\n\n\nCreates and returns an event resembling the result of a validation with errors.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nresource\n\n\nString\n\n\nname of the validated resource\n\n\n\n\n\n\nhtmlMessages...\n\n\nArray.\nObject\n, \nObject\n, \nArray.\nString\n, \nString\n\n\nmessages associated with the result. They should have the structure as described in the module\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nObject\n\n\nthe validation event\n\n\n\n\n\n\n\n\nhandlerFor( context )\n\n\nCreates and returns a new handler for \nvalidateRequest\n events for a given context. It handles sending\nof \nwillValidate\n and \ndidValidate\n events, including the output of the given \nvalidator\n function.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontext\n\n\nObject\n\n\nthe context the handler should work with. It expects to find an \neventBus\n property, with which it can do the event handling\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nValidationHandler\n\n\nthe validation handler instance for the given context\n\n\n\n\n\n\n\n\nTypes\n\n\nValidationHandler\n\n\nValidationHandler#registerResourceFromFeature( featurePath, validator, optionalOptions )\n\n\nRegisters a validator for \nvalidateRequest\n events for a resource configured under the given feature.\nIt is assumed that the given feature has a \nresource\n property with the name of the resource to\nvalidate. If the property is not found, an assertion will fail. If on the other hand the option\n\nisOptional\n is given as \ntrue\n, this is ignored and nothing good or bad happens.\n\n\nApart from that this function works just like \nValidationHandler#registerResource\n.\n\n\nExample:\nConsider the following configuration for a widget:\n\n\n{\n\n   \nfeatures\n:\n \n{\n\n      \namount\n:\n \n{\n\n         \nresource\n:\n \ntheAmount\n\n      \n}\n\n   \n}\n\n\n}\n\n\n\n\n\n\nAn example using that would be:\n\n\nvalidation\n.\nhandlerFor\n(\n \ncontext\n \n)\n\n   \n.\nregisterResourceFromFeature\n(\n \namount\n,\n \nfunction\n(\n \nevent\n,\n \nmeta\n \n)\n \n{\n\n      \nif\n(\n \nisAmountValid\n()\n \n)\n \n{\n\n         \nreturn\n \nnull\n;\n\n      \n}\n\n      \nreturn\n \nThe given amount is not valid\n;\n\n   \n}\n \n);\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfeaturePath\n\n\nString\n\n\nthe feature to read the resource to validate from\n\n\n\n\n\n\nvalidator\n\n\nFunction\n\n\nthe validator function called upon \nvalidateRequest\n for the given resource\n\n\n\n\n\n\noptionalOptions\n\n\nObject\n\n\noptions to use\n\n\n\n\n\n\noptionalOptions.isOptional\n\n\nBoolean\n\n\nif \ntrue\n a non-configured feature is simply ignored. Otherwise this results in an error (default is \nfalse\n)\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nValidationHandler\n\n\nthis instance for chaining\n\n\n\n\n\n\n\n\nValidationHandler#registerResource( resource, validator )\n\n\nRegisters a validator for \nvalidateRequest\n events for the given resource.\n\n\nThe validator must be a function, that handles the actual validation necessary for the resource. The\nvalidation result is always signaled through one or more generated error messages or the absence of\nthese messages. So valid results may be a string, an i18n object, an array of the former, \nnull\n or\nan empty array. \nnull\n and an empty array signal a successful validation.\n\n\nThe validator receives the event object for the \nvalidateRequest\n event and its according \nmeta\n object.\n\n\nThe way these messages are returned by the validator may be one of two ways, depending on the nature\nof the validation:\n\n\n\n\nif the validation can be handled synchronously, the result should simply be returned directly\n\n\nin case the validation is asynchronous, a promise must be returned, which must be resolved with the\n  same kind of values as for the synchronous case\n\n\n\n\nIf the validator throws an error or the promise is rejected, this is treated as a failed validation.\nSince this is due to a programming error, the error or rejection cause will be logged and a\nconfigurable message will instead be send in the \ndidValidate\n event. The message is assumed to be\nfound in the global configuration under the path \nlib.laxar-patterns.validation.i18nHtmlExceptionMessage\n\nas string or i18n object. If it cannot be found, an empty string is send as message.\n\n\nExample:\n\n\nvalidation\n.\nhandlerFor\n(\n \ncontext\n \n)\n\n   \n.\nregisterResource\n(\n \ntheAmount\n,\n \nfunction\n(\n \nevent\n,\n \nmeta\n \n)\n \n{\n\n      \nreturn\n \ncontext\n.\nresources\n.\ntheAmount\n \n \n1000\n;\n\n   \n}\n \n)\n\n   \n.\nregisterResource\n(\n \ncurrentUser\n,\n \nfunction\n(\n \nevent\n,\n \nmeta\n \n)\n \n{\n\n      \nreturn\n \nfetchUserValidityRules\n()\n\n         \n.\nthen\n(\n \nfunction\n(\n \nrules\n \n)\n \n{\n\n            \nreturn\n \ncontext\n.\nresources\n.\ncurrentUser\n.\nmeets\n(\n \nrules\n \n);\n\n         \n}\n \n)\n\n         \n.\nthen\n(\n \nfunction\n(\n \nvalid\n \n)\n \n{\n\n            \nreturn\n \nvalid\n \n?\n \nnull\n \n:\n \nThe current user isn\\\nt valid for some reason. Do something!\n;\n\n         \n}\n \n);\n\n   \n}\n \n);\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nresource\n\n\nString\n\n\nthe resource to validate\n\n\n\n\n\n\nvalidator\n\n\nFunction\n\n\nthe validator function called upon \nvalidateRequest\n for the given resource\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nValidationHandler\n\n\nthis instance for chaining", 
            "title": "validation"
        }, 
        {
            "location": "/api/validation.js/#validation", 
            "text": "This module provides helpers for patterns regarding  validateRequest ,  willValidate  and  didValidate  events.  Validation messages can have one of the following structures:   A simple html message object (locale to string mapping). It will get a default level of  ERROR .  A html message object as required by the messages widget consisting of a html message object under the\n  key  htmlMessage  and a level under the key  level .", 
            "title": "validation"
        }, 
        {
            "location": "/api/validation.js/#contents", 
            "text": "Module Members   successEvent  errorEvent  handlerFor   Types   ValidationHandler  ValidationHandler#registerResourceFromFeature  ValidationHandler#registerResource", 
            "title": "Contents"
        }, 
        {
            "location": "/api/validation.js/#module-members", 
            "text": "", 
            "title": "Module Members"
        }, 
        {
            "location": "/api/validation.js/#parameters", 
            "text": "Property  Type  Description      resource  String  name of the validated resource    htmlMessages...  Array. Object ,  Object ,  Array. String ,  String  messages associated with the result. They should have the structure as described in the module", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/validation.js/#returns", 
            "text": "Type  Description      Object  the validation event", 
            "title": "Returns"
        }, 
        {
            "location": "/api/validation.js/#parameters_1", 
            "text": "Property  Type  Description      resource  String  name of the validated resource    htmlMessages...  Array. Object ,  Object ,  Array. String ,  String  messages associated with the result. They should have the structure as described in the module", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/validation.js/#returns_1", 
            "text": "Type  Description      Object  the validation event", 
            "title": "Returns"
        }, 
        {
            "location": "/api/validation.js/#parameters_2", 
            "text": "Property  Type  Description      context  Object  the context the handler should work with. It expects to find an  eventBus  property, with which it can do the event handling", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/validation.js/#returns_2", 
            "text": "Type  Description      ValidationHandler  the validation handler instance for the given context", 
            "title": "Returns"
        }, 
        {
            "location": "/api/validation.js/#types", 
            "text": "", 
            "title": "Types"
        }, 
        {
            "location": "/api/validation.js/#parameters_3", 
            "text": "Property  Type  Description      featurePath  String  the feature to read the resource to validate from    validator  Function  the validator function called upon  validateRequest  for the given resource    optionalOptions  Object  options to use    optionalOptions.isOptional  Boolean  if  true  a non-configured feature is simply ignored. Otherwise this results in an error (default is  false )", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/validation.js/#returns_3", 
            "text": "Type  Description      ValidationHandler  this instance for chaining", 
            "title": "Returns"
        }, 
        {
            "location": "/api/validation.js/#parameters_4", 
            "text": "Property  Type  Description      resource  String  the resource to validate    validator  Function  the validator function called upon  validateRequest  for the given resource", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/validation.js/#returns_4", 
            "text": "Type  Description      ValidationHandler  this instance for chaining", 
            "title": "Returns"
        }, 
        {
            "location": "/api/visibility.js/", 
            "text": "visibility\n\n\nThis module provides helpers for patterns regarding \nchangeAreaVisibilityRequest\n and\n\n\ndidChangeAreaVisibility\n events.\n\n\nContents\n\n\nModule Members\n\n\n\n\nhandlerFor\n\n\nrequestPublisherForWidget\n\n\nrequestPublisherForArea\n\n\n\n\nTypes\n\n\n\n\nVisibilityHandler\n\n\nVisibilityHandler#registerArea\n\n\n\n\n\n\n\n\nModule Members\n\n\nhandlerFor( scope, optionalOptions )\n\n\nCreates a new handler instance for \ndidChangeAreaVisibility\n events.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nscope\n\n\nObject\n\n\nthe scope the handler should work with. It is expected to find an \neventBus\n property there with which it can do the event handling. The visibility handler will manage the boolean scope property \nisVisible\n which can be used to determine the visibility state of the entire widget\n\n\n\n\n\n\noptionalOptions\n\n\nObject\n\n\nadditional options to pass to the visibility handler\n\n\n\n\n\n\noptionalOptions.onChange\n\n\nFunction\n\n\na handler to call when a \ndidChangeAreaVisibility\n request for this widget's container was received, and the visibility of this widget was changed\n\n\n\n\n\n\noptionalOptions.onShow\n\n\nFunction\n\n\na handler to call when a \ndidChangeAreaVisibility\n request for this widget's container was received, and the visibility of this widget was changed to \ntrue\n\n\n\n\n\n\noptionalOptions.onHide\n\n\nFunction\n\n\na handler to call when a \ndidChangeAreaVisibility\n request for this widget's container was received, and the visibility of this widget was changed to \nfalse\n\n\n\n\n\n\noptionalOptions.onAnyAreaRequest\n\n\nFunction\n\n\na handler for any \nchangeAreaVisibilityRequest\n to this widget's areas The handler must\n \neither\n return \ntrue\n/\nfalse\n to indicate visibility synchronously\n \nor\n issue a will/did-response for the area when called\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVisibilityHandler\n\n\na visibility handler instance\n\n\n\n\n\n\n\n\nrequestPublisherForWidget( scope )\n\n\nPublishes \nchangeWidgetVisibilityRequest\n events.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nscope\n\n\nObject\n\n\na scope (with \nwidget\n and \neventBus\n properties)\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFunction\n\n\na function of boolean that requests for widget visibility to be set to the given state\n\n\n\n\n\n\n\n\nrequestPublisherForArea( scope, area )\n\n\nPublishes \nchangeAreaVisibilityRequest\n events.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nscope\n\n\nObject\n\n\na scope (with an \neventBus\n property)\n\n\n\n\n\n\narea\n\n\nString\n\n\nthe name of a widget area whose visibility is to be controlled by the function returned\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFunction\n\n\na function of boolean that requests for the given area's visibility to be set to the given state\n\n\n\n\n\n\n\n\nTypes\n\n\nVisibilityHandler\n\n\nVisibilityHandler#registerArea( areaName, optionalOptions )\n\n\nHandle change-visibility-requests for a specific area, using a callback.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nareaName\n\n\nString\n\n\nthe name of the area for which to handle visibility events\n\n\n\n\n\n\noptionalOptions\n\n\nObject\n\n\nadditional options to pass to the visibility handler\n\n\n\n\n\n\noptionalOptions.onRequest\n\n\nFunction\n\n\na callback for any \nchangeAreaVisibilityRequest\n to this area. The callback may issue a will/did-response for the area when called, or return a boolean which causes the visibility handler to respond accordingly. This should not be used in conjunction with the global \nonAnyAreaRequest\n-option of the handler\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVisibilityHandler\n\n\nthis instance for chaining", 
            "title": "visibility"
        }, 
        {
            "location": "/api/visibility.js/#visibility", 
            "text": "This module provides helpers for patterns regarding  changeAreaVisibilityRequest  and  didChangeAreaVisibility  events.", 
            "title": "visibility"
        }, 
        {
            "location": "/api/visibility.js/#contents", 
            "text": "Module Members   handlerFor  requestPublisherForWidget  requestPublisherForArea   Types   VisibilityHandler  VisibilityHandler#registerArea", 
            "title": "Contents"
        }, 
        {
            "location": "/api/visibility.js/#module-members", 
            "text": "", 
            "title": "Module Members"
        }, 
        {
            "location": "/api/visibility.js/#parameters", 
            "text": "Property  Type  Description      scope  Object  the scope the handler should work with. It is expected to find an  eventBus  property there with which it can do the event handling. The visibility handler will manage the boolean scope property  isVisible  which can be used to determine the visibility state of the entire widget    optionalOptions  Object  additional options to pass to the visibility handler    optionalOptions.onChange  Function  a handler to call when a  didChangeAreaVisibility  request for this widget's container was received, and the visibility of this widget was changed    optionalOptions.onShow  Function  a handler to call when a  didChangeAreaVisibility  request for this widget's container was received, and the visibility of this widget was changed to  true    optionalOptions.onHide  Function  a handler to call when a  didChangeAreaVisibility  request for this widget's container was received, and the visibility of this widget was changed to  false    optionalOptions.onAnyAreaRequest  Function  a handler for any  changeAreaVisibilityRequest  to this widget's areas The handler must   either  return  true / false  to indicate visibility synchronously   or  issue a will/did-response for the area when called", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/visibility.js/#returns", 
            "text": "Type  Description      VisibilityHandler  a visibility handler instance", 
            "title": "Returns"
        }, 
        {
            "location": "/api/visibility.js/#parameters_1", 
            "text": "Property  Type  Description      scope  Object  a scope (with  widget  and  eventBus  properties)", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/visibility.js/#returns_1", 
            "text": "Type  Description      Function  a function of boolean that requests for widget visibility to be set to the given state", 
            "title": "Returns"
        }, 
        {
            "location": "/api/visibility.js/#parameters_2", 
            "text": "Property  Type  Description      scope  Object  a scope (with an  eventBus  property)    area  String  the name of a widget area whose visibility is to be controlled by the function returned", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/visibility.js/#returns_2", 
            "text": "Type  Description      Function  a function of boolean that requests for the given area's visibility to be set to the given state", 
            "title": "Returns"
        }, 
        {
            "location": "/api/visibility.js/#types", 
            "text": "", 
            "title": "Types"
        }, 
        {
            "location": "/api/visibility.js/#parameters_3", 
            "text": "Property  Type  Description      areaName  String  the name of the area for which to handle visibility events    optionalOptions  Object  additional options to pass to the visibility handler    optionalOptions.onRequest  Function  a callback for any  changeAreaVisibilityRequest  to this area. The callback may issue a will/did-response for the area when called, or return a boolean which causes the visibility handler to respond accordingly. This should not be used in conjunction with the global  onAnyAreaRequest -option of the handler", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/visibility.js/#returns_3", 
            "text": "Type  Description      VisibilityHandler  this instance for chaining", 
            "title": "Returns"
        }, 
        {
            "location": "/patterns/actions/", 
            "text": "\u00ab return to the patterns overview\n\n\nAction Patterns\n\n\nIn LaxarJS applications, \nactions\n allow widgets and activities to give their collaborators the opportunity to \nreact\n to \"something that happened\".\nUsually, \"something\" is a user-interaction: A confirmation button was clicked, a selection was changed or a service call was completed on behalf of the user.\n\n\nOther widgets may respond to arbitrary action requests by listening to their configured topics, and taking an action \nappropriate for them:\n\nThey might open a popup, start navigation, perform a REST call, ask to validate or save some resources, clear their own resources and so on.\nWhen widgets respond to an action request, they can do so \nasynchronously\n using the [will/did]-mechanism.\nThis means that actions can have a \nduration\n, which is useful for longer running tasks such as performing a search.\nThe duration can in turn be used by yet other widgets, for example to show a progress indicator every time that an action on the page runs for more than, say, 200 milliseconds.\n\n\nIf you are familiar with \nQt's signal/slot\n mechanism, you may think of an action as the named, asynchronous counterpart to an \nn:m\n signal/slot connection.\n\n\nAction Requests and Will/Did-Responses\n\n\nAs with \nresources\n, the \npage configuration\n determines which widgets share action topics:\nIf a widget offers to publish an action, but no topic was configured for that action, it should not publish an event.\nSimilarly, if a widget offers to respond to some action, but no topic was configured, it should not subscribe to action requests.\n\n\nThe \ntakeActionRequest, willTakeAction\n and \ndidTakeAction\n Events\n\n\nA widget (the \naction initiator\n) may request for action to be taken by publishing a \ntakeActionRequest\n.\nCollaborators (\naction handlers\n) capable and configured to perform a corresponding action respond by publishing a \nwillTakeAction\n event.\nAfter they have completed performing their action, possibly asynchronously, the collaborators publish a \ndidTakeAction\n event.\n\n\n\n\n\n\n\n\nEvent name\n\n\nPayload Attribute\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntakeActionRequest.{action}\n\n\n\n\n\n\npublished by any widget to request for some action being taken\n\n\n\n\n\n\n\n\naction\n\n\nstring\n\n\nthe topic through which respondents are connected (used in the payload \nas well as\n in the event name)\n\n\n\n\n\n\n\n\nanchorDomElement\n\n\nstring\n\n\nIf applicable: the ID of a DOM element where the action originated\n\n\n\n\n\n\nwillTakeAction.{action}\n\n\n\n\n\n\npublished by a widget that is about to perform some action\n\n\n\n\n\n\n\n\naction\n\n\nstring\n\n\nsee above\n\n\n\n\n\n\ndidTakeAction.{action}.{outcome}\n\n\n\n\n\n\npublished by a widget that has completed its action\n\n\n\n\n\n\n\n\naction\n\n\nstring\n\n\nsee above\n\n\n\n\n\n\n\n\noutcome\n\n\nstring\n\n\nERROR\n or \nSUCCESS\n\n\n\n\n\n\n\n\nThe \nanchorDomElement\n that can be sent along with the \ntakeActionRequest\n is useful to display popover hints right next to the UI element that was activated by the user.\nThis information exposes implementation details of the sender, so respondents should take care not to modify the sender DOM and not to rely on a specific structure.\n\n\nThe \noutcome\n that is sent with the \ndidTakeAction\n response indicated if the (assumed) user intent could be satisfied, because of an error condition that could not be handled (such as a network problem).\nIf the outcome is \nERROR\n, the initiator should signal this to the user if appropriate, and the handler should publish a \ndidEncounterError\n event with details on the problem.\n\n\nYou are free to add any additional information to a \ntakeActionRequest\n or \ndidTakeAction\n event payload, but bear in mind, that a third party widget following this guide may not understand or preserve your custom data.", 
            "title": "Action Patterns"
        }, 
        {
            "location": "/patterns/actions/#action-patterns", 
            "text": "In LaxarJS applications,  actions  allow widgets and activities to give their collaborators the opportunity to  react  to \"something that happened\".\nUsually, \"something\" is a user-interaction: A confirmation button was clicked, a selection was changed or a service call was completed on behalf of the user.  Other widgets may respond to arbitrary action requests by listening to their configured topics, and taking an action  appropriate for them: \nThey might open a popup, start navigation, perform a REST call, ask to validate or save some resources, clear their own resources and so on.\nWhen widgets respond to an action request, they can do so  asynchronously  using the [will/did]-mechanism.\nThis means that actions can have a  duration , which is useful for longer running tasks such as performing a search.\nThe duration can in turn be used by yet other widgets, for example to show a progress indicator every time that an action on the page runs for more than, say, 200 milliseconds.  If you are familiar with  Qt's signal/slot  mechanism, you may think of an action as the named, asynchronous counterpart to an  n:m  signal/slot connection.", 
            "title": "Action Patterns"
        }, 
        {
            "location": "/patterns/actions/#action-requests-and-willdid-responses", 
            "text": "As with  resources , the  page configuration  determines which widgets share action topics:\nIf a widget offers to publish an action, but no topic was configured for that action, it should not publish an event.\nSimilarly, if a widget offers to respond to some action, but no topic was configured, it should not subscribe to action requests.", 
            "title": "Action Requests and Will/Did-Responses"
        }, 
        {
            "location": "/patterns/actions/#the-takeactionrequest-willtakeaction-and-didtakeaction-events", 
            "text": "A widget (the  action initiator ) may request for action to be taken by publishing a  takeActionRequest .\nCollaborators ( action handlers ) capable and configured to perform a corresponding action respond by publishing a  willTakeAction  event.\nAfter they have completed performing their action, possibly asynchronously, the collaborators publish a  didTakeAction  event.     Event name  Payload Attribute  Type  Description      takeActionRequest.{action}    published by any widget to request for some action being taken     action  string  the topic through which respondents are connected (used in the payload  as well as  in the event name)     anchorDomElement  string  If applicable: the ID of a DOM element where the action originated    willTakeAction.{action}    published by a widget that is about to perform some action     action  string  see above    didTakeAction.{action}.{outcome}    published by a widget that has completed its action     action  string  see above     outcome  string  ERROR  or  SUCCESS     The  anchorDomElement  that can be sent along with the  takeActionRequest  is useful to display popover hints right next to the UI element that was activated by the user.\nThis information exposes implementation details of the sender, so respondents should take care not to modify the sender DOM and not to rely on a specific structure.  The  outcome  that is sent with the  didTakeAction  response indicated if the (assumed) user intent could be satisfied, because of an error condition that could not be handled (such as a network problem).\nIf the outcome is  ERROR , the initiator should signal this to the user if appropriate, and the handler should publish a  didEncounterError  event with details on the problem.  You are free to add any additional information to a  takeActionRequest  or  didTakeAction  event payload, but bear in mind, that a third party widget following this guide may not understand or preserve your custom data.", 
            "title": "The takeActionRequest, willTakeAction and didTakeAction Events"
        }, 
        {
            "location": "/patterns/errors/", 
            "text": "\u00ab return to the patterns overview\n\n\nError Handling Patterns\n\n\nAny LaxarJS widget or activity that communicates with the outside world can experience an error condition.\nThis can be a an HTTP server that is not reachable anymore, failing to open a WebSocket connection, or an unexpected privilege restriction imposed by the web browser.\n\n\nThe \ndidEncounterError\n Event\n\n\nWidgets may use the \ndidEncounterError\n event to inform about problems from which they cannot recover.\nThis allows for some other dedicated widget or activity to take an appropriate measure, for example by displaying a message to the user or by informing a REST service dedicated to monitoring or logging.\nNo topic configuration is needed for this event, as it is assumed that only a small number of activities or widgets are responsible for handling all types of errors.\n\n\nThe \ndidEncounterError\n event is \nnot\n intended to handle programming errors, such as null-pointer errors, which should be eliminated during testing.\nAlso, it is not intended to inform about invalid user input: \nHave a look at \nresource validation events\n instead.\n\n\n\n\n\n\n\n\nEvent name\n\n\nPayload Attribute\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndidEncounterError.{code}\n\n\n\n\n\n\npublished by any widget to indicate an unrecoverable error\n\n\n\n\n\n\n\n\ncode\n\n\nstring\n\n\nHTTP_GET\n or \nHTTP_PUT\n (if applicable)\n\n\n\n\n\n\n\n\nmessage\n\n\nstring\n\n\na more precise description of the problem\n\n\n\n\n\n\n\n\ndata\n\n\nobject\n\n\nadditional details, specific to the problem\n\n\n\n\n\n\n\n\nThe \ncode\n values stand representative for any \nread\n and \nwrite\n, or \n(I/O)\n problems.\nIf necessary, a sub-topic can be added, for example \nHTTP_PUT-WEB_SOCKET\n.\n\n\nThe \nmessage\n and \ndata\n attributes should contain additional information.", 
            "title": "Error Handling Patterns"
        }, 
        {
            "location": "/patterns/errors/#error-handling-patterns", 
            "text": "Any LaxarJS widget or activity that communicates with the outside world can experience an error condition.\nThis can be a an HTTP server that is not reachable anymore, failing to open a WebSocket connection, or an unexpected privilege restriction imposed by the web browser.", 
            "title": "Error Handling Patterns"
        }, 
        {
            "location": "/patterns/errors/#the-didencountererror-event", 
            "text": "Widgets may use the  didEncounterError  event to inform about problems from which they cannot recover.\nThis allows for some other dedicated widget or activity to take an appropriate measure, for example by displaying a message to the user or by informing a REST service dedicated to monitoring or logging.\nNo topic configuration is needed for this event, as it is assumed that only a small number of activities or widgets are responsible for handling all types of errors.  The  didEncounterError  event is  not  intended to handle programming errors, such as null-pointer errors, which should be eliminated during testing.\nAlso, it is not intended to inform about invalid user input: \nHave a look at  resource validation events  instead.     Event name  Payload Attribute  Type  Description      didEncounterError.{code}    published by any widget to indicate an unrecoverable error     code  string  HTTP_GET  or  HTTP_PUT  (if applicable)     message  string  a more precise description of the problem     data  object  additional details, specific to the problem     The  code  values stand representative for any  read  and  write , or  (I/O)  problems.\nIf necessary, a sub-topic can be added, for example  HTTP_PUT-WEB_SOCKET .  The  message  and  data  attributes should contain additional information.", 
            "title": "The didEncounterError Event"
        }, 
        {
            "location": "/patterns/flags/", 
            "text": "\u00ab return to the patterns overview\n\n\nFlag Patterns\n\n\nLaxarJS widgets use \nflags\n to communicate boolean application state \n(true/false)\n, usually to control parts of the user interface.\nFor example, a flag might be used by an activity to indicate that some resource is currently in a \ndirty\n state, or that a \npopup\n layer is currently open.\nConsumers of flags respond to the state changes: a \"save\" button should be active \nwhile\n a resource is in the dirty state, and an animation on the main page should be paused \nwhile\n a popup is open.\n\n\nAs with resources and actions, flags are defined by the page configuration.\n\n\nThe \ndidChangeFlag\n Event\n\n\nWidgets that publish boolean state may do so by publishing a \ndidChangeFlag\n event.\nTo avoid race conditions, only one widget should be configured to publish state for a given flag on any single page.\n\n\nConsumers of the \ndidChangeFlag\n event react simply by adapting to the modified state.\nUsually, flag consumers take an arbitrary number of flag topics (configurable as an array in their features).\nConsumers should consider the overall flag state to be true if any of their subscribed flags is \ntrue\n.\nIf no state as been received yet for a single flag, consumers should consider it to be \nfalse\n.\n\n\n\n\n\n\n\n\nEvent name\n\n\nPayload Attribute\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndidChangeFlag.{flag}.{state}\n\n\n\n\n\n\npublished by any widget to communicate a boolean state\n\n\n\n\n\n\n\n\nflag\n\n\nstring\n\n\nthe topic through which flag consumer and producers are connected (used in the payload \nas well as\n in the event name)\n\n\n\n\n\n\n\n\nstate\n\n\nboolean\n\n\nthe new state for the flag\n\n\n\n\n\n\n\n\nBecause the flag \nstate\n is encoded in the event name as \n\"true\"\n or \n\"false\"\n, subscribers can use pattern matching to create two different subscriptions.", 
            "title": "Flag Patterns"
        }, 
        {
            "location": "/patterns/flags/#flag-patterns", 
            "text": "LaxarJS widgets use  flags  to communicate boolean application state  (true/false) , usually to control parts of the user interface.\nFor example, a flag might be used by an activity to indicate that some resource is currently in a  dirty  state, or that a  popup  layer is currently open.\nConsumers of flags respond to the state changes: a \"save\" button should be active  while  a resource is in the dirty state, and an animation on the main page should be paused  while  a popup is open.  As with resources and actions, flags are defined by the page configuration.", 
            "title": "Flag Patterns"
        }, 
        {
            "location": "/patterns/flags/#the-didchangeflag-event", 
            "text": "Widgets that publish boolean state may do so by publishing a  didChangeFlag  event.\nTo avoid race conditions, only one widget should be configured to publish state for a given flag on any single page.  Consumers of the  didChangeFlag  event react simply by adapting to the modified state.\nUsually, flag consumers take an arbitrary number of flag topics (configurable as an array in their features).\nConsumers should consider the overall flag state to be true if any of their subscribed flags is  true .\nIf no state as been received yet for a single flag, consumers should consider it to be  false .     Event name  Payload Attribute  Type  Description      didChangeFlag.{flag}.{state}    published by any widget to communicate a boolean state     flag  string  the topic through which flag consumer and producers are connected (used in the payload  as well as  in the event name)     state  boolean  the new state for the flag     Because the flag  state  is encoded in the event name as  \"true\"  or  \"false\" , subscribers can use pattern matching to create two different subscriptions.", 
            "title": "The didChangeFlag Event"
        }, 
        {
            "location": "/patterns/resources/", 
            "text": "\u00ab return to the patterns overview\n\n\nResource Patterns\n\n\nResource events are essential to any non-trivial LaxarJS application, as they allow to share application resources and to collaborate on them.\nBecause events are always delivered \nby copy\n, there is no danger of widgets and activities performing conflicting operations on shared mutable state.\n\n\nThe Master/Slave Pattern\n\n\nWhen using the LaxarJS resource pattern, for a given resource there is usually a single widget (or activity) responsible for \nproviding\n it, in order for others to collaborate.\nIf applicable, that widget (the \nresource master\n) is also capable of persisting modifications to the resource.\nThe other collaborators are \nslaves\n with respect to the shared resource.\n\n\nOnly the resource master may change the \nidentity\n of a shared resource, while the slaves may only publish \nmodifications to the state\n of the resource.\n\n\nExample: Shopping Cart\n\n\nAs an example, consider a shopping cart widget that displays a list of \npositions\n (articles and quantities) in a web shop application.\nThe user may select any of the positions, and a second widget will then show details on the \nselected-position\n resource, such as a photo of the corresponding article.\nThe shopping cart widget is the resource master here, because it alone determines which article is currently selected.\nThe details widget is a slave, it can only act with respect to the currently selected article.\n\n\nThe details widget might even allow to modify the quantity of a given article within the cart, causing the shopping cart to remove a position when its quantity reaches zero.\nHowever, the slave can never change \nwhich\n position is currently the \nselected-position\n .\n\n\nThe \ndidReplace\n and \ndidUpdate\n Events\n\n\nThe identity and initial state of a resource is published through the \ndidReplace\n event by the resource master.\nModifications to a resource may be published through the \ndidUpdate\n event, by master or slaves.\n\n\n\n\n\n\n\n\nEvent name\n\n\nPayload Attribute\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndidReplace.{resource}\n\n\n\n\n\n\npublished by a resource master to define state and identity of a shared resource\n\n\n\n\n\n\n\n\nresource\n\n\nstring\n\n\nthe topic through which the resource is shared (used in the payload \nas well as\n in the event name)\n\n\n\n\n\n\n\n\ndata\n\n\nobject\n\n\nthe (initial or new) state of the resource\n\n\n\n\n\n\ndidUpdate.{resource}\n\n\n\n\n\n\npublished by a resource master or by its slaves to publish modifications to the state of a shared resource\n\n\n\n\n\n\n\n\nresource\n\n\nstring\n\n\nsee above\n\n\n\n\n\n\n\n\npatches\n\n\narray\n\n\nA \nJSON-Patch\n document (an array representing a sequence of incremental modifications)\n\n\n\n\n\n\n\n\nBecause modifications \n(didUpdate)\n are transmitted incrementally, the resource master may use the \npatches\n attribute of the event payload to persist modifications using an \nHTTP PATCH\n request.\nTo create and apply patches, you require \nlaxar-patterns\n into your widget controller and use \ncreatePatch\n and \napplyPatch\n its \njson\n API.\n\n\nWhen sharing resources, keep in mind that resource events (like all LaxarJS events) are cloned for each receiver.\nThis makes it easy to write robust applications, but can lead to inefficiencies if very large resources are published.\nIn some cases, it might be worthwhile to factor out sub-resources relevant to the consumers.\n\n\nAsynchronous Resource Validation\n\n\nOften the individual widgets sharing a resource know best how to validate their specific user input.\nHowever, in the context of persistence or navigation the validity state of the overall resource or of the entire page is of interest.\n\n\nWidgets and activities concerned with navigation and persistence should not be exposed to the details of resource validation [1].\nTo separate these concerns, widgets may issue \nrequests to validate a resource\n which other widgets may respond to.\nRespondents may choose to validate immediately or asynchronously.\n\n\nThe \nvalidateRequest, willValidate\n and \ndidValidate\n Events\n\n\nA widget may request validation of a resource using a \nvalidateRequest\n event.\nCollaborators capable of performing validation on this resource respond by publishing a \nwillValidate\n event.\nAfter they have performed validation, possibly asynchronously, collaborators publish a \ndidValidate\n event.\n\n\n\n\n\n\n\n\nEvent name\n\n\nPayload Attribute\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalidateRequest.{resource}\n\n\n\n\n\n\npublished by any widget that requires validation of the given resource\n\n\n\n\n\n\n\n\nresource\n\n\nstring\n\n\nthe topic through which the resource is shared (used in the payload \nas well as\n in the event name)\n\n\n\n\n\n\nwillValidate.{resource}\n\n\n\n\n\n\npublished by a widget that is about to perform validation of the given resource\n\n\n\n\n\n\n\n\nresource\n\n\nstring\n\n\nsee above\n\n\n\n\n\n\ndidValidate.{resource}\n\n\n\n\n\n\npublished by a widget that has performed validation of the given resource\n\n\n\n\n\n\n\n\nresource\n\n\nstring\n\n\nsee above\n\n\n\n\n\n\n\n\noutcome\n\n\nstring\n\n\nOne of \nERROR\n, \nWARNING\n, \nINFO\n and \nSUCCESS\n\n\n\n\n\n\n\n\ndata\n\n\narray\n\n\nA list of \nvalidation messages\n for the application user (see below)\n\n\n\n\n\n\n\n\nValidation Outcome and Validation Messages\n\n\nThe \ndidValidate\n event contains information on the results of a validation:\n\n\n* The _outcome_ determines if validation was successful:\n\n        + `ERROR`: The resource is in an invalid state. If the receiver would normally persist the resource, it will probably not do so.\n        + `WARNING`: The resource _probably_ contains problems. If the receiver would normally persist the resource, it should probably obtain user confirmation before doing so.\n        + `INFO`: The resource _might_ contain problems or require user intervention. If the receiver would normally persist the resource, it might obtain confirmation or otherwise inform the user.\n        + `SUCCESS`: No problems were found _by the sender_ of the event. If the receiver would normally persist the resource, it should proceed as far as the sender is concerned.\n\n* The _validation messages_ (`data` array) contains additional details for the user. Each message is an object with at least these attributes:\n\n        + `htmlMessage`: A validation message for the user (a _string_), to be interpreted as HTML markup\n        + `level`: The severity of this particular vaidation message (a _string_), using the outcomes specified above\n        + `sortKey`: The message priority (a _string_) that should be used for sorting messages lexicographically.\n\n\n\n\n\n[1]: As an exception to this rule, a resource master may perform a (semantic) \noverall\n validation after the individual editor widgets had their say.\n\n\nSaving Resources\n\n\nUsually the resource master is responsible for saving user input where appropriate.\nThis can be achieved by performing a REST call for example, or by putting state into a container resource (as a slave) and requesting for the container to be persisted.\n\n\nThe \nsaveRequest, willSave\n and \ndidSave\n Events\n\n\nTo request saving a resource, widgets may publish a \nsaveRequest\n event.\nWidgets capable of and configured for persisting the resource respond by publishing a \nwillSave\n event.\nAfter they have ensured persistence, usually asynchronously, collaborators publish a \ndidSave\n event.\n\n\n\n\n\n\n\n\nEvent name\n\n\nPayload Attribute\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsaveRequest.{resource}\n\n\n\n\n\n\npublished by any widget that requires persisting the given resource\n\n\n\n\n\n\n\n\nresource\n\n\nstring\n\n\nthe topic through which the resource is shared (used in the payload \nas well as\n in the event name)\n\n\n\n\n\n\nwillSave.{resource}\n\n\n\n\n\n\npublished by a widget that is about to persist the given resource\n\n\n\n\n\n\n\n\nresource\n\n\nstring\n\n\nsee above\n\n\n\n\n\n\ndidSave.{resource}\n\n\n\n\n\n\npublished by a widget after saving the given resource\n\n\n\n\n\n\n\n\nresource\n\n\nstring\n\n\nsee above\n\n\n\n\n\n\n\n\noutcome\n\n\nstring\n\n\nERROR\n or \nSUCCESS\n\n\n\n\n\n\n\n\nThe \ndidSave\n event contains information on the \noutcome\n:\n\n\n* `ERROR`: The resource could not be saved. The sender should also publish a `didEncounterError` event in this case.\n* `SUCCESS`: The resource was saved successfully.\n\n\n\n\n\nDepending on the use case, widgets might persist resources automatically every time they have been modified.\nIn this case, it is recommended for them to still respond to save requests, for best interoperability.", 
            "title": "Resource Patterns"
        }, 
        {
            "location": "/patterns/resources/#resource-patterns", 
            "text": "Resource events are essential to any non-trivial LaxarJS application, as they allow to share application resources and to collaborate on them.\nBecause events are always delivered  by copy , there is no danger of widgets and activities performing conflicting operations on shared mutable state.", 
            "title": "Resource Patterns"
        }, 
        {
            "location": "/patterns/resources/#the-masterslave-pattern", 
            "text": "When using the LaxarJS resource pattern, for a given resource there is usually a single widget (or activity) responsible for  providing  it, in order for others to collaborate.\nIf applicable, that widget (the  resource master ) is also capable of persisting modifications to the resource.\nThe other collaborators are  slaves  with respect to the shared resource.  Only the resource master may change the  identity  of a shared resource, while the slaves may only publish  modifications to the state  of the resource.", 
            "title": "The Master/Slave Pattern"
        }, 
        {
            "location": "/patterns/resources/#example-shopping-cart", 
            "text": "As an example, consider a shopping cart widget that displays a list of  positions  (articles and quantities) in a web shop application.\nThe user may select any of the positions, and a second widget will then show details on the  selected-position  resource, such as a photo of the corresponding article.\nThe shopping cart widget is the resource master here, because it alone determines which article is currently selected.\nThe details widget is a slave, it can only act with respect to the currently selected article.  The details widget might even allow to modify the quantity of a given article within the cart, causing the shopping cart to remove a position when its quantity reaches zero.\nHowever, the slave can never change  which  position is currently the  selected-position  .", 
            "title": "Example: Shopping Cart"
        }, 
        {
            "location": "/patterns/resources/#the-didreplace-and-didupdate-events", 
            "text": "The identity and initial state of a resource is published through the  didReplace  event by the resource master.\nModifications to a resource may be published through the  didUpdate  event, by master or slaves.     Event name  Payload Attribute  Type  Description      didReplace.{resource}    published by a resource master to define state and identity of a shared resource     resource  string  the topic through which the resource is shared (used in the payload  as well as  in the event name)     data  object  the (initial or new) state of the resource    didUpdate.{resource}    published by a resource master or by its slaves to publish modifications to the state of a shared resource     resource  string  see above     patches  array  A  JSON-Patch  document (an array representing a sequence of incremental modifications)     Because modifications  (didUpdate)  are transmitted incrementally, the resource master may use the  patches  attribute of the event payload to persist modifications using an  HTTP PATCH  request.\nTo create and apply patches, you require  laxar-patterns  into your widget controller and use  createPatch  and  applyPatch  its  json  API.  When sharing resources, keep in mind that resource events (like all LaxarJS events) are cloned for each receiver.\nThis makes it easy to write robust applications, but can lead to inefficiencies if very large resources are published.\nIn some cases, it might be worthwhile to factor out sub-resources relevant to the consumers.", 
            "title": "The didReplace and didUpdate Events"
        }, 
        {
            "location": "/patterns/resources/#asynchronous-resource-validation", 
            "text": "Often the individual widgets sharing a resource know best how to validate their specific user input.\nHowever, in the context of persistence or navigation the validity state of the overall resource or of the entire page is of interest.  Widgets and activities concerned with navigation and persistence should not be exposed to the details of resource validation [1].\nTo separate these concerns, widgets may issue  requests to validate a resource  which other widgets may respond to.\nRespondents may choose to validate immediately or asynchronously.", 
            "title": "Asynchronous Resource Validation"
        }, 
        {
            "location": "/patterns/resources/#the-validaterequest-willvalidate-and-didvalidate-events", 
            "text": "A widget may request validation of a resource using a  validateRequest  event.\nCollaborators capable of performing validation on this resource respond by publishing a  willValidate  event.\nAfter they have performed validation, possibly asynchronously, collaborators publish a  didValidate  event.     Event name  Payload Attribute  Type  Description      validateRequest.{resource}    published by any widget that requires validation of the given resource     resource  string  the topic through which the resource is shared (used in the payload  as well as  in the event name)    willValidate.{resource}    published by a widget that is about to perform validation of the given resource     resource  string  see above    didValidate.{resource}    published by a widget that has performed validation of the given resource     resource  string  see above     outcome  string  One of  ERROR ,  WARNING ,  INFO  and  SUCCESS     data  array  A list of  validation messages  for the application user (see below)", 
            "title": "The validateRequest, willValidate and didValidate Events"
        }, 
        {
            "location": "/patterns/resources/#validation-outcome-and-validation-messages", 
            "text": "The  didValidate  event contains information on the results of a validation:  * The _outcome_ determines if validation was successful:\n\n        + `ERROR`: The resource is in an invalid state. If the receiver would normally persist the resource, it will probably not do so.\n        + `WARNING`: The resource _probably_ contains problems. If the receiver would normally persist the resource, it should probably obtain user confirmation before doing so.\n        + `INFO`: The resource _might_ contain problems or require user intervention. If the receiver would normally persist the resource, it might obtain confirmation or otherwise inform the user.\n        + `SUCCESS`: No problems were found _by the sender_ of the event. If the receiver would normally persist the resource, it should proceed as far as the sender is concerned.\n\n* The _validation messages_ (`data` array) contains additional details for the user. Each message is an object with at least these attributes:\n\n        + `htmlMessage`: A validation message for the user (a _string_), to be interpreted as HTML markup\n        + `level`: The severity of this particular vaidation message (a _string_), using the outcomes specified above\n        + `sortKey`: The message priority (a _string_) that should be used for sorting messages lexicographically.  [1]: As an exception to this rule, a resource master may perform a (semantic)  overall  validation after the individual editor widgets had their say.", 
            "title": "Validation Outcome and Validation Messages"
        }, 
        {
            "location": "/patterns/resources/#saving-resources", 
            "text": "Usually the resource master is responsible for saving user input where appropriate.\nThis can be achieved by performing a REST call for example, or by putting state into a container resource (as a slave) and requesting for the container to be persisted.", 
            "title": "Saving Resources"
        }, 
        {
            "location": "/patterns/resources/#the-saverequest-willsave-and-didsave-events", 
            "text": "To request saving a resource, widgets may publish a  saveRequest  event.\nWidgets capable of and configured for persisting the resource respond by publishing a  willSave  event.\nAfter they have ensured persistence, usually asynchronously, collaborators publish a  didSave  event.     Event name  Payload Attribute  Type  Description      saveRequest.{resource}    published by any widget that requires persisting the given resource     resource  string  the topic through which the resource is shared (used in the payload  as well as  in the event name)    willSave.{resource}    published by a widget that is about to persist the given resource     resource  string  see above    didSave.{resource}    published by a widget after saving the given resource     resource  string  see above     outcome  string  ERROR  or  SUCCESS     The  didSave  event contains information on the  outcome :  * `ERROR`: The resource could not be saved. The sender should also publish a `didEncounterError` event in this case.\n* `SUCCESS`: The resource was saved successfully.  Depending on the use case, widgets might persist resources automatically every time they have been modified.\nIn this case, it is recommended for them to still respond to save requests, for best interoperability.", 
            "title": "The saveRequest, willSave and didSave Events"
        }
    ]
}