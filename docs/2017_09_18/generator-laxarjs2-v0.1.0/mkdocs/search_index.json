{
    "docs": [
        {
            "location": "/", 
            "text": "LaxarJS 2 Yeoman Generator\n\n\n\n\nThe \nconvenient\n way to scaffold a new LaxarJS 2.x application, widget or control.\n\n\n\n\nNote:\n This generator produces code that works with LaxarJS version 2.x.\nIf you need to create widgets or controls for an application running LaxarJS in version 1.x, you'll have to use \ngenerator-laxarjs\n instead.\n\n\nInstallation\n\n\nSimply install the generator package and optionally \nyeoman\n globally via npm.\n\n\nnpm install -g yo generator-laxarjs2\n\n\n\n\n\nGenerators\n\n\nThe Yeoman generator \nlaxarjs2\n comes up with the main generator for scaffolding an application and three sub-generators for widgets, activities and controls.\n\n\nAvailable generators:\n\n\n\n\nlaxarjs2\n\n\nlaxarjs2:widget\n\n\nlaxarjs2:activity\n\n\nlaxarjs2:control\n\n\n\n\nKeep in mind that the sub-generators expect to find a Yeoman configuration file (\n.yo-rc.json\n) in the root directory of your application.\nSo when calling the generator for the application first, this will already create the configuration file.\nIn case you add widgets, activities or controls to an application that was created without Yeoman, simply create the file with an empty object as content.\n\n\necho\n \n{}\n \n .yo-rc.json\n\n\n\n\n\nApplication\n\n\nTo scaffold a new LaxarJS application, create a directory and run the generator:\n\n\nmkdir my-application\n\ncd \nmy-application\nyo laxarjs2\n\n\n\n\n\nAfter answering several questions, the generator creates the bare-bones application scaffolding for you.\nAlternatively you can choose to let the generator create a set of very simple exemplary widgets in the application.\nWhen choosing this option, a widget is created for every selected integration technology.\nAdditionally, a widget written in plain JavaScript is added, since this is always part of LaxarJS.\n\n\nNext, all dependencies can be installed by running \nnpm install\n (or \nyarn\n), and after that is finished, the development web server can be started by running \nnpm start\n;\n\n\nCommand Line Options\n\n\n--banner \nbanner-file.txt\n\n\nBy using this option a text file containing a custom header for source files can be configured.\nWhen the generator creates a new source file (\n.js\n, \n.ts\n, \n.jsx\n or \n.vue\n), this will be added as header just before the actual code starts.\n\n\nThis option will be saved in the Yeoman configuration file and will be used by sub-generators.\n\n\nWidget, Activity and Control\n\n\nThe scaffolding for a widget can be generated by simply running the following in the root directory of the application (\n$applicationRoot\n):\n\n\nyo laxarjs2:widget\n\n\n\n\n\nThe widget will be created in \n$applicationRoot/application/widgets/$widgetName\n.\nIf the generator is not run in the application's root directory, but some other sub-directory, the widget will be created directly in that directory.\n\n\nTo create an activity or a control, simply use the appropriate sub-generator\n\n\n# create an activity\n\nyo laxarjs2:activity\n\n# create a control\n\nyo laxarjs2:control\n\n\n\n\n\nBy default activities will be created in the same folder as widgets, and control will be created in \n$applicationRoot/application/controls/$controlName\n.\nNote that while for widgets and controls the next time one of these artifacts should be created the last selected integration technology will be pre-selected, the default for activities will always be \nplain\n.\nThis is because any view rendering technology would only add bloat, since a view isn't rendered by an activity anyways.\nA valid exception could for example be the reuse of an AngularJS service within the activity controller.\n\n\nCommand Line Options\n\n\nartifact-name\n\n\nThis will initialize the question for the name of the artifact with this value.\n\n\n--banner \nbanner-file.txt\n\n\nThis is the same as explained above for the application generator.\n\n\n--directory \nartifacts-directory\n\n\nThe generator will create the widget, activity or control in a sub-directory of the directory that was provided using this option.\nName of the sub-directory is the name of the artifact.\n\n\nExample:\n\n\nmy-app \n$ \nyo laxarjs2:widget hello-world-widget --directory stuff/my-widgets\n\n\n\n\n\nThis will create the widget in \nmy-app/stuff/my-widgets/hello-world-widget\n.", 
            "title": "README"
        }, 
        {
            "location": "/#laxarjs-2-yeoman-generator", 
            "text": "The  convenient  way to scaffold a new LaxarJS 2.x application, widget or control.   Note:  This generator produces code that works with LaxarJS version 2.x.\nIf you need to create widgets or controls for an application running LaxarJS in version 1.x, you'll have to use  generator-laxarjs  instead.", 
            "title": "LaxarJS 2 Yeoman Generator"
        }, 
        {
            "location": "/#installation", 
            "text": "Simply install the generator package and optionally  yeoman  globally via npm.  npm install -g yo generator-laxarjs2", 
            "title": "Installation"
        }, 
        {
            "location": "/#generators", 
            "text": "The Yeoman generator  laxarjs2  comes up with the main generator for scaffolding an application and three sub-generators for widgets, activities and controls.  Available generators:   laxarjs2  laxarjs2:widget  laxarjs2:activity  laxarjs2:control   Keep in mind that the sub-generators expect to find a Yeoman configuration file ( .yo-rc.json ) in the root directory of your application.\nSo when calling the generator for the application first, this will already create the configuration file.\nIn case you add widgets, activities or controls to an application that was created without Yeoman, simply create the file with an empty object as content.  echo   {}    .yo-rc.json", 
            "title": "Generators"
        }, 
        {
            "location": "/#application", 
            "text": "To scaffold a new LaxarJS application, create a directory and run the generator:  mkdir my-application cd  my-application\nyo laxarjs2  After answering several questions, the generator creates the bare-bones application scaffolding for you.\nAlternatively you can choose to let the generator create a set of very simple exemplary widgets in the application.\nWhen choosing this option, a widget is created for every selected integration technology.\nAdditionally, a widget written in plain JavaScript is added, since this is always part of LaxarJS.  Next, all dependencies can be installed by running  npm install  (or  yarn ), and after that is finished, the development web server can be started by running  npm start ;", 
            "title": "Application"
        }, 
        {
            "location": "/#command-line-options", 
            "text": "", 
            "title": "Command Line Options"
        }, 
        {
            "location": "/#-banner-banner-filetxt", 
            "text": "By using this option a text file containing a custom header for source files can be configured.\nWhen the generator creates a new source file ( .js ,  .ts ,  .jsx  or  .vue ), this will be added as header just before the actual code starts.  This option will be saved in the Yeoman configuration file and will be used by sub-generators.", 
            "title": "--banner &lt;banner-file.txt&gt;"
        }, 
        {
            "location": "/#widget-activity-and-control", 
            "text": "The scaffolding for a widget can be generated by simply running the following in the root directory of the application ( $applicationRoot ):  yo laxarjs2:widget  The widget will be created in  $applicationRoot/application/widgets/$widgetName .\nIf the generator is not run in the application's root directory, but some other sub-directory, the widget will be created directly in that directory.  To create an activity or a control, simply use the appropriate sub-generator  # create an activity \nyo laxarjs2:activity # create a control \nyo laxarjs2:control  By default activities will be created in the same folder as widgets, and control will be created in  $applicationRoot/application/controls/$controlName .\nNote that while for widgets and controls the next time one of these artifacts should be created the last selected integration technology will be pre-selected, the default for activities will always be  plain .\nThis is because any view rendering technology would only add bloat, since a view isn't rendered by an activity anyways.\nA valid exception could for example be the reuse of an AngularJS service within the activity controller.", 
            "title": "Widget, Activity and Control"
        }, 
        {
            "location": "/#command-line-options_1", 
            "text": "", 
            "title": "Command Line Options"
        }, 
        {
            "location": "/#artifact-name", 
            "text": "This will initialize the question for the name of the artifact with this value.", 
            "title": "&lt;artifact-name&gt;"
        }, 
        {
            "location": "/#-banner-banner-filetxt_1", 
            "text": "This is the same as explained above for the application generator.", 
            "title": "--banner &lt;banner-file.txt&gt;"
        }, 
        {
            "location": "/#-directory-artifacts-directory", 
            "text": "The generator will create the widget, activity or control in a sub-directory of the directory that was provided using this option.\nName of the sub-directory is the name of the artifact.  Example:  my-app  $  yo laxarjs2:widget hello-world-widget --directory stuff/my-widgets  This will create the widget in  my-app/stuff/my-widgets/hello-world-widget .", 
            "title": "--directory &lt;artifacts-directory&gt;"
        }, 
        {
            "location": "/CHANGELOG/", 
            "text": "Changelog\n\n\nLast Changes\n\n\nv0.1.0", 
            "title": "Changelog"
        }, 
        {
            "location": "/CHANGELOG/#changelog", 
            "text": "", 
            "title": "Changelog"
        }, 
        {
            "location": "/CHANGELOG/#last-changes", 
            "text": "", 
            "title": "Last Changes"
        }, 
        {
            "location": "/CHANGELOG/#v010", 
            "text": "", 
            "title": "v0.1.0"
        }
    ]
}