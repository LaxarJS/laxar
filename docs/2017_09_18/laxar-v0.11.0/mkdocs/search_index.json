{
    "docs": [
        {
            "location": "/", 
            "text": "LaxarJS\n\n\nGetting Started\n\n\nThis is a very minimal getting started guide. It helps you to set up your first LaxarJS application and to create your first LaxarJS widget.\n\n\nGet the Prerequisites\n\n\nnpm install -g grunt-cli grunt-init\ngit clone https://github.com/LaxarJS/grunt-init-laxar-application.git ~/.grunt-init/laxar-application\ngit clone https://github.com/LaxarJS/grunt-init-laxar-widget.git ~/.grunt-init/laxar-widget\ngit clone https://github.com/LaxarJS/grunt-init-laxar-widget.git ~/.grunt-init/laxar-activity\n\n\n\n\n\nCreate a LaxarJS Application from Our Template\n\n\nmkdir tryout\n\ncd \ntryout\ngrunt-init laxar-application\nnpm install\nnpm start\n\n\n\n\n\nVisit your empty application at \nhttp://localhost:8000/debug.html\n\nPress Ctrl-c to stop the server for now.\n\n\nCreate your first LaxarJS widget\n\n\nCreate a widget which just displays \nHello, world!\n\n\nmkdir -p includes/widgets/tryout/my_first_widget\n\ncd \nincludes/widgets/tryout/my_first_widget\ngrunt-init laxar-widget\nadd some widget-HTML:\n\necho\n \nh1\nHello, world!\n/h1\n \n default.theme/my_first_widget.html\n\n\n\n\n\nReference the widget from your page:\n\n\ncd\n -\n\necho\n \n{\n\n\n   \nlayout\n: \none_column\n,\n\n\n   \nareas\n: {\n\n\n      \nactivities\n: [ ],\n\n\n      \nheader\n: [ ],\n\n\n      \ncontent\n: [\n\n\n          {\n\n\n             \nwidget\n: \ntryout/my_first_widget\n\n\n          }\n\n\n      ],\n\n\n      \nfooter\n: [ ]\n\n\n   }\n\n\n}\n\n\n \n application/pages/page1.json\nnpm start\n\n\n\n\n\nSee your widget in action at \nhttp://localhost:8000/debug.html\n\n\nCreate a Compressed Release-Ready Version of Your Application\n\n\nFirst, stop the development server using Ctrl-c.\n\n\ngrunt dist\nnpm start\n\n\n\n\n\nNow your compressed application can be visited at \nhttp://localhost:8000/\n or deployed from the zip file that was just generated for you.\n\n\nNext Steps\n\n\nHave fun developing your first LaxarJS application.\n\n\nMake sure to have a look at the \nAPI doc\n and stay tuned for the upcoming getting started guide.", 
            "title": "README"
        }, 
        {
            "location": "/#laxarjs", 
            "text": "", 
            "title": "LaxarJS"
        }, 
        {
            "location": "/#getting-started", 
            "text": "This is a very minimal getting started guide. It helps you to set up your first LaxarJS application and to create your first LaxarJS widget.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#get-the-prerequisites", 
            "text": "npm install -g grunt-cli grunt-init\ngit clone https://github.com/LaxarJS/grunt-init-laxar-application.git ~/.grunt-init/laxar-application\ngit clone https://github.com/LaxarJS/grunt-init-laxar-widget.git ~/.grunt-init/laxar-widget\ngit clone https://github.com/LaxarJS/grunt-init-laxar-widget.git ~/.grunt-init/laxar-activity", 
            "title": "Get the Prerequisites"
        }, 
        {
            "location": "/#create-a-laxarjs-application-from-our-template", 
            "text": "mkdir tryout cd  tryout\ngrunt-init laxar-application\nnpm install\nnpm start  Visit your empty application at  http://localhost:8000/debug.html \nPress Ctrl-c to stop the server for now.", 
            "title": "Create a LaxarJS Application from Our Template"
        }, 
        {
            "location": "/#create-your-first-laxarjs-widget", 
            "text": "Create a widget which just displays  Hello, world!  mkdir -p includes/widgets/tryout/my_first_widget cd  includes/widgets/tryout/my_first_widget\ngrunt-init laxar-widget\nadd some widget-HTML: echo   h1 Hello, world! /h1    default.theme/my_first_widget.html  Reference the widget from your page:  cd  - echo   {      layout :  one_column ,      areas : {         activities : [ ],         header : [ ],         content : [            {                widget :  tryout/my_first_widget            }        ],         footer : [ ]     }  }     application/pages/page1.json\nnpm start  See your widget in action at  http://localhost:8000/debug.html", 
            "title": "Create your first LaxarJS widget"
        }, 
        {
            "location": "/#create-a-compressed-release-ready-version-of-your-application", 
            "text": "First, stop the development server using Ctrl-c.  grunt dist\nnpm start  Now your compressed application can be visited at  http://localhost:8000/  or deployed from the zip file that was just generated for you.", 
            "title": "Create a Compressed Release-Ready Version of Your Application"
        }, 
        {
            "location": "/#next-steps", 
            "text": "Have fun developing your first LaxarJS application.  Make sure to have a look at the  API doc  and stay tuned for the upcoming getting started guide.", 
            "title": "Next Steps"
        }, 
        {
            "location": "/CHANGELOG/", 
            "text": "Changelog\n\n\nLast Changes\n\n\nv0.11.0\n\n\n\n\n\n\n#39\n: portal: added JSON-schema formats 'topic', 'sub-topic' and 'flag-topic' to widget loader.\n  NEW FEATURE: see ticket for details\n\n\n\n\n\n\n#37\n: improved browsing of existing api doc and fixed some syntactical errors.\n\n\n\n\n#36\n: jshintrc: disabled enforcement of dot notation for object property access.\n\n\n\n\n#34\n: Enabled specification of widget features using JSON schema draft v4 notation.\n  NEW FEATURE: see ticket for details\n\n\n\n\n\n\n#33\n: EventBus: added event object to the information sent to inspectors on deliver actions.\n\n\n\n\n\n\n#31\n: Refactored JSON validator for better error messages and schema v4 support.\n  NEW FEATURE: see ticket for details\n\n\n\n\n\n\n#32\n: Configuration: Consolidated and documented configuration options under docs/manuals/configuration.md\n  NEW FEATURE: see ticket for details\n\n\n\n\n\n\n#30\n: PageLoader: added missing check for duplicate composition ids.\n\n\n\n\n\n\nv0.10.0\n\n\n\n\n#27\n: Portal: Enhanced the portal event bus performance by not requiring a digest/render-cycle on each tick\n\n\n#28\n: Fixed null values in widget features within compositions being turned into empty objects.\n\n\n#29\n: PageLoader: composition features that are not configured do not result in undefined values for widget features.\n\n\n#25\n: Only the page relevant for the current place is loaded now.\n\n\n\n\n#17\n: Testing: The testBed.setup method can now simulate default-events\n  NEW FEATURE: see ticket for details\n\n\n\n\n\n\n#26\n: Testing: Fixed the responseTransform option for http-mock\n\n\n\n\n\n\n#22\n: FileResourceProvider: allow to embed files into listings\n  NEW FEATURE: see ticket for details\n\n\n\n\n\n\n#15\n: FileResourceProvider, PageLoader: Prevented duplicate (simultaneous) requests to file listings\n\n\n\n\n\n\n#24\n: Widgets and compositions can now be disabled in pages.\n  NEW FEATURE: see ticket for details\n\n\n\n\n\n\n#23\n: FileResourceProvider: Slashes are now correctly handled when checking a file for existence in a listing.\n\n\n\n\n#21\n: The file resource provider now normalizes its root path.\n\n\n#20\n: Fixed event bus inspectors not being notified on unsubscription.\n\n\n#14\n: Fixed navigation being broken after successive navigation to the current location.\n\n\n#13\n: The current place is now send as part of the didNavigate event.\n\n\n#12\n: Testing: Get the LaxarJS tests running in Karma again.\n\n\n#11\n: Testing: Handle \nspec_runner.js\n that are not in a subdirectory of the RequireJS' \nbaseUrl\n.\n\n\n#10\n: Testing: Loading controls during tests now works in Karma.\n\n\n#9\n: Update Bower from ~1.2.8 to ~1.3.3.\n\n\n#8\n: Fixed the cleanup mechanism for generated widget areas.\n\n\n#6\n: The Portal now initializes an i18n object on the application's \n$rootScope\n\n\n#5\n: Testing: The run_spec-script (used to set up the spec tests) now loads controls declared in the widget.json\n\n\n#4\n: PageLoader: Added missing optional negation of generated topics and replacement of expressions in feature keys\n\n\n#3\n: Added url formatting for links in Readme.md\n\n\n#2\n: Fixed grunt-init step in Getting-Started docs\n\n\n#1\n: Added initial Getting-Started documentation", 
            "title": "Changelog"
        }, 
        {
            "location": "/CHANGELOG/#changelog", 
            "text": "", 
            "title": "Changelog"
        }, 
        {
            "location": "/CHANGELOG/#last-changes", 
            "text": "", 
            "title": "Last Changes"
        }, 
        {
            "location": "/CHANGELOG/#v0110", 
            "text": "#39 : portal: added JSON-schema formats 'topic', 'sub-topic' and 'flag-topic' to widget loader.\n  NEW FEATURE: see ticket for details    #37 : improved browsing of existing api doc and fixed some syntactical errors.   #36 : jshintrc: disabled enforcement of dot notation for object property access.   #34 : Enabled specification of widget features using JSON schema draft v4 notation.\n  NEW FEATURE: see ticket for details    #33 : EventBus: added event object to the information sent to inspectors on deliver actions.    #31 : Refactored JSON validator for better error messages and schema v4 support.\n  NEW FEATURE: see ticket for details    #32 : Configuration: Consolidated and documented configuration options under docs/manuals/configuration.md\n  NEW FEATURE: see ticket for details    #30 : PageLoader: added missing check for duplicate composition ids.", 
            "title": "v0.11.0"
        }, 
        {
            "location": "/CHANGELOG/#v0100", 
            "text": "#27 : Portal: Enhanced the portal event bus performance by not requiring a digest/render-cycle on each tick  #28 : Fixed null values in widget features within compositions being turned into empty objects.  #29 : PageLoader: composition features that are not configured do not result in undefined values for widget features.  #25 : Only the page relevant for the current place is loaded now.   #17 : Testing: The testBed.setup method can now simulate default-events\n  NEW FEATURE: see ticket for details    #26 : Testing: Fixed the responseTransform option for http-mock    #22 : FileResourceProvider: allow to embed files into listings\n  NEW FEATURE: see ticket for details    #15 : FileResourceProvider, PageLoader: Prevented duplicate (simultaneous) requests to file listings    #24 : Widgets and compositions can now be disabled in pages.\n  NEW FEATURE: see ticket for details    #23 : FileResourceProvider: Slashes are now correctly handled when checking a file for existence in a listing.   #21 : The file resource provider now normalizes its root path.  #20 : Fixed event bus inspectors not being notified on unsubscription.  #14 : Fixed navigation being broken after successive navigation to the current location.  #13 : The current place is now send as part of the didNavigate event.  #12 : Testing: Get the LaxarJS tests running in Karma again.  #11 : Testing: Handle  spec_runner.js  that are not in a subdirectory of the RequireJS'  baseUrl .  #10 : Testing: Loading controls during tests now works in Karma.  #9 : Update Bower from ~1.2.8 to ~1.3.3.  #8 : Fixed the cleanup mechanism for generated widget areas.  #6 : The Portal now initializes an i18n object on the application's  $rootScope  #5 : Testing: The run_spec-script (used to set up the spec tests) now loads controls declared in the widget.json  #4 : PageLoader: Added missing optional negation of generated topics and replacement of expressions in feature keys  #3 : Added url formatting for links in Readme.md  #2 : Fixed grunt-init step in Getting-Started docs  #1 : Added initial Getting-Started documentation", 
            "title": "v0.10.0"
        }, 
        {
            "location": "/api/", 
            "text": "API Documentation\n\n\n\n\nlaxar\n\n\n\n\nevent_bus\n\n\n\n\nevent_bus\n\n\n\n\ni18n\n\n\n\n\ni18n\n\n\n\n\nlogging\n\n\n\n\nlevel\n\n\nlog\n\n\nlog_context\n\n\nlogger\n\n\n\n\ntesting\n\n\n\n\nhttp_mock\n\n\njquery_mock\n\n\n\n\nutilities\n\n\n\n\narray\n\n\nassert\n\n\nobject\n\n\npath\n\n\nstorage\n\n\nstring", 
            "title": "Overview"
        }, 
        {
            "location": "/api/#api-documentation", 
            "text": "laxar", 
            "title": "API Documentation"
        }, 
        {
            "location": "/api/#event_bus", 
            "text": "event_bus", 
            "title": "event_bus"
        }, 
        {
            "location": "/api/#i18n", 
            "text": "i18n", 
            "title": "i18n"
        }, 
        {
            "location": "/api/#logging", 
            "text": "level  log  log_context  logger", 
            "title": "logging"
        }, 
        {
            "location": "/api/#testing", 
            "text": "http_mock  jquery_mock", 
            "title": "testing"
        }, 
        {
            "location": "/api/#utilities", 
            "text": "array  assert  object  path  storage  string", 
            "title": "utilities"
        }, 
        {
            "location": "/api/laxar/", 
            "text": "Documentation\n\n\nbootstrap( widgetModules )\n\n\nBootstraps AngularJS on the current \nwindow.document\n and sets up the LaxarJS portal. All AngularJS\nmodule names of widgets that are passed to this method will be passed to \nangular.bootstrap\n as initial\ndependencies, along with internal laxar modules. This is needed because AngularJS currently doesn't\nsupport lazy loading of modules. The \nportal_angular_dependencies\n grunt task of LaxarJS will collect\nall widgets reachable for the given \nflow.json\n, define them as dependencies of an amd module, that will\nreturn the names of their respective AngularJS modules. This list of module names can simply be passed\nto the \nboostrap\n method.\n\n\nParameters\n\n\n\n\nwidgetModules {String[]}\n: all AngularJS modules that should instantly be loaded (most probably the widgets)", 
            "title": "laxar.md"
        }, 
        {
            "location": "/api/laxar/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/laxar/#bootstrap-widgetmodules", 
            "text": "Bootstraps AngularJS on the current  window.document  and sets up the LaxarJS portal. All AngularJS\nmodule names of widgets that are passed to this method will be passed to  angular.bootstrap  as initial\ndependencies, along with internal laxar modules. This is needed because AngularJS currently doesn't\nsupport lazy loading of modules. The  portal_angular_dependencies  grunt task of LaxarJS will collect\nall widgets reachable for the given  flow.json , define them as dependencies of an amd module, that will\nreturn the names of their respective AngularJS modules. This list of module names can simply be passed\nto the  boostrap  method.", 
            "title": "bootstrap( widgetModules )"
        }, 
        {
            "location": "/api/laxar/#parameters", 
            "text": "widgetModules {String[]} : all AngularJS modules that should instantly be loaded (most probably the widgets)", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/", 
            "text": "Documentation\n\n\nEventBus( [optionalConfiguration] )\n\n\nConstructor for an event bus.\n\n\nParameters\n\n\n\n\n\n\noptionalConfiguration\n {Object}\n: configuration for the event bus instance\n\n\n\n\npendingDidTimeout {Number}\n: the timeout in milliseconds used by {@link EventBus#publishAndGatherReplies}. Default is 120000ms\n\n\n\n\n\n\n\n\nEventBus#setErrorHandler( errorHandler )\n\n\nSets an handler for all errors that may occur during event processing. It receives an error message as\nfirst argument and a map with additional information on the problem as second argument. There may be\ninstances of \nError\n as values within the map.\nThe default error handler simply logs all issues to \nconsole.error\n or \nconsole.log\n if available.\n\n\nParameters\n\n\n\n\nerrorHandler {Function}\n: the error handler\n\n\n\n\nEventBus#setMediator( mediator )\n\n\nSets a mediator, that has the chance to alter events shortly before their delivery to the according\nsubscribers. Its sole argument is the complete list of queued events, that should be delivered during\nthe current JavaScript event loop. It then needs to return this optionally modified list again. Events\nmay be added or deleted at will, but the return type needs to be an array containing zero or more event-\nlike objects.\n\n\nParameters\n\n\n\n\nmediator {Function}\n: the mediator function\n\n\n\n\nEventBus#addInspector( inspector )\n\n\nAdds an inspector, that gets notified when certain actions within the event bus take place. Currently\nthis includes the following actions:\n\n\n\n\nsubscribe\n: a new subscriber registered for an event\n\n\npublish\n: an event is published but not yet delivered\n\n\ndeliver\n: an event is actually delivered to a subscriber\n\n\n\n\nAn inspector receives a map with the following properties:\n\n\n\n\naction\n: one of the actions from above\n\n\nsource\n: the origin of the \naction\n\n\ntarget\n: the name of the event subscriber (\ndeliver\n action)\n\n\nevent\n: the full name of the event or the subscribed event (\nsubscribe\n action)\n\n\neventObject\n: the published event item (\npublish\n action)\n\n\nsubscribedTo\n: the event, possibly with omissions, the subscriber subscribed to (\ndeliver\n action)\n\n\ncycleId\n: the id of the event cycle\n\n\n\n\nThe function returned by this method can be called to remove the inspector again and prevent it from\nbeing called for future event bus actions.\n\n\nParameters\n\n\n\n\ninspector {Function}\n: the inspector function to add\n\n\n\n\nReturns\n\n\n\n\n{Function}\n: a function to remove the inspector\n\n\n\n\nEventBus#subscribe( eventName, subscriber, [optionalOptions] )\n\n\nSubscribes to an event by name. An event name consists of so called \ntopics\n, where each topic is\nseparated from another by dots (\n.\n). If a topic is omitted, this is treated as a wildcard. Note that\ntwo dots in the middle or one dot at the beginning of an event name must remain, whereas a dot at the\nend may be omitted. As such every event name has an intrinsic wildcard at its end. For example these are\nall valid event names:\n\n\n\n\nsome.event\n: matches \nsome.event\n, \nsome.event.again\n\n\n.event\n: matches \nsome.event\n, \nany.event\n, \nany.event.again\n\n\nsome..event\n: matches \nsome.fancy.event\n, \nsome.special.event\n\n\n\n\nAdditionally subtopics are supported. A subtopic are fragments within a topic, separated from another by\nsimple dashes (\n-\n). Here only suffixes of subtopics may be omitted when subscribing. Thus subscribing\nto \nsome.event\n would match an event published with name \nsome.event-again\n or even\n\nsome.event-another.again\n.\n\n\nWhen an event is delivered, the subscriber function receives two arguments:\nThe first one is the event object as it was published. If \nclone\n yields \ntrue\n this is a simple deep\ncopy of the object (note that only properties passing a JSON-(de)serialization remain). If \nfalse\n the\nobject is frozen using \nObject.freeze\n recursively in browsers that support freezing. In Any other\nbrowser this is just an identity operation.\n\n\nThe second one is a meta object with these properties:\n\n\n\n\nunsubscribe\n: A function to directly unsubscribe the called subscriber from further events\n\n\nname\n: The name of the event as it actually was delivered (i.e. without wildcards).\n\n\ncycleId\n: The cycle the event was delivered in\n\n\nsender\n: The id of the event sender, may be \nnull\n.\n\n\ninitiator\n: The id of the initator of the cycle. Currently not implemented, thus always \nnull\n.\n\n\noptions\n: The options that were passed to \npublish\n or \npublishAndGatherReplies\n respectively.\n\n\n\n\nParameters\n\n\n\n\n\n\neventName {String}\n: the name of the event to subscribe to\n\n\n\n\n\n\nsubscriber {Function}\n: a function to call whenever an event matching the name is published\n\n\n\n\n\n\noptionalOptions\n {Object}\n: additional options for the subscribe action\n\n\n\n\n\n\nsubscriber {String}\n: the id of the subscriber. Default is \nnull\n\n\n\n\n\n\nclone {Boolean}\n: if \nfalse\n the event will be send frozen to the subscriber, otherwise it will receive a deep copy.\nDefault is \ntrue\n\n\n\n\n\n\n\n\n\n\nEventBus#unsubscribe( subscriber )\n\n\nRemoves all subscriptions of the given subscriber.\n\n\nParameters\n\n\n\n\nsubscriber {Function}\n: the function to unsubscribe\n\n\n\n\nEventBus#publish( eventName, [optionalEvent], [optionalOptions] )\n\n\nAsynchronously publishes an event on the event bus. The returned promise will be queued as soon as this\nevent is delivered and, if during delivery a new event was enqueued, resolved after that new event was\ndelivered. If no new event is queued during delivery of this event, the promise is instantly resolved.\nTo make it a bit clearer, lets assume we publish and thus enqueue an event at time \nt\n. It then will be\ndelivered at time \nt+1\n. At that precise moment the promise is enqueued to be resolved soon. We then\ndistinguish between two cases:\n\n\n\n\nAt time \nt+1\n no subscriber publishes (i.e. enqueues) an event: Thus there is no event in the same\n  cycle and the promise is also resolved at time \nt+1\n.\n\n\nAt least one subscriber publishes an event at time \nt+1\n: The promise is then scheduled to be resolved\n  as soon as this event is delivered at time \nt+2\n.\n\n\n\n\nThe implication of this is the following:\n\n\nWe have two collaborators, A and B. A listens to event b and b listens to event A.\nWhenever A publishes a and B than instantly (i.e. in the same event cycle of the JavaScript runtime its\nsubscriber function was called) \"responds\" by publishing b, b arrives at the subscriber function of A\nbefore the promise of A's publish action is resolved.\nIt is hence possible to observe possible effects of an event send by oneself,under the conditions\nmentioned above.\n\n\nParameters\n\n\n\n\n\n\neventName {String}\n: the name of the event to publish\n\n\n\n\n\n\noptionalEvent\n {Object}\n: the event to publish\n\n\n\n\n\n\noptionalOptions\n {Object}\n: additional options for the publish action\n\n\n\n\n\n\nsender {String}\n: the id of the event sender. Default is \nnull\n\n\n\n\n\n\ndeliverToSender {Boolean}\n: if \nfalse\n the event will not be send to subscribers whose subscriber name matches\n\noptionalOptions.sender\n, else all subscribers will receive the event. Default is \ntrue\n\n\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n{Promise}\n: the delivery promise\n\n\n\n\nEventBus#publishAndGatherReplies( eventName, [optionalEvent], [optionalOptions] )\n\n\nPublishes an event that follows the request-will-did pattern and awaits all replies. This pattern has\nevolved over time and is of great use when handling the asynchronous nature of event bus events.\n\n\nCertain rules need to be fulfilled: First the initiator needs to call this method with an event whose\nname has the suffix \nRequest\n, e.g. \ntakeActionRequest\n. All collaborators that want to react to this\nevent then either do so in the same event cycle by sending a \ndidTakeAction\n event or announce that they\nwill do something asynchronously by publishing a \nwillTakeAction\n event. In the latter case they need to\nbroadcast the end of their action by sending a \ndidTakeAction\n event. Note that for both events the same\nsender name needs to be given. Otherwise they cannot be mapped and the event bus doesn't know if all\nasynchronous replies were already received.\n\n\nAdditionally a timer is started using either the globally configured \npendingDidTimeout\n ms value or the\nvalue provided as option to this method. If that timer expires before all did\n events to all given will\n\nevents were received, the error handler is called to handle the incident and the promise is resolved as\nnormally.\n\n\nParameters\n\n\n\n\n\n\neventName {String}\n: the name of the event to publish\n\n\n\n\n\n\noptionalEvent\n {Object}\n: the event to publish\n\n\n\n\n\n\noptionalOptions\n {Object}\n: additional options for the publish action\n\n\n\n\n\n\nsender {String}\n: the id of the event sender. Default is \nnull\n\n\n\n\n\n\npendingDidTimeout {Number}\n: the timeout in milliseconds for pending did* events\n\n\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n{Promise}\n: the delivery promise. It receives a list of all collected \ndid*\n events and according meta information", 
            "title": "lib-event_bus-event_bus.md"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#eventbus-optionalconfiguration", 
            "text": "Constructor for an event bus.", 
            "title": "EventBus( [optionalConfiguration] )"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#parameters", 
            "text": "optionalConfiguration  {Object} : configuration for the event bus instance   pendingDidTimeout {Number} : the timeout in milliseconds used by {@link EventBus#publishAndGatherReplies}. Default is 120000ms", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#eventbusseterrorhandler-errorhandler", 
            "text": "Sets an handler for all errors that may occur during event processing. It receives an error message as\nfirst argument and a map with additional information on the problem as second argument. There may be\ninstances of  Error  as values within the map.\nThe default error handler simply logs all issues to  console.error  or  console.log  if available.", 
            "title": "EventBus#setErrorHandler( errorHandler )"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#parameters_1", 
            "text": "errorHandler {Function} : the error handler", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#eventbussetmediator-mediator", 
            "text": "Sets a mediator, that has the chance to alter events shortly before their delivery to the according\nsubscribers. Its sole argument is the complete list of queued events, that should be delivered during\nthe current JavaScript event loop. It then needs to return this optionally modified list again. Events\nmay be added or deleted at will, but the return type needs to be an array containing zero or more event-\nlike objects.", 
            "title": "EventBus#setMediator( mediator )"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#parameters_2", 
            "text": "mediator {Function} : the mediator function", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#eventbusaddinspector-inspector", 
            "text": "Adds an inspector, that gets notified when certain actions within the event bus take place. Currently\nthis includes the following actions:   subscribe : a new subscriber registered for an event  publish : an event is published but not yet delivered  deliver : an event is actually delivered to a subscriber   An inspector receives a map with the following properties:   action : one of the actions from above  source : the origin of the  action  target : the name of the event subscriber ( deliver  action)  event : the full name of the event or the subscribed event ( subscribe  action)  eventObject : the published event item ( publish  action)  subscribedTo : the event, possibly with omissions, the subscriber subscribed to ( deliver  action)  cycleId : the id of the event cycle   The function returned by this method can be called to remove the inspector again and prevent it from\nbeing called for future event bus actions.", 
            "title": "EventBus#addInspector( inspector )"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#parameters_3", 
            "text": "inspector {Function} : the inspector function to add", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#returns", 
            "text": "{Function} : a function to remove the inspector", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#eventbussubscribe-eventname-subscriber-optionaloptions", 
            "text": "Subscribes to an event by name. An event name consists of so called  topics , where each topic is\nseparated from another by dots ( . ). If a topic is omitted, this is treated as a wildcard. Note that\ntwo dots in the middle or one dot at the beginning of an event name must remain, whereas a dot at the\nend may be omitted. As such every event name has an intrinsic wildcard at its end. For example these are\nall valid event names:   some.event : matches  some.event ,  some.event.again  .event : matches  some.event ,  any.event ,  any.event.again  some..event : matches  some.fancy.event ,  some.special.event   Additionally subtopics are supported. A subtopic are fragments within a topic, separated from another by\nsimple dashes ( - ). Here only suffixes of subtopics may be omitted when subscribing. Thus subscribing\nto  some.event  would match an event published with name  some.event-again  or even some.event-another.again .  When an event is delivered, the subscriber function receives two arguments:\nThe first one is the event object as it was published. If  clone  yields  true  this is a simple deep\ncopy of the object (note that only properties passing a JSON-(de)serialization remain). If  false  the\nobject is frozen using  Object.freeze  recursively in browsers that support freezing. In Any other\nbrowser this is just an identity operation.  The second one is a meta object with these properties:   unsubscribe : A function to directly unsubscribe the called subscriber from further events  name : The name of the event as it actually was delivered (i.e. without wildcards).  cycleId : The cycle the event was delivered in  sender : The id of the event sender, may be  null .  initiator : The id of the initator of the cycle. Currently not implemented, thus always  null .  options : The options that were passed to  publish  or  publishAndGatherReplies  respectively.", 
            "title": "EventBus#subscribe( eventName, subscriber, [optionalOptions] )"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#parameters_4", 
            "text": "eventName {String} : the name of the event to subscribe to    subscriber {Function} : a function to call whenever an event matching the name is published    optionalOptions  {Object} : additional options for the subscribe action    subscriber {String} : the id of the subscriber. Default is  null    clone {Boolean} : if  false  the event will be send frozen to the subscriber, otherwise it will receive a deep copy.\nDefault is  true", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#eventbusunsubscribe-subscriber", 
            "text": "Removes all subscriptions of the given subscriber.", 
            "title": "EventBus#unsubscribe( subscriber )"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#parameters_5", 
            "text": "subscriber {Function} : the function to unsubscribe", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#eventbuspublish-eventname-optionalevent-optionaloptions", 
            "text": "Asynchronously publishes an event on the event bus. The returned promise will be queued as soon as this\nevent is delivered and, if during delivery a new event was enqueued, resolved after that new event was\ndelivered. If no new event is queued during delivery of this event, the promise is instantly resolved.\nTo make it a bit clearer, lets assume we publish and thus enqueue an event at time  t . It then will be\ndelivered at time  t+1 . At that precise moment the promise is enqueued to be resolved soon. We then\ndistinguish between two cases:   At time  t+1  no subscriber publishes (i.e. enqueues) an event: Thus there is no event in the same\n  cycle and the promise is also resolved at time  t+1 .  At least one subscriber publishes an event at time  t+1 : The promise is then scheduled to be resolved\n  as soon as this event is delivered at time  t+2 .   The implication of this is the following:  We have two collaborators, A and B. A listens to event b and b listens to event A.\nWhenever A publishes a and B than instantly (i.e. in the same event cycle of the JavaScript runtime its\nsubscriber function was called) \"responds\" by publishing b, b arrives at the subscriber function of A\nbefore the promise of A's publish action is resolved.\nIt is hence possible to observe possible effects of an event send by oneself,under the conditions\nmentioned above.", 
            "title": "EventBus#publish( eventName, [optionalEvent], [optionalOptions] )"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#parameters_6", 
            "text": "eventName {String} : the name of the event to publish    optionalEvent  {Object} : the event to publish    optionalOptions  {Object} : additional options for the publish action    sender {String} : the id of the event sender. Default is  null    deliverToSender {Boolean} : if  false  the event will not be send to subscribers whose subscriber name matches optionalOptions.sender , else all subscribers will receive the event. Default is  true", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#returns_1", 
            "text": "{Promise} : the delivery promise", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#eventbuspublishandgatherreplies-eventname-optionalevent-optionaloptions", 
            "text": "Publishes an event that follows the request-will-did pattern and awaits all replies. This pattern has\nevolved over time and is of great use when handling the asynchronous nature of event bus events.  Certain rules need to be fulfilled: First the initiator needs to call this method with an event whose\nname has the suffix  Request , e.g.  takeActionRequest . All collaborators that want to react to this\nevent then either do so in the same event cycle by sending a  didTakeAction  event or announce that they\nwill do something asynchronously by publishing a  willTakeAction  event. In the latter case they need to\nbroadcast the end of their action by sending a  didTakeAction  event. Note that for both events the same\nsender name needs to be given. Otherwise they cannot be mapped and the event bus doesn't know if all\nasynchronous replies were already received.  Additionally a timer is started using either the globally configured  pendingDidTimeout  ms value or the\nvalue provided as option to this method. If that timer expires before all did  events to all given will \nevents were received, the error handler is called to handle the incident and the promise is resolved as\nnormally.", 
            "title": "EventBus#publishAndGatherReplies( eventName, [optionalEvent], [optionalOptions] )"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#parameters_7", 
            "text": "eventName {String} : the name of the event to publish    optionalEvent  {Object} : the event to publish    optionalOptions  {Object} : additional options for the publish action    sender {String} : the id of the event sender. Default is  null    pendingDidTimeout {Number} : the timeout in milliseconds for pending did* events", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/event_bus/event_bus/#returns_2", 
            "text": "{Promise} : the delivery promise. It receives a list of all collected  did*  events and according meta information", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/i18n/i18n/", 
            "text": "Documentation\n\n\nlocalize( languageTag, i18nValue )\n\n\nLocalize the given internationalized object using the given languageTag.\n\n\nParameters\n\n\n\n\n\n\nlanguageTag {String}\n: The languageTag to lookup a localization with\nMaybe undefined if the value is not i18n (app does not use i18n)\n\n\n\n\n\n\ni18nValue {*}\n: A possibly internationalized value:\n\n\n\n\nWhen passing a primitive value, it is returned as-is.\n\n\nWhen passing an object, the languageTag is used as a key within that object.\n\n\n\n\nReturns\n\n\n\n\n{*}\n: The localized value if found, \nundefined\n otherwise\n\n\n\n\nlocalizeRelaxed( languageTag, i18nValue )\n\n\nFor controls (such as a date-picker), we cannot anticipate all required language tags, as they may be\napp-specific. The relaxed localize behaves like localize if an exact localization is available.\nIf not, the language tag is successively generalized by stripping off the rightmost sub-tags until a\nlocalization is found.\nEventually, a fallback ('en') is used.\n\n\nParameters\n\n\n\n\n\n\nlanguageTag {String}\n: The languageTag to lookup a localization with.\nMaybe \nundefined\n if the value is not i18n (app does not use i18n)\n\n\n\n\n\n\ni18nValue {*}\n: A possibly internationalized value:\n\n\n\n\nWhen passing a primitive value, it is returned as-is.\n\n\nWhen passing an object, the \nlanguageTag\n is used as a key within that object.\n\n\n\n\nReturns\n\n\n\n\n{*}\n: The localized value if found, \nundefined\n otherwise\n\n\n\n\nlocalizer( languageTag )\n\n\nEncapsulate a given languageTag in a partially applied localize function.\n\n\nParameters\n\n\n\n\nlanguageTag {String}\n: The languageTag to lookup localizations with\n\n\n\n\nReturns\n\n\n\n\n{Function\n|\n}\n: A single-arg localize-Function, which always uses the given language-tag\nIt also has a .format-method, which can be used as a shortcut to\n\ntext.format( localize( x ), args )\n\n\n\n\nfunction Object() { [native code] }#format()\n\n\nShortcut to text.format, for simple chaining to the localizer.\n\n\nThese are equal:\n\n\n\n\ntext.format( i18n.localizer( tag )( i18nValue ), arg1, arg2 )\n\n\ni18n.localizer( tag ).format( i18nValue, arg1, arg2 )\n.\n\n\n\n\nlanguageTagFromI18n( String, )\n\n\nRetrieve the language tag of the current locale from an i18n model object, such as used on the scope.\n\n\nParameters\n\n\n\n\nString, {locale:}\n: An internationalization model, with reference to the currently active locale and a map from\nlocales to language tags.\n\n\n\n\nReturns\n\n\n\n\n{String}\n: The localized value if found, \nundefined\n otherwise", 
            "title": "lib-i18n-i18n.md"
        }, 
        {
            "location": "/api/lib/i18n/i18n/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/i18n/i18n/#localize-languagetag-i18nvalue", 
            "text": "Localize the given internationalized object using the given languageTag.", 
            "title": "localize( languageTag, i18nValue )"
        }, 
        {
            "location": "/api/lib/i18n/i18n/#parameters", 
            "text": "languageTag {String} : The languageTag to lookup a localization with\nMaybe undefined if the value is not i18n (app does not use i18n)    i18nValue {*} : A possibly internationalized value:   When passing a primitive value, it is returned as-is.  When passing an object, the languageTag is used as a key within that object.", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/i18n/i18n/#returns", 
            "text": "{*} : The localized value if found,  undefined  otherwise", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/i18n/i18n/#localizerelaxed-languagetag-i18nvalue", 
            "text": "For controls (such as a date-picker), we cannot anticipate all required language tags, as they may be\napp-specific. The relaxed localize behaves like localize if an exact localization is available.\nIf not, the language tag is successively generalized by stripping off the rightmost sub-tags until a\nlocalization is found.\nEventually, a fallback ('en') is used.", 
            "title": "localizeRelaxed( languageTag, i18nValue )"
        }, 
        {
            "location": "/api/lib/i18n/i18n/#parameters_1", 
            "text": "languageTag {String} : The languageTag to lookup a localization with.\nMaybe  undefined  if the value is not i18n (app does not use i18n)    i18nValue {*} : A possibly internationalized value:   When passing a primitive value, it is returned as-is.  When passing an object, the  languageTag  is used as a key within that object.", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/i18n/i18n/#returns_1", 
            "text": "{*} : The localized value if found,  undefined  otherwise", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/i18n/i18n/#localizer-languagetag", 
            "text": "Encapsulate a given languageTag in a partially applied localize function.", 
            "title": "localizer( languageTag )"
        }, 
        {
            "location": "/api/lib/i18n/i18n/#parameters_2", 
            "text": "languageTag {String} : The languageTag to lookup localizations with", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/i18n/i18n/#returns_2", 
            "text": "{Function | } : A single-arg localize-Function, which always uses the given language-tag\nIt also has a .format-method, which can be used as a shortcut to text.format( localize( x ), args )", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/i18n/i18n/#function-object-native-code-format", 
            "text": "Shortcut to text.format, for simple chaining to the localizer.  These are equal:   text.format( i18n.localizer( tag )( i18nValue ), arg1, arg2 )  i18n.localizer( tag ).format( i18nValue, arg1, arg2 ) .", 
            "title": "function Object() { [native code] }#format()"
        }, 
        {
            "location": "/api/lib/i18n/i18n/#languagetagfromi18n-string", 
            "text": "Retrieve the language tag of the current locale from an i18n model object, such as used on the scope.", 
            "title": "languageTagFromI18n( String, )"
        }, 
        {
            "location": "/api/lib/i18n/i18n/#parameters_3", 
            "text": "String, {locale:} : An internationalization model, with reference to the currently active locale and a map from\nlocales to language tags.", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/i18n/i18n/#returns_3", 
            "text": "{String} : The localized value if found,  undefined  otherwise", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/logging/level/", 
            "text": "Documentation", 
            "title": "lib-logging-level.md"
        }, 
        {
            "location": "/api/lib/logging/level/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/logging/log/", 
            "text": "Documentation", 
            "title": "lib-logging-log.md"
        }, 
        {
            "location": "/api/lib/logging/log/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/logging/log_context/", 
            "text": "Documentation\n\n\nLogContext()\n\n\nA context for a logger instance. Each context manages a stack of scopes where each scope can hold a\ndifferent set of log tags. Initially a context already has one scope on its stack, that cannot be left.\nTrying to do so will lead to an error. Thus each party entering a scope is also responsible for leaving\nthat scope again.\n\n\nLogContext#enterScope()\n\n\nEnters a new scope by pushing a scope object with an empty set of tags onto the stack.\n\n\nLogContext#leaveScope()\n\n\nLeaves the current scope and thus discards all tags set on this scope. An error is raised if an attempt\nto remove the root scope is made.\n\n\nLogContext#addTag( tag, value )\n\n\nAdds a value for a log tag to the scope entered last, i.e. the one on the top of the stack. If a tag\nis already known for the current scope, the value is appended to the existing one using a \n;\n as\nseparator. Note that no formatting of the value takes place and a non-string value will just have its\nappropriate \ntoString\n method called.\n\n\nParameters\n\n\n\n\n\n\ntag {String}\n: the id of the tag to add a value for\n\n\n\n\n\n\nvalue {String}\n: the value to add\n\n\n\n\n\n\nLogContext#gatherTags()\n\n\nReturns a map of all tags gathered from all scopes. If there are multiple values for the same tag across\ndifferent scopes, their values are concatenated using a \n;\n as separator.\n\n\nReturns\n\n\n\n\n{Object}\n: a mapping from tag to its value(s)", 
            "title": "lib-logging-log_context.md"
        }, 
        {
            "location": "/api/lib/logging/log_context/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/logging/log_context/#logcontext", 
            "text": "A context for a logger instance. Each context manages a stack of scopes where each scope can hold a\ndifferent set of log tags. Initially a context already has one scope on its stack, that cannot be left.\nTrying to do so will lead to an error. Thus each party entering a scope is also responsible for leaving\nthat scope again.", 
            "title": "LogContext()"
        }, 
        {
            "location": "/api/lib/logging/log_context/#logcontextenterscope", 
            "text": "Enters a new scope by pushing a scope object with an empty set of tags onto the stack.", 
            "title": "LogContext#enterScope()"
        }, 
        {
            "location": "/api/lib/logging/log_context/#logcontextleavescope", 
            "text": "Leaves the current scope and thus discards all tags set on this scope. An error is raised if an attempt\nto remove the root scope is made.", 
            "title": "LogContext#leaveScope()"
        }, 
        {
            "location": "/api/lib/logging/log_context/#logcontextaddtag-tag-value", 
            "text": "Adds a value for a log tag to the scope entered last, i.e. the one on the top of the stack. If a tag\nis already known for the current scope, the value is appended to the existing one using a  ;  as\nseparator. Note that no formatting of the value takes place and a non-string value will just have its\nappropriate  toString  method called.", 
            "title": "LogContext#addTag( tag, value )"
        }, 
        {
            "location": "/api/lib/logging/log_context/#parameters", 
            "text": "tag {String} : the id of the tag to add a value for    value {String} : the value to add", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/logging/log_context/#logcontextgathertags", 
            "text": "Returns a map of all tags gathered from all scopes. If there are multiple values for the same tag across\ndifferent scopes, their values are concatenated using a  ;  as separator.", 
            "title": "LogContext#gatherTags()"
        }, 
        {
            "location": "/api/lib/logging/log_context/#returns", 
            "text": "{Object} : a mapping from tag to its value(s)", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/logging/logger/", 
            "text": "Documentation\n\n\nLogger( options )\n\n\nConstructor for a logger.\n\n\nParameters\n\n\n\n\noptions {Object}\n: \n\n\n\n\nLogger#context {LogContext}\n\n\nThe log context of this logger.\n\n\nLogger#log( level, message, replacements )\n\n\nLogs a message. A message may contain placeholders in the form \n[#]\n where \n#\n ressembles the index\nwithin the list of \nreplacements\n. \nreplacements\n are incrementally counted starting at \n0\n. If the\nlog level is below the configured log level the message simply is discarded.\n\n\nParameters\n\n\n\n\n\n\nlevel {Number}\n: the level for this message\n\n\n\n\n\n\nmessage {String}\n: the message to log\n\n\n\n\n\n\nreplacements {...*}\n: objects that should replace placeholders within the message\n\n\n\n\n\n\nLogger#develop( message, replacements )\n\n\nLogs a message in log level \nDEVELOP\n. See {@link #log} for further information.\n\n\nParameters\n\n\n\n\n\n\nmessage {String}\n: the message to log\n\n\n\n\n\n\nreplacements {...*}\n: objects that should replace placeholders within the message\n\n\n\n\n\n\nLogger#data( message, replacements )\n\n\nLogs a message in log level \nDATA\n. See {@link #log} for further information.\n\n\nParameters\n\n\n\n\n\n\nmessage {String}\n: the message to log\n\n\n\n\n\n\nreplacements {...*}\n: objects that should replace placeholders within the message\n\n\n\n\n\n\nLogger#trace( message, replacements )\n\n\nLogs a message in log level \nTRACE\n. See {@link #log} for further information.\n\n\nParameters\n\n\n\n\n\n\nmessage {String}\n: the message to log\n\n\n\n\n\n\nreplacements {...*}\n: objects that should replace placeholders within the message\n\n\n\n\n\n\nLogger#debug( message, replacements )\n\n\nLogs a message in log level \nDEBUG\n. See {@link #log} for further information.\n\n\nParameters\n\n\n\n\n\n\nmessage {String}\n: the message to log\n\n\n\n\n\n\nreplacements {...*}\n: objects that should replace placeholders within the message\n\n\n\n\n\n\nLogger#info( message, replacements )\n\n\nLogs a message in log level \nINFO\n. See {@link #log} for further information.\n\n\nParameters\n\n\n\n\n\n\nmessage {String}\n: the message to log\n\n\n\n\n\n\nreplacements {...*}\n: objects that should replace placeholders within the message\n\n\n\n\n\n\nLogger#warn( message, replacements )\n\n\nLogs a message in log level \nWARN\n. See {@link #log} for further information.\n\n\nParameters\n\n\n\n\n\n\nmessage {String}\n: the message to log\n\n\n\n\n\n\nreplacements {...*}\n: objects that should replace placeholders within the message\n\n\n\n\n\n\nLogger#error( message, replacements )\n\n\nLogs a message in log level \nERROR\n. See {@link #log} for further information.\n\n\nParameters\n\n\n\n\n\n\nmessage {String}\n: the message to log\n\n\n\n\n\n\nreplacements {...*}\n: objects that should replace placeholders within the message\n\n\n\n\n\n\nLogger#fatal( message, replacements )\n\n\nLogs a message in log level \nFATAL\n. See {@link #log} for further information.\n\n\nParameters\n\n\n\n\n\n\nmessage {String}\n: the message to log\n\n\n\n\n\n\nreplacements {...*}\n: objects that should replace placeholders within the message\n\n\n\n\n\n\nLogger#statistics( message, replacements )\n\n\nLogs a message in log level \nSTATISTICS\n. See {@link #log} for further information.\n\n\nParameters\n\n\n\n\n\n\nmessage {String}\n: the message to log\n\n\n\n\n\n\nreplacements {...*}\n: objects that should replace placeholders within the message\n\n\n\n\n\n\nLogger#account( message, replacements )\n\n\nLogs a message in log level \nACCOUNT\n. See {@link #log} for further information.\n\n\nParameters\n\n\n\n\n\n\nmessage {String}\n: the message to log\n\n\n\n\n\n\nreplacements {...*}\n: objects that should replace placeholders within the message\n\n\n\n\n\n\nLogger#audit( message, replacements )\n\n\nLogs a message in log level \nAUDIT\n. See {@link #log} for further information.\n\n\nParameters\n\n\n\n\n\n\nmessage {String}\n: the message to log\n\n\n\n\n\n\nreplacements {...*}\n: objects that should replace placeholders within the message\n\n\n\n\n\n\nLogger#addLogChannel( channel )\n\n\nAdds a new channel to forward log messages to. A channel is called synchronously for every log message\nand is responsible to trigger something asynchronously itself if necessary. Each message is an object\nhaving the following properties:\n\n\n\n\nid\n: a unique, incremented id of the log message\n\n\nlevel\n: the log level of the message in string representation\n\n\ntext\n: the actual message that was logged\n\n\nreplacements\n: the raw list of replacements passed along the message\n\n\ntime\n: JavaScript Date instance when the message was logged\n\n\ntags\n: A map of all log tags currently set on the logger's scope\n\n\nsourceInfo\n: if supported, a map containing \nfile\n, \nline\n and \nchar\n where the logging took place\n\n\n\n\nParameters\n\n\n\n\nchannel {Function}\n: the log channel to add\n\n\n\n\nLogger#removeLogChannel( channel )\n\n\nRemoves a log channel and thus stops sending further messages to it.\n\n\nParameters\n\n\n\n\nchannel {Function}\n: the log channel to remove\n\n\n\n\nLogger#setLogThreshold( threshold )\n\n\nSets the threshold for log messages. Log messages with a lower level will be discarded upon logging.\n\n\nParameters\n\n\n\n\nthreshold {String|Number}\n: the numeric or the string value of the log level to use as threshold", 
            "title": "lib-logging-logger.md"
        }, 
        {
            "location": "/api/lib/logging/logger/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/logging/logger/#logger-options", 
            "text": "Constructor for a logger.", 
            "title": "Logger( options )"
        }, 
        {
            "location": "/api/lib/logging/logger/#parameters", 
            "text": "options {Object} :", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/logging/logger/#loggercontext-logcontext", 
            "text": "The log context of this logger.", 
            "title": "Logger#context {LogContext}"
        }, 
        {
            "location": "/api/lib/logging/logger/#loggerlog-level-message-replacements", 
            "text": "Logs a message. A message may contain placeholders in the form  [#]  where  #  ressembles the index\nwithin the list of  replacements .  replacements  are incrementally counted starting at  0 . If the\nlog level is below the configured log level the message simply is discarded.", 
            "title": "Logger#log( level, message, replacements )"
        }, 
        {
            "location": "/api/lib/logging/logger/#parameters_1", 
            "text": "level {Number} : the level for this message    message {String} : the message to log    replacements {...*} : objects that should replace placeholders within the message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/logging/logger/#loggerdevelop-message-replacements", 
            "text": "Logs a message in log level  DEVELOP . See {@link #log} for further information.", 
            "title": "Logger#develop( message, replacements )"
        }, 
        {
            "location": "/api/lib/logging/logger/#parameters_2", 
            "text": "message {String} : the message to log    replacements {...*} : objects that should replace placeholders within the message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/logging/logger/#loggerdata-message-replacements", 
            "text": "Logs a message in log level  DATA . See {@link #log} for further information.", 
            "title": "Logger#data( message, replacements )"
        }, 
        {
            "location": "/api/lib/logging/logger/#parameters_3", 
            "text": "message {String} : the message to log    replacements {...*} : objects that should replace placeholders within the message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/logging/logger/#loggertrace-message-replacements", 
            "text": "Logs a message in log level  TRACE . See {@link #log} for further information.", 
            "title": "Logger#trace( message, replacements )"
        }, 
        {
            "location": "/api/lib/logging/logger/#parameters_4", 
            "text": "message {String} : the message to log    replacements {...*} : objects that should replace placeholders within the message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/logging/logger/#loggerdebug-message-replacements", 
            "text": "Logs a message in log level  DEBUG . See {@link #log} for further information.", 
            "title": "Logger#debug( message, replacements )"
        }, 
        {
            "location": "/api/lib/logging/logger/#parameters_5", 
            "text": "message {String} : the message to log    replacements {...*} : objects that should replace placeholders within the message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/logging/logger/#loggerinfo-message-replacements", 
            "text": "Logs a message in log level  INFO . See {@link #log} for further information.", 
            "title": "Logger#info( message, replacements )"
        }, 
        {
            "location": "/api/lib/logging/logger/#parameters_6", 
            "text": "message {String} : the message to log    replacements {...*} : objects that should replace placeholders within the message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/logging/logger/#loggerwarn-message-replacements", 
            "text": "Logs a message in log level  WARN . See {@link #log} for further information.", 
            "title": "Logger#warn( message, replacements )"
        }, 
        {
            "location": "/api/lib/logging/logger/#parameters_7", 
            "text": "message {String} : the message to log    replacements {...*} : objects that should replace placeholders within the message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/logging/logger/#loggererror-message-replacements", 
            "text": "Logs a message in log level  ERROR . See {@link #log} for further information.", 
            "title": "Logger#error( message, replacements )"
        }, 
        {
            "location": "/api/lib/logging/logger/#parameters_8", 
            "text": "message {String} : the message to log    replacements {...*} : objects that should replace placeholders within the message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/logging/logger/#loggerfatal-message-replacements", 
            "text": "Logs a message in log level  FATAL . See {@link #log} for further information.", 
            "title": "Logger#fatal( message, replacements )"
        }, 
        {
            "location": "/api/lib/logging/logger/#parameters_9", 
            "text": "message {String} : the message to log    replacements {...*} : objects that should replace placeholders within the message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/logging/logger/#loggerstatistics-message-replacements", 
            "text": "Logs a message in log level  STATISTICS . See {@link #log} for further information.", 
            "title": "Logger#statistics( message, replacements )"
        }, 
        {
            "location": "/api/lib/logging/logger/#parameters_10", 
            "text": "message {String} : the message to log    replacements {...*} : objects that should replace placeholders within the message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/logging/logger/#loggeraccount-message-replacements", 
            "text": "Logs a message in log level  ACCOUNT . See {@link #log} for further information.", 
            "title": "Logger#account( message, replacements )"
        }, 
        {
            "location": "/api/lib/logging/logger/#parameters_11", 
            "text": "message {String} : the message to log    replacements {...*} : objects that should replace placeholders within the message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/logging/logger/#loggeraudit-message-replacements", 
            "text": "Logs a message in log level  AUDIT . See {@link #log} for further information.", 
            "title": "Logger#audit( message, replacements )"
        }, 
        {
            "location": "/api/lib/logging/logger/#parameters_12", 
            "text": "message {String} : the message to log    replacements {...*} : objects that should replace placeholders within the message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/logging/logger/#loggeraddlogchannel-channel", 
            "text": "Adds a new channel to forward log messages to. A channel is called synchronously for every log message\nand is responsible to trigger something asynchronously itself if necessary. Each message is an object\nhaving the following properties:   id : a unique, incremented id of the log message  level : the log level of the message in string representation  text : the actual message that was logged  replacements : the raw list of replacements passed along the message  time : JavaScript Date instance when the message was logged  tags : A map of all log tags currently set on the logger's scope  sourceInfo : if supported, a map containing  file ,  line  and  char  where the logging took place", 
            "title": "Logger#addLogChannel( channel )"
        }, 
        {
            "location": "/api/lib/logging/logger/#parameters_13", 
            "text": "channel {Function} : the log channel to add", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/logging/logger/#loggerremovelogchannel-channel", 
            "text": "Removes a log channel and thus stops sending further messages to it.", 
            "title": "Logger#removeLogChannel( channel )"
        }, 
        {
            "location": "/api/lib/logging/logger/#parameters_14", 
            "text": "channel {Function} : the log channel to remove", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/logging/logger/#loggersetlogthreshold-threshold", 
            "text": "Sets the threshold for log messages. Log messages with a lower level will be discarded upon logging.", 
            "title": "Logger#setLogThreshold( threshold )"
        }, 
        {
            "location": "/api/lib/logging/logger/#parameters_15", 
            "text": "threshold {String|Number} : the numeric or the string value of the log level to use as threshold", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/testing/http_mock/", 
            "text": "Documentation\n\n\nHttpMock( q )\n\n\nA http client mock for unit tests. All mocked http methods (like e.g. \nget\n, \npost\n or \nput\n) are being\nspied on.\n\n\nParameters\n\n\n\n\nq {$q}\n: a promise library conforming to AngularJS's \n$q\n\n\n\n\nHttpMock#history {Array}\n\n\nA list of all http activities that took place so far. Each entry is a string consisting of the http\nmethod, a boolean flag indicating whether the request could be handled successfully, the requested\nurl and the time stamp of the request. Use this for debugging purposes in your test case only.\n\n\nHttpMock#responseMap {Object}\n\n\nA map of http methods to maps of urls to the mocked response objects.\n\n\nHttpMock#reset()\n\n\nResets the http mock by deleting all response mocks and the history recorded so far.\n\n\nHttpMock#setHttpResponse( method, uri, response )\n\n\nSets a new mocked http response. If a response for the given method / uri combination already exists,\nit will be overwritten. If \nresponse\n is \nnull\n, the entry is deleted. Use this method instead of\n\nrespondWith\n, if a more sophisticated response should be simulated or failed requests using a status\ncode of \n404\n for example.\n\n\nParameters\n\n\n\n\n\n\nmethod {String}\n: the http method to mock\n\n\n\n\n\n\nuri {String}\n: the uri to mock the response for\n\n\n\n\n\n\nresponse {Object}\n: the response object, probably with \nstatus\n, \ndata\n and \nheaders\n fields\n\n\n\n\n\n\nHttpMock#respondWith( [optionalMethod], uri, data )\n\n\nSets a response for a status code of \n200\n without any headers. Thus only the \ndata\n field must be\ngiven for the response. If \ndata\n is \nnull\n, the entry is deleted.\n\n\nParameters\n\n\n\n\n\n\noptionalMethod\n {String}\n: the http method to use. If omitted, \nGET\n is assumed\n\n\n\n\n\n\nuri {String}\n: the uri to mock the response for\n\n\n\n\n\n\ndata {Object}\n: the payload of the response", 
            "title": "lib-testing-http_mock.md"
        }, 
        {
            "location": "/api/lib/testing/http_mock/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/testing/http_mock/#httpmock-q", 
            "text": "A http client mock for unit tests. All mocked http methods (like e.g.  get ,  post  or  put ) are being\nspied on.", 
            "title": "HttpMock( q )"
        }, 
        {
            "location": "/api/lib/testing/http_mock/#parameters", 
            "text": "q {$q} : a promise library conforming to AngularJS's  $q", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/testing/http_mock/#httpmockhistory-array", 
            "text": "A list of all http activities that took place so far. Each entry is a string consisting of the http\nmethod, a boolean flag indicating whether the request could be handled successfully, the requested\nurl and the time stamp of the request. Use this for debugging purposes in your test case only.", 
            "title": "HttpMock#history {Array}"
        }, 
        {
            "location": "/api/lib/testing/http_mock/#httpmockresponsemap-object", 
            "text": "A map of http methods to maps of urls to the mocked response objects.", 
            "title": "HttpMock#responseMap {Object}"
        }, 
        {
            "location": "/api/lib/testing/http_mock/#httpmockreset", 
            "text": "Resets the http mock by deleting all response mocks and the history recorded so far.", 
            "title": "HttpMock#reset()"
        }, 
        {
            "location": "/api/lib/testing/http_mock/#httpmocksethttpresponse-method-uri-response", 
            "text": "Sets a new mocked http response. If a response for the given method / uri combination already exists,\nit will be overwritten. If  response  is  null , the entry is deleted. Use this method instead of respondWith , if a more sophisticated response should be simulated or failed requests using a status\ncode of  404  for example.", 
            "title": "HttpMock#setHttpResponse( method, uri, response )"
        }, 
        {
            "location": "/api/lib/testing/http_mock/#parameters_1", 
            "text": "method {String} : the http method to mock    uri {String} : the uri to mock the response for    response {Object} : the response object, probably with  status ,  data  and  headers  fields", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/testing/http_mock/#httpmockrespondwith-optionalmethod-uri-data", 
            "text": "Sets a response for a status code of  200  without any headers. Thus only the  data  field must be\ngiven for the response. If  data  is  null , the entry is deleted.", 
            "title": "HttpMock#respondWith( [optionalMethod], uri, data )"
        }, 
        {
            "location": "/api/lib/testing/http_mock/#parameters_2", 
            "text": "optionalMethod  {String} : the http method to use. If omitted,  GET  is assumed    uri {String} : the uri to mock the response for    data {Object} : the payload of the response", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/testing/jquery_mock/", 
            "text": "Documentation\n\n\nfunction Object() { [native code] }#mockResult( method, selectorOrElement, result )\n\n\nMocks the result to a jQuery method call. The mocked result is only returned if \nselectorOrElement\n\nmatches either the selector or the DOM element the jQuery object was created with.\n\n\nParameters\n\n\n\n\n\n\nmethod {String}\n: name of the method to mock the result for\n\n\n\n\n\n\nselectorOrElement {String|HTMLElement}\n: the selector or DOM element for which the mocked result is returned\n\n\n\n\n\n\nresult {*}\n: the mocked result\n\n\n\n\n\n\nfunction Object() { [native code] }#mockMethod( method, selectorOrElement, mockMethod )\n\n\nMocks the call to a jQuery method. The mock method is only called if \nselectorOrElement\n matches either\nthe selector or the DOM element the jQuery object was created with.\n\n\nParameters\n\n\n\n\n\n\nmethod {String}\n: name of the method to mock the result for\n\n\n\n\n\n\nselectorOrElement {String|HTMLElement}\n: the selector or DOM element for which the mocked result is returned\n\n\n\n\n\n\nmockMethod {Function}\n: the function to call instead of the original one\n\n\n\n\n\n\nfunction Object() { [native code] }#mockReset()\n\n\nRemoves all mocked methods and results from jQuery and reattaches the original implementations.", 
            "title": "lib-testing-jquery_mock.md"
        }, 
        {
            "location": "/api/lib/testing/jquery_mock/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/testing/jquery_mock/#function-object-native-code-mockresult-method-selectororelement-result", 
            "text": "Mocks the result to a jQuery method call. The mocked result is only returned if  selectorOrElement \nmatches either the selector or the DOM element the jQuery object was created with.", 
            "title": "function Object() { [native code] }#mockResult( method, selectorOrElement, result )"
        }, 
        {
            "location": "/api/lib/testing/jquery_mock/#parameters", 
            "text": "method {String} : name of the method to mock the result for    selectorOrElement {String|HTMLElement} : the selector or DOM element for which the mocked result is returned    result {*} : the mocked result", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/testing/jquery_mock/#function-object-native-code-mockmethod-method-selectororelement-mockmethod", 
            "text": "Mocks the call to a jQuery method. The mock method is only called if  selectorOrElement  matches either\nthe selector or the DOM element the jQuery object was created with.", 
            "title": "function Object() { [native code] }#mockMethod( method, selectorOrElement, mockMethod )"
        }, 
        {
            "location": "/api/lib/testing/jquery_mock/#parameters_1", 
            "text": "method {String} : name of the method to mock the result for    selectorOrElement {String|HTMLElement} : the selector or DOM element for which the mocked result is returned    mockMethod {Function} : the function to call instead of the original one", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/testing/jquery_mock/#function-object-native-code-mockreset", 
            "text": "Removes all mocked methods and results from jQuery and reattaches the original implementations.", 
            "title": "function Object() { [native code] }#mockReset()"
        }, 
        {
            "location": "/api/lib/testing/matchers/", 
            "text": "Documentation\n\n\nshint validthis:true", 
            "title": "lib-testing-matchers.md"
        }, 
        {
            "location": "/api/lib/testing/matchers/#documentation", 
            "text": "shint validthis:true", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/testing/portal_mocks/", 
            "text": "Documentation", 
            "title": "lib-testing-portal_mocks.md"
        }, 
        {
            "location": "/api/lib/testing/portal_mocks/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/testing/portal_mocks_angular/", 
            "text": "Documentation", 
            "title": "lib-testing-portal_mocks_angular.md"
        }, 
        {
            "location": "/api/lib/testing/portal_mocks_angular/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/testing/run_spec/", 
            "text": "Documentation", 
            "title": "lib-testing-run_spec.md"
        }, 
        {
            "location": "/api/lib/testing/run_spec/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/testing/testing/", 
            "text": "Documentation", 
            "title": "lib-testing-testing.md"
        }, 
        {
            "location": "/api/lib/testing/testing/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/utilities/array/", 
            "text": "Documentation\n\n\nremove( array, item )\n\n\nRemoves the first occurrence of \nitem\n in \narray\n from \narray\n and returns \ntrue\n if \nitem\n was\nremoved, or \nfalse\n if it wasn't\n\n\nParameters\n\n\n\n\n\n\narray {Array}\n: the array from which to remove the \nitem\n\n\n\n\n\n\nitem {Object}\n: the item to remove from \narray\n\n\n\n\n\n\nReturns\n\n\n\n\n{Boolean}\n: \ntrue\n if item was removed, \nfalse\n otherwise\n\n\n\n\nremoveAll( array, item )\n\n\nRemoves all occurrences of \nitem\n in \narray\n from \narray\n and returns \ntrue\n if at least one item was\nremoved, or \nfalse\n otherwise.\n\n\nParameters\n\n\n\n\n\n\narray {Array}\n: the array from which to remove the \nitem\n\n\n\n\n\n\nitem {Object}\n: the item to remove from \narray\n\n\n\n\n\n\nReturns\n\n\n\n\n{Boolean}\n: \ntrue\n if at least one item was removed, \nfalse\n otherwise", 
            "title": "lib-utilities-array.md"
        }, 
        {
            "location": "/api/lib/utilities/array/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/utilities/array/#remove-array-item", 
            "text": "Removes the first occurrence of  item  in  array  from  array  and returns  true  if  item  was\nremoved, or  false  if it wasn't", 
            "title": "remove( array, item )"
        }, 
        {
            "location": "/api/lib/utilities/array/#parameters", 
            "text": "array {Array} : the array from which to remove the  item    item {Object} : the item to remove from  array", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/array/#returns", 
            "text": "{Boolean} :  true  if item was removed,  false  otherwise", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/utilities/array/#removeall-array-item", 
            "text": "Removes all occurrences of  item  in  array  from  array  and returns  true  if at least one item was\nremoved, or  false  otherwise.", 
            "title": "removeAll( array, item )"
        }, 
        {
            "location": "/api/lib/utilities/array/#parameters_1", 
            "text": "array {Array} : the array from which to remove the  item    item {Object} : the item to remove from  array", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/array/#returns_1", 
            "text": "{Boolean} :  true  if at least one item was removed,  false  otherwise", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/utilities/assert/", 
            "text": "Documentation\n\n\nAssertion( subject, [optionalDetails] )\n\n\nConstructor for Assert.\n\n\nParameters\n\n\n\n\n\n\nsubject {*}\n: the object assertions are made for\n\n\n\n\n\n\noptionalDetails\n {String}\n: details that should be printed whenever no details are given for an assertion method\n\n\n\n\n\n\nAssertion#isNotNull( [optionalDetails] )\n\n\nThrows an error if the subject is \nnull\n or \nundefined\n.\n\n\nParameters\n\n\n\n\noptionalDetails\n {String}\n: details to append to the error message\n\n\n\n\nReturns\n\n\n\n\n{Assertion}\n: this instance\n\n\n\n\nAssertion#hasType( type, [optionalDetails] )\n\n\nThrows an error if the subject is not of the given type. No error is thrown for \nnull\n or \nundefined\n.\n\n\nParameters\n\n\n\n\n\n\ntype {Function}\n: the expected type of the subject\n\n\n\n\n\n\noptionalDetails\n {String}\n: details to append to the error message\n\n\n\n\n\n\nReturns\n\n\n\n\n{Assertion}\n: this instance\n\n\n\n\nAssertion#hasProperty( property, [optionalDetails] )\n\n\nThrows an error if the subject is no object or the given property is not defined on it.\n\n\nParameters\n\n\n\n\n\n\nproperty {String}\n: the property that is expected for the subject\n\n\n\n\n\n\noptionalDetails\n {String}\n: details to append to the error message\n\n\n\n\n\n\nReturns\n\n\n\n\n{Assertion}\n: this instance\n\n\n\n\nassert( subject, [optionalDetails] )\n\n\nCreates and returns a mew \nAssertion\n instance for the given \nsubject\n.\n\n\nParameters\n\n\n\n\n\n\nsubject {*}\n: the object assertions are made for\n\n\n\n\n\n\noptionalDetails\n {String}\n: details that should be printed whenever no details are given for an assertion method\n\n\n\n\n\n\nReturns\n\n\n\n\n{Assertion}\n: the assertion instance\n\n\n\n\nfunction Object() { [native code] }#codeIsUnreachable( [optionalDetails] )\n\n\nMarks a code path as erroneous if reached by throwing an error.\n\n\nParameters\n\n\n\n\noptionalDetails\n {String}\n: details to append to the error message\n\n\n\n\nfunction Object() { [native code] }#state( expression, [optionalDetails] )\n\n\nThrows an error if the given expression is falsy.\n\n\nParameters\n\n\n\n\n\n\nexpression {*}\n: the expression to test for truthyness\n\n\n\n\n\n\noptionalDetails\n {String}\n: details to append to the error message", 
            "title": "lib-utilities-assert.md"
        }, 
        {
            "location": "/api/lib/utilities/assert/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/utilities/assert/#assertion-subject-optionaldetails", 
            "text": "Constructor for Assert.", 
            "title": "Assertion( subject, [optionalDetails] )"
        }, 
        {
            "location": "/api/lib/utilities/assert/#parameters", 
            "text": "subject {*} : the object assertions are made for    optionalDetails  {String} : details that should be printed whenever no details are given for an assertion method", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/assert/#assertionisnotnull-optionaldetails", 
            "text": "Throws an error if the subject is  null  or  undefined .", 
            "title": "Assertion#isNotNull( [optionalDetails] )"
        }, 
        {
            "location": "/api/lib/utilities/assert/#parameters_1", 
            "text": "optionalDetails  {String} : details to append to the error message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/assert/#returns", 
            "text": "{Assertion} : this instance", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/utilities/assert/#assertionhastype-type-optionaldetails", 
            "text": "Throws an error if the subject is not of the given type. No error is thrown for  null  or  undefined .", 
            "title": "Assertion#hasType( type, [optionalDetails] )"
        }, 
        {
            "location": "/api/lib/utilities/assert/#parameters_2", 
            "text": "type {Function} : the expected type of the subject    optionalDetails  {String} : details to append to the error message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/assert/#returns_1", 
            "text": "{Assertion} : this instance", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/utilities/assert/#assertionhasproperty-property-optionaldetails", 
            "text": "Throws an error if the subject is no object or the given property is not defined on it.", 
            "title": "Assertion#hasProperty( property, [optionalDetails] )"
        }, 
        {
            "location": "/api/lib/utilities/assert/#parameters_3", 
            "text": "property {String} : the property that is expected for the subject    optionalDetails  {String} : details to append to the error message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/assert/#returns_2", 
            "text": "{Assertion} : this instance", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/utilities/assert/#assert-subject-optionaldetails", 
            "text": "Creates and returns a mew  Assertion  instance for the given  subject .", 
            "title": "assert( subject, [optionalDetails] )"
        }, 
        {
            "location": "/api/lib/utilities/assert/#parameters_4", 
            "text": "subject {*} : the object assertions are made for    optionalDetails  {String} : details that should be printed whenever no details are given for an assertion method", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/assert/#returns_3", 
            "text": "{Assertion} : the assertion instance", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/utilities/assert/#function-object-native-code-codeisunreachable-optionaldetails", 
            "text": "Marks a code path as erroneous if reached by throwing an error.", 
            "title": "function Object() { [native code] }#codeIsUnreachable( [optionalDetails] )"
        }, 
        {
            "location": "/api/lib/utilities/assert/#parameters_5", 
            "text": "optionalDetails  {String} : details to append to the error message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/assert/#function-object-native-code-state-expression-optionaldetails", 
            "text": "Throws an error if the given expression is falsy.", 
            "title": "function Object() { [native code] }#state( expression, [optionalDetails] )"
        }, 
        {
            "location": "/api/lib/utilities/assert/#parameters_6", 
            "text": "expression {*} : the expression to test for truthyness    optionalDetails  {String} : details to append to the error message", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/object/", 
            "text": "Documentation\n\n\nextend( target, sources )\n\n\nCopies the properties from a set of source object over to the target object. Properties of sources\nlater in the arguments list overwrite existing in the target and earlier source objects.\n\n\nParameters\n\n\n\n\n\n\ntarget {Object}\n: the target object to modify\n\n\n\n\n\n\nsources {...Object}\n: the source objects to copy over\n\n\n\n\n\n\nReturns\n\n\n\n\n{Object}\n: the modified target object\n\n\n\n\noptions( options, defaults )\n\n\nReturns all properties from \noptions\n with missing properties completed from \ndefaults\n. If \noptions\n\nis \nnull\n or \nundefined\n, an empty object is automatically created. \noptions\n and \ndefaults\n are not\nmodified.\n\n\nExample:\n\n\nobject\n.\noptions\n(\n \n{\n \nvalidate\n:\n \ntrue\n \n},\n \n{\n\n   \nvalidate\n:\n \nfalse\n,\n\n   \nhighlight\n:\n \ntrue\n\n\n}\n \n);\n\n\n// =\n\n\n// {\n\n\n//    validate: true,\n\n\n//    highlight: true\n\n\n// }\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\noptions {Object}\n: the options object to use as source, may be \nnull\n or \nundefined\n\n\n\n\n\n\ndefaults {Object}\n: the defaults to take missing properties from\n\n\n\n\n\n\nReturns\n\n\n\n\n{Object}\n: the completed options object\n\n\n\n\nmap( object, mappingFunction )\n\n\nApplies a given function to each entry in the object and returns a new objects reflecting the changes\nmade by the mapping function. On each iteration the mapping function is passed the \nvalue\n, the \nkey\n\nand the complete \nobject\n as arguments. It then must return an array where the first item is the new\nkey and the second item the new value for the resulting object.\n\n\nExample:\n\n\nobject\n.\nmap\n(\n \n{\n \nx\n:\n \n1\n,\n \ny\n:\n \n2\n \n}\n \n,\n \nfunction\n(\n \nvalue\n,\n \nkey\n \n)\n \n{\n\n   \nreturn\n \n[\n \nkey\n,\n \nvalue\n \n+\n \n1\n \n];\n\n\n}\n \n);\n\n\n// =\n { x: 2, y: 3 }\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\nobject {Object}\n: the object to run the mapping function on\n\n\n\n\n\n\nmappingFunction {Function}\n: the mapping function to run on each key-value pair\n\n\n\n\n\n\nReturns\n\n\n\n\n{Object}\n: a new object reflecting the results of the mapping\n\n\n\n\nforEach( object, iteratorFunction )\n\n\nIterates over the keys of an object and calls the given iterator function for each entry. On each\niteration the iterator function is passed the \nvalue\n, the \nkey\n and the complete \nobject\n as\narguments. If \nobject\n is an array, the native \nArray.prototype.forEach\n function is called and hence\nthe keys are the numeric indices of the array.\n\n\nParameters\n\n\n\n\n\n\nobject {Object}\n: the object to run the iterator function on\n\n\n\n\n\n\niteratorFunction {Function}\n: the iterator function to run on each key-value pair\n\n\n\n\n\n\npath( obj, path, [optionalDefault] )\n\n\nFinds a property in a nested object structure by a given path. A path is a string of keys, separated\nby a dot from each other, used to traverse that object and find the value of interest. An additional\ndefault is returned, if otherwise the value would yield \nundefined\n.\n\n\nParameters\n\n\n\n\n\n\nobj {Object}\n: the object to traverse\n\n\n\n\n\n\npath {String}\n: the path to search for\n\n\n\n\n\n\noptionalDefault\n {*}\n: the value to return instead of \nundefined\n if nothing is found\n\n\n\n\n\n\nReturns\n\n\n\n\n{*}\n: the value at the given path\n\n\n\n\nsetPath( obj, path, value )\n\n\nSets a property in a nested object structure at a given path to a given value. A path is a string of\nkeys, separated by a dot from each other, used to traverse that object and find the place where the\nvalue should be set. Any missing subtrees along the path are created.\n\n\nParameters\n\n\n\n\n\n\nobj {Object}\n: the object to modify\n\n\n\n\n\n\npath {String}\n: the path to set a value at\n\n\n\n\n\n\nvalue {*}\n: the value to set at the given path\n\n\n\n\n\n\nReturns\n\n\n\n\n{*}\n: the full object (for chaining)\n\n\n\n\ndeepClone( obj )\n\n\nReturns a deep clone of the given object. Note that the current implementation is intended to be\nused for simple object literals only. There is no guarantee that cloning objects instantiated via\nconstructor function works and cyclic references will lead to endless recursion.\n\n\nParameters\n\n\n\n\nobj {*}\n: the object to clone\n\n\n\n\nReturns\n\n\n\n\n{*}\n: the clone\n\n\n\n\ndeepFreeze( obj, [optionalRecursive] )\n\n\nFreezes an object, optionally recursively, in any browser capable of freezing objects. In any other\nbrowser this method simply returns its first value, i.e. is an identity operation.\n\n\nParameters\n\n\n\n\n\n\nobj {Object}\n: the object to freeze\n\n\n\n\n\n\noptionalRecursive\n {Boolean}\n: freezes recursively if \ntrue\n. Default is \nfalse\n\n\n\n\n\n\nReturns\n\n\n\n\n{Object}\n: the input (possibly) frozen", 
            "title": "lib-utilities-object.md"
        }, 
        {
            "location": "/api/lib/utilities/object/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/utilities/object/#extend-target-sources", 
            "text": "Copies the properties from a set of source object over to the target object. Properties of sources\nlater in the arguments list overwrite existing in the target and earlier source objects.", 
            "title": "extend( target, sources )"
        }, 
        {
            "location": "/api/lib/utilities/object/#parameters", 
            "text": "target {Object} : the target object to modify    sources {...Object} : the source objects to copy over", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/object/#returns", 
            "text": "{Object} : the modified target object", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/utilities/object/#options-options-defaults", 
            "text": "Returns all properties from  options  with missing properties completed from  defaults . If  options \nis  null  or  undefined , an empty object is automatically created.  options  and  defaults  are not\nmodified.  Example:  object . options (   {   validate :   true   },   { \n    validate :   false , \n    highlight :   true  }   );  // =  // {  //    validate: true,  //    highlight: true  // }", 
            "title": "options( options, defaults )"
        }, 
        {
            "location": "/api/lib/utilities/object/#parameters_1", 
            "text": "options {Object} : the options object to use as source, may be  null  or  undefined    defaults {Object} : the defaults to take missing properties from", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/object/#returns_1", 
            "text": "{Object} : the completed options object", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/utilities/object/#map-object-mappingfunction", 
            "text": "Applies a given function to each entry in the object and returns a new objects reflecting the changes\nmade by the mapping function. On each iteration the mapping function is passed the  value , the  key \nand the complete  object  as arguments. It then must return an array where the first item is the new\nkey and the second item the new value for the resulting object.  Example:  object . map (   {   x :   1 ,   y :   2   }   ,   function (   value ,   key   )   { \n    return   [   key ,   value   +   1   ];  }   );  // =  { x: 2, y: 3 }", 
            "title": "map( object, mappingFunction )"
        }, 
        {
            "location": "/api/lib/utilities/object/#parameters_2", 
            "text": "object {Object} : the object to run the mapping function on    mappingFunction {Function} : the mapping function to run on each key-value pair", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/object/#returns_2", 
            "text": "{Object} : a new object reflecting the results of the mapping", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/utilities/object/#foreach-object-iteratorfunction", 
            "text": "Iterates over the keys of an object and calls the given iterator function for each entry. On each\niteration the iterator function is passed the  value , the  key  and the complete  object  as\narguments. If  object  is an array, the native  Array.prototype.forEach  function is called and hence\nthe keys are the numeric indices of the array.", 
            "title": "forEach( object, iteratorFunction )"
        }, 
        {
            "location": "/api/lib/utilities/object/#parameters_3", 
            "text": "object {Object} : the object to run the iterator function on    iteratorFunction {Function} : the iterator function to run on each key-value pair", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/object/#path-obj-path-optionaldefault", 
            "text": "Finds a property in a nested object structure by a given path. A path is a string of keys, separated\nby a dot from each other, used to traverse that object and find the value of interest. An additional\ndefault is returned, if otherwise the value would yield  undefined .", 
            "title": "path( obj, path, [optionalDefault] )"
        }, 
        {
            "location": "/api/lib/utilities/object/#parameters_4", 
            "text": "obj {Object} : the object to traverse    path {String} : the path to search for    optionalDefault  {*} : the value to return instead of  undefined  if nothing is found", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/object/#returns_3", 
            "text": "{*} : the value at the given path", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/utilities/object/#setpath-obj-path-value", 
            "text": "Sets a property in a nested object structure at a given path to a given value. A path is a string of\nkeys, separated by a dot from each other, used to traverse that object and find the place where the\nvalue should be set. Any missing subtrees along the path are created.", 
            "title": "setPath( obj, path, value )"
        }, 
        {
            "location": "/api/lib/utilities/object/#parameters_5", 
            "text": "obj {Object} : the object to modify    path {String} : the path to set a value at    value {*} : the value to set at the given path", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/object/#returns_4", 
            "text": "{*} : the full object (for chaining)", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/utilities/object/#deepclone-obj", 
            "text": "Returns a deep clone of the given object. Note that the current implementation is intended to be\nused for simple object literals only. There is no guarantee that cloning objects instantiated via\nconstructor function works and cyclic references will lead to endless recursion.", 
            "title": "deepClone( obj )"
        }, 
        {
            "location": "/api/lib/utilities/object/#parameters_6", 
            "text": "obj {*} : the object to clone", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/object/#returns_5", 
            "text": "{*} : the clone", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/utilities/object/#deepfreeze-obj-optionalrecursive", 
            "text": "Freezes an object, optionally recursively, in any browser capable of freezing objects. In any other\nbrowser this method simply returns its first value, i.e. is an identity operation.", 
            "title": "deepFreeze( obj, [optionalRecursive] )"
        }, 
        {
            "location": "/api/lib/utilities/object/#parameters_7", 
            "text": "obj {Object} : the object to freeze    optionalRecursive  {Boolean} : freezes recursively if  true . Default is  false", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/object/#returns_6", 
            "text": "{Object} : the input (possibly) frozen", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/utilities/path/", 
            "text": "Documentation\n\n\njoin( fragments )\n\n\nJoins multiple path fragments into one normalized path. Absolute paths (paths starting with a \n/\n)\nand URLs will \"override\" any preceding paths. I.e. joining a URL or an absolute path to \nanything\n\nwill give the URL or absolute path.\n\n\nParameters\n\n\n\n\nfragments {...String}\n: the path fragments to join\n\n\n\n\nReturns\n\n\n\n\n{String}\n: the joined path\n\n\n\n\nnormalize( path )\n\n\nNormalizes a path. Removes multiple consecutive slashes, strips trailing slashes, removes \n.\n\nreferences and resolves \n..\n references (unless there are no preceding directories).\n\n\nParameters\n\n\n\n\npath {String}\n: the path to normalize\n\n\n\n\nReturns\n\n\n\n\n{String}\n: the normalized path\n\n\n\n\nrelative( from, path )\n\n\nCompute a relative path. Takes two absolute paths and returns a normalized path, relative to\nthe first path.\nNote that if both paths are URLs they are threated as if they were on the same host. I.e. this function\ndoes not complain when called with \nhttp://localhost/path\n and \nhttp://example.com/another/path\n.\n\n\nParameters\n\n\n\n\n\n\nfrom {String}\n: the starting point from which to determine the relative path\n\n\n\n\n\n\npath {String}\n: the target path\n\n\n\n\n\n\nReturns\n\n\n\n\n{String}\n: the relative path from \nfrom\n to \nto", 
            "title": "lib-utilities-path.md"
        }, 
        {
            "location": "/api/lib/utilities/path/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/utilities/path/#join-fragments", 
            "text": "Joins multiple path fragments into one normalized path. Absolute paths (paths starting with a  / )\nand URLs will \"override\" any preceding paths. I.e. joining a URL or an absolute path to  anything \nwill give the URL or absolute path.", 
            "title": "join( fragments )"
        }, 
        {
            "location": "/api/lib/utilities/path/#parameters", 
            "text": "fragments {...String} : the path fragments to join", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/path/#returns", 
            "text": "{String} : the joined path", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/utilities/path/#normalize-path", 
            "text": "Normalizes a path. Removes multiple consecutive slashes, strips trailing slashes, removes  . \nreferences and resolves  ..  references (unless there are no preceding directories).", 
            "title": "normalize( path )"
        }, 
        {
            "location": "/api/lib/utilities/path/#parameters_1", 
            "text": "path {String} : the path to normalize", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/path/#returns_1", 
            "text": "{String} : the normalized path", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/utilities/path/#relative-from-path", 
            "text": "Compute a relative path. Takes two absolute paths and returns a normalized path, relative to\nthe first path.\nNote that if both paths are URLs they are threated as if they were on the same host. I.e. this function\ndoes not complain when called with  http://localhost/path  and  http://example.com/another/path .", 
            "title": "relative( from, path )"
        }, 
        {
            "location": "/api/lib/utilities/path/#parameters_2", 
            "text": "from {String} : the starting point from which to determine the relative path    path {String} : the target path", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/path/#returns_2", 
            "text": "{String} : the relative path from  from  to  to", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/utilities/storage/", 
            "text": "Documentation\n\n\nStorage( backend, namespace )\n\n\nWrapper for \nwindow.localStorage\n or \nwindow.sessionStorage\n providing a more convenient api. In fact it\nprovides a K/V store where values can be any \"JSON-stringifyable\" object and stores them in a \nbackend\n\nonly supporting strings as values.\n\n\nParameters\n\n\n\n\n\n\nbackend {Object}\n: the K/V store, probably only accepting string values\n\n\n\n\n\n\nnamespace {String}\n: prefix for all keys for namespacing purposes\n\n\n\n\n\n\nStorage#getItem( key )\n\n\nRetrieves an item by key from the store. Note that the namespace the store was created with is prepended\nautomatically to the key.\n\n\nParameters\n\n\n\n\nkey {String}\n: the key of the item to retrieve\n\n\n\n\nReturns\n\n\n\n\n{*}\n: the value or \nnull\n if it doesn't exist in the store\n\n\n\n\nStorage#setItem( key, value )\n\n\nSets a value for a key. An existing value will be overwritten Note that the namespace the store was\ncreated with is prepended automatically to the key.\n\n\nParameters\n\n\n\n\n\n\nkey {String}\n: the key of the item to set\n\n\n\n\n\n\nvalue {*}\n: the new value to set\n\n\n\n\n\n\nStorage#removeItem( key )\n\n\nRemoves the value associated with \nkey\n from the store. Note that the namespace the store was created\nwith is prepended automatically to the key.\n\n\nParameters\n\n\n\n\nkey {String}\n: the key of the item to remove", 
            "title": "lib-utilities-storage.md"
        }, 
        {
            "location": "/api/lib/utilities/storage/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/api/lib/utilities/storage/#storage-backend-namespace", 
            "text": "Wrapper for  window.localStorage  or  window.sessionStorage  providing a more convenient api. In fact it\nprovides a K/V store where values can be any \"JSON-stringifyable\" object and stores them in a  backend \nonly supporting strings as values.", 
            "title": "Storage( backend, namespace )"
        }, 
        {
            "location": "/api/lib/utilities/storage/#parameters", 
            "text": "backend {Object} : the K/V store, probably only accepting string values    namespace {String} : prefix for all keys for namespacing purposes", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/storage/#storagegetitem-key", 
            "text": "Retrieves an item by key from the store. Note that the namespace the store was created with is prepended\nautomatically to the key.", 
            "title": "Storage#getItem( key )"
        }, 
        {
            "location": "/api/lib/utilities/storage/#parameters_1", 
            "text": "key {String} : the key of the item to retrieve", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/storage/#returns", 
            "text": "{*} : the value or  null  if it doesn't exist in the store", 
            "title": "Returns"
        }, 
        {
            "location": "/api/lib/utilities/storage/#storagesetitem-key-value", 
            "text": "Sets a value for a key. An existing value will be overwritten Note that the namespace the store was\ncreated with is prepended automatically to the key.", 
            "title": "Storage#setItem( key, value )"
        }, 
        {
            "location": "/api/lib/utilities/storage/#parameters_2", 
            "text": "key {String} : the key of the item to set    value {*} : the new value to set", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/storage/#storageremoveitem-key", 
            "text": "Removes the value associated with  key  from the store. Note that the namespace the store was created\nwith is prepended automatically to the key.", 
            "title": "Storage#removeItem( key )"
        }, 
        {
            "location": "/api/lib/utilities/storage/#parameters_3", 
            "text": "key {String} : the key of the item to remove", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/lib/utilities/string/", 
            "text": "Documentation", 
            "title": "lib-utilities-string.md"
        }, 
        {
            "location": "/api/lib/utilities/string/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/manuals/", 
            "text": "return to index\n\n\nManuals\n\n\n\n\nWriting Pages", 
            "title": "Overview"
        }, 
        {
            "location": "/manuals/#manuals", 
            "text": "Writing Pages", 
            "title": "Manuals"
        }, 
        {
            "location": "/manuals/i18n/", 
            "text": "return to the manuals\n\n\nPreliminary readings:\n\n\n\n\nWidgets and Activities\n\n\n\n\nInternationalizing a widget (i18n)\n\n\nIn LaxarJS, internationalization of widgets is optional.\nRead on if you are interested in writing widgets that support multiple languages, and even switching them without reloading the page.\n\n\nConcept of i18n in LaxarJS\n\n\nLaxarJS distinguishes \nlocales\n and \nlanguage tags\n for internationalization.\nEach locale has a constant name like \"default\" or \"customer\" and a language tag like \"en_US\", which can change over time.\nThe language tag of a given locale can be modified through activities or widgets when the application is running.\nTo change the language tag of a locale an activity has to publish the \nchangeLocaleRequest.{locale}\n event.\n\n\nExample: To change the language tag of the locale \nmyLocale\n to \nde_DE\n, the following event has to be published:\n\n\n$scope\n.\neventBus\n.\npublish\n(\n \nchangeLocaleRequest.myLocale.\n,\n\n    \n{\n \n        \nlocale\n:\n \nmyLocale\n,\n \n        \nlanguageTag\n:\n \nde_DE\n \n    \n}\n\n\n);\n\n\n\n\n\n\nIf a widget is interested in changes to \nmyLocale\n, it would subscribe to the corresponding \ndidChangeLocale\n-event, which is published by the LaxarJS flow-controller:\n\n\n$scope\n.\neventBus\n.\nsubscribe\n(\n \ndidChangeLocale.myLocale.\n,\n \nfunction\n(\n \nevent\n \n)\n \n{\n\n   \nax\n.\nlog\n.\ninfo\n(\n \nI have received tag [0] for locale [1]\n,\n \nevent\n.\nlanguageTag\n,\n \nevent\n.\nlocale\n \n);\n\n\n}\n \n);\n\n\n\n\n\n\nWidgets can use the language tags that they receive over the event bus to \nlocalize\n internationalized values.\nInternationalized values are JSON-Objects which contain an entry for each supported language tag.\nBy convention, variables and properties that contain internationalized values are prefixed with \ni18n\n:\n\n\ni18nHtmlText\n:\n \n{\n\n    \nen_US\n:\n \nUpload file\n,\n\n    \nde_DE\n:\n \nDatei hochladen\n\n\n}\n\n\n\n\n\n\nLaxarJS provides some tools which help to deal with i18n.\nThey are based on the events shown above, and demonstrated in the following section.\n\n\nWriting an i18n-capable Widget\n\n\nTo be able to localize internationalized values in templates, widgets can use the i18n-directives which are provided by Laxar-UiKit.\nThis is accomplished by adding the i18n control to the top-level entry \ncontrols\n in the \nwidget.json\n.\nIf missing, this entry must be created:\n\n\ncontrols\n:\n \n[\n\n    \nlaxar_uikit/controls/i18n\n\n\n]\n\n\n\n\n\n\nNext, we have to add a feature \ni18n\n.\nIt allows page authors to configure the name of the locale (e.g. \"customer\") to be used by this widget.\nThe actual language tag associated with that locale (for example en_GB) is then used to localize internationalized values.\n\n\ni18n\n:\n \n{\n\n   \ndescription\n:\n \nWhich locale to use for displaying this widget.\n,\n\n   \ntype\n:\n \nobject\n,\n\n   \nproperties\n:\n \n{\n\n      \nlocale\n:\n \n{\n\n         \ntype\n:\n \nstring\n,\n\n         \ndescription\n:\n \nThe topic under which to expect the locale for this widget.\n,\n\n         \ndefault\n:\n \ndefault\n\n      \n}\n\n   \n}\n\n\n}\n\n\n\n\n\n\nIf not already done, we import the Laxar-Patterns library into the widget controller (\nmy_widget.js\n).\nThe i18n-handler offered by Laxar-Patterns subscribes the widget to the right \ndidChangeLocale\n-events for us, by using the feature configuration that we added in the previous step:\n\n\ndefine\n(\n \n[\n   \n   \nlaxar_patterns\n\n\n],\n \nfunction\n(\n \npatterns\n \n)\n \n{\n\n   \npatterns\n.\ni18n\n.\nhandlerFor\n(\n \n$scope\n \n).\nscopeLocaleFromFeature\n(\n \ni18n\n \n);\n\n   \n...\n\n\n}\n\n\n\n\n\n\nAny updates to the i18n-locale received over the event bus will now be saved under \n$scope.i18n\n, along with their tags.\nMore locales may be registered for other features (if a single widget wants to use more than one language at the same time), resulting ins something like:\n\n\n$scope.i\n18\nn\n \n=\n \n{\n      \n   \nlocale:\n \ndefault\n,\n\n   \ntags:\n \n{\n\n      \ndefault\n:\n \nen_US\n,\n\n      \ncustomer\n:\n \nde_DE\n,\n\n      \nsupport\n:\n \nen_GB\n\n   \n}\n\n\n}\n\n\n\n\n\n\nIn the HTML template we can now use the angular filter \naxLocalize\n to convert an i18nHtmlText to a string:\n\n\np\n \ndata-ng-bind-html=\nmodel.i18nHtmlText | axLocalize:i18n\n/p\n\n\n\n\n\n\nThe filter expects an object for internationalization or a string if the value is not internationalized.\nIt uses \n$scope.i18n.locale\n (passed as an argument to the filter) to select the correct language tag.\nEvery property of the object should have a language tag as key and the translated text or html as value.\n\n\ni18nHtmlText\n:\n \n{\n\n    \nen_US\n:\n \nUpload file \nem\nnow\n/em\n,\n\n    \nde_DE\n:\n \nDatei \nem\njetzt\n/em\n hochladen\n\n\n}\n\n\n\n\n\n\nLocalizing values in the controller\n\n\nIn some cases it is more appropriate to create the localized string inside the controller of the widget.\nThis is the case if the localization has to be retrieved from the server first.\n\n\np\n \ndata-ng-bind-html=\nmodel.htmlVeryLongDocument\n/p\n\n\n\n\n\n\nTo achieve this, we obtain a \nlocalize\n function when we subscribe the widget to the didChangeLocale event.\nLike the \naxLocalize\n-directive, this function automatically uses the current language tag:\n\n\nvar\n \nlocalize\n \n=\n \npatterns\n.\ni18n\n.\nhandlerFor\n(\n \n$scope\n \n).\nscopeLocaleFromFeature\n(\n \ni18n\n,\n \n{\n\n    \nonChange\n:\n \nupdateLocalization\n\n\n}\n \n).\nlocalizer\n();\n\n\n\n\n\n\nThen we can transform any object with language tag properties to a string using the \nlocalize\n function:\n\n\nfunction\n \nupdateLocalization\n()\n \n{\n\n   \nvar\n \ndocumentUrl\n \n=\n \nlocalize\n(\n \n$scope\n.\nfeatures\n.\ni18nDocumentUrl\n \n);\n\n   \n$http\n.\nget\n(\n \ndocumentUrl\n \n).\nthen\n(\n \nfunction\n(\n \nresponse\n \n)\n \n{\n\n      \n$scope\n.\nmodel\n.\nhtmlVeryLongDocument\n \n=\n \nresponse\n.\ndata\n;\n\n   \n}\n \n);\n\n\n}", 
            "title": "Internationalizing a widget (i18n)"
        }, 
        {
            "location": "/manuals/i18n/#internationalizing-a-widget-i18n", 
            "text": "In LaxarJS, internationalization of widgets is optional.\nRead on if you are interested in writing widgets that support multiple languages, and even switching them without reloading the page.", 
            "title": "Internationalizing a widget (i18n)"
        }, 
        {
            "location": "/manuals/i18n/#concept-of-i18n-in-laxarjs", 
            "text": "LaxarJS distinguishes  locales  and  language tags  for internationalization.\nEach locale has a constant name like \"default\" or \"customer\" and a language tag like \"en_US\", which can change over time.\nThe language tag of a given locale can be modified through activities or widgets when the application is running.\nTo change the language tag of a locale an activity has to publish the  changeLocaleRequest.{locale}  event.  Example: To change the language tag of the locale  myLocale  to  de_DE , the following event has to be published:  $scope . eventBus . publish (   changeLocaleRequest.myLocale. , \n     {  \n         locale :   myLocale ,  \n         languageTag :   de_DE  \n     }  );   If a widget is interested in changes to  myLocale , it would subscribe to the corresponding  didChangeLocale -event, which is published by the LaxarJS flow-controller:  $scope . eventBus . subscribe (   didChangeLocale.myLocale. ,   function (   event   )   { \n    ax . log . info (   I have received tag [0] for locale [1] ,   event . languageTag ,   event . locale   );  }   );   Widgets can use the language tags that they receive over the event bus to  localize  internationalized values.\nInternationalized values are JSON-Objects which contain an entry for each supported language tag.\nBy convention, variables and properties that contain internationalized values are prefixed with  i18n :  i18nHtmlText :   { \n     en_US :   Upload file , \n     de_DE :   Datei hochladen  }   LaxarJS provides some tools which help to deal with i18n.\nThey are based on the events shown above, and demonstrated in the following section.", 
            "title": "Concept of i18n in LaxarJS"
        }, 
        {
            "location": "/manuals/i18n/#writing-an-i18n-capable-widget", 
            "text": "To be able to localize internationalized values in templates, widgets can use the i18n-directives which are provided by Laxar-UiKit.\nThis is accomplished by adding the i18n control to the top-level entry  controls  in the  widget.json .\nIf missing, this entry must be created:  controls :   [ \n     laxar_uikit/controls/i18n  ]   Next, we have to add a feature  i18n .\nIt allows page authors to configure the name of the locale (e.g. \"customer\") to be used by this widget.\nThe actual language tag associated with that locale (for example en_GB) is then used to localize internationalized values.  i18n :   { \n    description :   Which locale to use for displaying this widget. , \n    type :   object , \n    properties :   { \n       locale :   { \n          type :   string , \n          description :   The topic under which to expect the locale for this widget. , \n          default :   default \n       } \n    }  }   If not already done, we import the Laxar-Patterns library into the widget controller ( my_widget.js ).\nThe i18n-handler offered by Laxar-Patterns subscribes the widget to the right  didChangeLocale -events for us, by using the feature configuration that we added in the previous step:  define (   [    \n    laxar_patterns  ],   function (   patterns   )   { \n    patterns . i18n . handlerFor (   $scope   ). scopeLocaleFromFeature (   i18n   ); \n    ...  }   Any updates to the i18n-locale received over the event bus will now be saved under  $scope.i18n , along with their tags.\nMore locales may be registered for other features (if a single widget wants to use more than one language at the same time), resulting ins something like:  $scope.i 18 n   =   {       \n    locale:   default , \n    tags:   { \n       default :   en_US , \n       customer :   de_DE , \n       support :   en_GB \n    }  }   In the HTML template we can now use the angular filter  axLocalize  to convert an i18nHtmlText to a string:  p   data-ng-bind-html= model.i18nHtmlText | axLocalize:i18n /p   The filter expects an object for internationalization or a string if the value is not internationalized.\nIt uses  $scope.i18n.locale  (passed as an argument to the filter) to select the correct language tag.\nEvery property of the object should have a language tag as key and the translated text or html as value.  i18nHtmlText :   { \n     en_US :   Upload file  em now /em , \n     de_DE :   Datei  em jetzt /em  hochladen  }", 
            "title": "Writing an i18n-capable Widget"
        }, 
        {
            "location": "/manuals/i18n/#localizing-values-in-the-controller", 
            "text": "In some cases it is more appropriate to create the localized string inside the controller of the widget.\nThis is the case if the localization has to be retrieved from the server first.  p   data-ng-bind-html= model.htmlVeryLongDocument /p   To achieve this, we obtain a  localize  function when we subscribe the widget to the didChangeLocale event.\nLike the  axLocalize -directive, this function automatically uses the current language tag:  var   localize   =   patterns . i18n . handlerFor (   $scope   ). scopeLocaleFromFeature (   i18n ,   { \n     onChange :   updateLocalization  }   ). localizer ();   Then we can transform any object with language tag properties to a string using the  localize  function:  function   updateLocalization ()   { \n    var   documentUrl   =   localize (   $scope . features . i18nDocumentUrl   ); \n    $http . get (   documentUrl   ). then (   function (   response   )   { \n       $scope . model . htmlVeryLongDocument   =   response . data ; \n    }   );  }", 
            "title": "Localizing values in the controller"
        }, 
        {
            "location": "/manuals/configuration/", 
            "text": "return to the manuals\n\n\nPreliminary readings:\n\n\n\n\nWidgets and Activities\n\n\n\n\nLaxarJS Configuration in an Application\n\n\nLaxarJS has a built-in configuration API which is available to libraries and widgets as \nlaxar.configuration\n.\nIn contrast to the bower- and RequireJS-configuration, this configuration is designed to be used at application run time.\n\n\nWhat is LaxarJS Configuration Used for?\n\n\nWhen writing widgets, it is generally recommended to avoid global configuration options in favor of widget feature configuration.\nSometimes however, a single setting must be respected across a large number of widgets:\nFor example, all widgets should use the same validation trigger (on change vs. on focus-out) to guarantee a consistent user experience.\n\n\nIn other cases, LaxarJS itself needs to be configured, for example to determine the theme, file listing URIs, available locales and so on.\nThe \nLaxarJS Core\n configuration options are listed below.\n\n\nConfiguration Structure\n\n\nConfiguration keys are simple JSON paths, reflecting a hierarchical configuration structure.\nThe configuration API looks for the configuration values within the \nlaxar\n property of the global object (\nwindow\n).\n\n\nLibraries, widgets and activities may define their own configuration keys, but must always use the \nlib.\n prefix, followed by a suitable module identifier (e.g. the name of the library vendor) to avoid name collisions.\nFor example, \nLaxarJS UiKit\n controls use the prefix \nlib.laxar_uikit.controls\n for their configuration options.\nKeys without the \nlib.\n-prefix are used by \nLaxarJS Core\n.\n\n\nThe Configuration API\n\n\nThe LaxarJS configuration exposes a single method \nlaxar.configuration.get( key, fallback )\n.\nThe \nkey\n-parameter is the path within the configuration object (\nwindow.laxar\n), and the (optional) \nfallback\n is returned as a default value if the key was not set in the configuration.\n\n\nFor example, a module \nmy_module\n may allow to enable some kind of compatibility behavior for a special \nfoo\n environment by exposing a boolean configuration \nfooCompatibility\n.\nBy default, the option should be disabled as compatibility with foo involves jumping through some hoops.\nThe module \nmy_module\n would then access the option like this:\n\n\ndefine\n(\n \n[\n \nlaxar\n \n],\n \nfunction\n(\n \nax\n \n)\n \n{\n\n  \nfunction\n \nsetup\n()\n \n{\n\n     \nvar\n \nrespectFoo\n \n=\n \nax\n.\nconfiguration\n.\nget\n(\n \nlib.my_module.fooCompatibility\n,\n \nfalse\n \n);\n\n     \nif\n(\n \nrespectFoo\n \n)\n \n{\n\n        \n// ... jump though some hoops ...\n\n        \nreturn\n \n{\n \nhoops\n:\n \nJUMPED\n \n};\n\n     \n}\n\n     \nreturn\n \n{};\n\n  \n}\n\n\n}\n \n);\n\n\n\n\n\n\nAnd the corresponding configuration block to enable foo-compatibility would then look like this:\n\n\nwindow\n.\nlaxar\n \n=\n \n{\n\n   \n// ...\n\n   \nlib\n:\n \n{\n\n      \nmy_module\n:\n \n{\n\n         \nfooCompatibility\n:\n \ntrue\n\n      \n},\n\n      \n// ...\n\n   \n}\n\n\n};\n\n\n\n\n\n\nTesting a Module that Uses Configuration\n\n\nTo test the behavior of a module with test-controlled configuration options, one can simply spy on the method \nconfiguration.get\n.\nHere is an exemplary jasmine test for a module \nmy_module\n, which tries to test the module behavior with foo-compatibility enabled.\n\n\ndefine\n(\n \n[\n \nlaxar/laxar_testing\n,\n \nmy_module\n \n],\n \nfunction\n(\n \nax\n,\n \nmyModule\n \n)\n \n{\n\n   \ndescribe\n(\n \na my_module with foo compatibility enabled\n,\n \nfunction\n()\n \n{\n\n      \nbeforeEach\n(\n \nfunction\n()\n \n{\n\n         \nvar\n \norigGet\n \n=\n \nax\n.\nconfiguration\n.\nget\n;\n\n         \nvar\n \nhoops\n;\n\n         \nspyOn\n(\n \nax\n.\nconfiguration\n,\n \nget\n \n).\nandCallThrough\n(\n \nfunction\n(\n \nkey\n,\n \nfallback\n \n)\n \n{\n\n            \nreturn\n \nkey\n \n===\n \nlib.my_module.fooCompatibility\n \n?\n \ntrue\n \n:\n \norigGet\n(\n \nkey\n,\n \nfallback\n \n);\n\n         \n}\n \n);\n\n         \nhoops\n \n=\n \nsetup\n();\n\n      \n}\n \n);\n\n      \nit\n(\n \njumps through some hoops\n,\n \nfunction\n()\n \n{\n\n           \nexpect\n(\n \nhoops\n \n).\ntoBe\n(\n \nJUMPED\n \n);\n\n      \n}\n \n);\n\n   \n}\n \n);\n\n\n}\n \n);\n\n\n\n\n\n\nInjecting Configuration into an AngularJS module\n\n\nInstead of using RequireJS, AngularJS modules such as widgets can have the configuration module injected by requesting the service \n'Configuration'\n.\nIn cases where configuration is injected, an \nangularMocks.module\n provider may be defined during testing instead of the approach described above.\n\n\nAvailable Configuration Keys in \nLaxarJS Core\n\n\nThe following configuration options are available in \nLaxarJS Core\n.\nFor options available in \nLaxarJS UiKit\n, have a look at the (respective documentation)[https://github.com/LaxarJS/laxar_uikit/blob/master/docs/manuals/configuration.md].\n\n\n\n\n\n\n\n\nKey\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\n''\n\n\nThe name of the LaxarJS application\n\n\n\n\n\n\ndescription\n\n\n''\n\n\nA short application description\n\n\n\n\n\n\ni18n.locales\n\n\n{ 'default': 'en' }\n\n\nWhich language tag to use for the default locale, and possibly for other locales\n\n\n\n\n\n\nlogging.threshold\n\n\n'INFO'\n\n\nThe log level which is required for messages to be logged (one of \nDEBUG\n\n\n\n\n\n\nfile_resource_provider.listings\n\n\n{}\n\n\nA mapping from application directories to file listings. The listings serve to save unnecessary HTTP requests (for example, to determine if a widget has custom styles for the current theme), and are generated by (grunt-laxar)[https://github.com/LaxarJS/grunt-laxar].\n\n\n\n\n\n\nfile_resource_provider.useEmbedded\n\n\nfalse\n\n\nWhole files may be embedded into the file listings by grunt-laxar to save even more HTTP-requests. In DEBUG-mode, these embeddings may be stale and should not be used (use \nfalse\n) while in release mode, they are beneficial (use \ntrue\n).\n\n\n\n\n\n\nportal.theme\n\n\n'default'\n\n\nWhich theme to use for the application\n\n\n\n\n\n\nportal.useMergedCss\n\n\nfalse\n\n\nSimilar to \nfile_resource_provider.useEmbedded\n, this option controls an optimization: If \ntrue\n, a concatenated CSS bundled produced by \ngrunt-laxar\n is used which improves performance. If \nfalse\n, CSS-files are requested individually, which is mostly useful during development. The value is automatically \ntrue\n if a link-element with the \ndata-ax-merged-css\n attribute exists in the page.\n\n\n\n\n\n\nportal.flow.entryPoint\n\n\nnull\n\n\nIf the browser URL cannot be controlled by the LaxarJS application (for example, when integrating with a legacy system), the target and place-parameters can be set here in the form \n{ target: 'my_flow_target', parameters: { myParam: 'xyz' } }\n.\n\n\n\n\n\n\nportal.flow.exitPoints\n\n\n{}\n\n\nAllows to delegate handling of a navigation target to a different (legacy) system by specifying callbacks for individual navigation targets. Has the form \n{ exitFnName: function( parameters ) { /* ... */ } }\n where \nexitFnName\n matches the definition used as an \n'exitFunction'\n within the \nflow.json\n.", 
            "title": "LaxarJS Configuration in an Application"
        }, 
        {
            "location": "/manuals/configuration/#laxarjs-configuration-in-an-application", 
            "text": "LaxarJS has a built-in configuration API which is available to libraries and widgets as  laxar.configuration .\nIn contrast to the bower- and RequireJS-configuration, this configuration is designed to be used at application run time.", 
            "title": "LaxarJS Configuration in an Application"
        }, 
        {
            "location": "/manuals/configuration/#what-is-laxarjs-configuration-used-for", 
            "text": "When writing widgets, it is generally recommended to avoid global configuration options in favor of widget feature configuration.\nSometimes however, a single setting must be respected across a large number of widgets:\nFor example, all widgets should use the same validation trigger (on change vs. on focus-out) to guarantee a consistent user experience.  In other cases, LaxarJS itself needs to be configured, for example to determine the theme, file listing URIs, available locales and so on.\nThe  LaxarJS Core  configuration options are listed below.", 
            "title": "What is LaxarJS Configuration Used for?"
        }, 
        {
            "location": "/manuals/configuration/#configuration-structure", 
            "text": "Configuration keys are simple JSON paths, reflecting a hierarchical configuration structure.\nThe configuration API looks for the configuration values within the  laxar  property of the global object ( window ).  Libraries, widgets and activities may define their own configuration keys, but must always use the  lib.  prefix, followed by a suitable module identifier (e.g. the name of the library vendor) to avoid name collisions.\nFor example,  LaxarJS UiKit  controls use the prefix  lib.laxar_uikit.controls  for their configuration options.\nKeys without the  lib. -prefix are used by  LaxarJS Core .", 
            "title": "Configuration Structure"
        }, 
        {
            "location": "/manuals/configuration/#the-configuration-api", 
            "text": "The LaxarJS configuration exposes a single method  laxar.configuration.get( key, fallback ) .\nThe  key -parameter is the path within the configuration object ( window.laxar ), and the (optional)  fallback  is returned as a default value if the key was not set in the configuration.  For example, a module  my_module  may allow to enable some kind of compatibility behavior for a special  foo  environment by exposing a boolean configuration  fooCompatibility .\nBy default, the option should be disabled as compatibility with foo involves jumping through some hoops.\nThe module  my_module  would then access the option like this:  define (   [   laxar   ],   function (   ax   )   { \n   function   setup ()   { \n      var   respectFoo   =   ax . configuration . get (   lib.my_module.fooCompatibility ,   false   ); \n      if (   respectFoo   )   { \n         // ... jump though some hoops ... \n         return   {   hoops :   JUMPED   }; \n      } \n      return   {}; \n   }  }   );   And the corresponding configuration block to enable foo-compatibility would then look like this:  window . laxar   =   { \n    // ... \n    lib :   { \n       my_module :   { \n          fooCompatibility :   true \n       }, \n       // ... \n    }  };", 
            "title": "The Configuration API"
        }, 
        {
            "location": "/manuals/configuration/#testing-a-module-that-uses-configuration", 
            "text": "To test the behavior of a module with test-controlled configuration options, one can simply spy on the method  configuration.get .\nHere is an exemplary jasmine test for a module  my_module , which tries to test the module behavior with foo-compatibility enabled.  define (   [   laxar/laxar_testing ,   my_module   ],   function (   ax ,   myModule   )   { \n    describe (   a my_module with foo compatibility enabled ,   function ()   { \n       beforeEach (   function ()   { \n          var   origGet   =   ax . configuration . get ; \n          var   hoops ; \n          spyOn (   ax . configuration ,   get   ). andCallThrough (   function (   key ,   fallback   )   { \n             return   key   ===   lib.my_module.fooCompatibility   ?   true   :   origGet (   key ,   fallback   ); \n          }   ); \n          hoops   =   setup (); \n       }   ); \n       it (   jumps through some hoops ,   function ()   { \n            expect (   hoops   ). toBe (   JUMPED   ); \n       }   ); \n    }   );  }   );", 
            "title": "Testing a Module that Uses Configuration"
        }, 
        {
            "location": "/manuals/configuration/#injecting-configuration-into-an-angularjs-module", 
            "text": "Instead of using RequireJS, AngularJS modules such as widgets can have the configuration module injected by requesting the service  'Configuration' .\nIn cases where configuration is injected, an  angularMocks.module  provider may be defined during testing instead of the approach described above.", 
            "title": "Injecting Configuration into an AngularJS module"
        }, 
        {
            "location": "/manuals/configuration/#available-configuration-keys-in-laxarjs-core", 
            "text": "The following configuration options are available in  LaxarJS Core .\nFor options available in  LaxarJS UiKit , have a look at the (respective documentation)[https://github.com/LaxarJS/laxar_uikit/blob/master/docs/manuals/configuration.md].     Key  Default  Description      name  ''  The name of the LaxarJS application    description  ''  A short application description    i18n.locales  { 'default': 'en' }  Which language tag to use for the default locale, and possibly for other locales    logging.threshold  'INFO'  The log level which is required for messages to be logged (one of  DEBUG    file_resource_provider.listings  {}  A mapping from application directories to file listings. The listings serve to save unnecessary HTTP requests (for example, to determine if a widget has custom styles for the current theme), and are generated by (grunt-laxar)[https://github.com/LaxarJS/grunt-laxar].    file_resource_provider.useEmbedded  false  Whole files may be embedded into the file listings by grunt-laxar to save even more HTTP-requests. In DEBUG-mode, these embeddings may be stale and should not be used (use  false ) while in release mode, they are beneficial (use  true ).    portal.theme  'default'  Which theme to use for the application    portal.useMergedCss  false  Similar to  file_resource_provider.useEmbedded , this option controls an optimization: If  true , a concatenated CSS bundled produced by  grunt-laxar  is used which improves performance. If  false , CSS-files are requested individually, which is mostly useful during development. The value is automatically  true  if a link-element with the  data-ax-merged-css  attribute exists in the page.    portal.flow.entryPoint  null  If the browser URL cannot be controlled by the LaxarJS application (for example, when integrating with a legacy system), the target and place-parameters can be set here in the form  { target: 'my_flow_target', parameters: { myParam: 'xyz' } } .    portal.flow.exitPoints  {}  Allows to delegate handling of a navigation target to a different (legacy) system by specifying callbacks for individual navigation targets. Has the form  { exitFnName: function( parameters ) { /* ... */ } }  where  exitFnName  matches the definition used as an  'exitFunction'  within the  flow.json .", 
            "title": "Available Configuration Keys in LaxarJS Core"
        }, 
        {
            "location": "/manuals/writing_pages/", 
            "text": "return to the manuals\n\n\nPreliminary readings:\n\n\n\n\nCreating Layouts\n\n\nWidgets and Activities\n\n\n\n\nWriting Pages\n\n\nPages are written in a declarative fashion using the JSON format. Starting point is a simple object and some specific properties that will be explained in this document.\n\n\nLayouts and Areas\n\n\nFirst of all a page should specify the layout which defines the available widget areas and how they are arranged visually when rendered by the web browser. If a page is intended to be used as a base page for inheritance (see chapter \nInheritance\n for more information), the layout property should be omitted as for the time being only one page in an extension chain may define a layout.\n\n\nConfiguring the layout is done via the \nlayout\n property of the page object. Its value is the name of the layout which is in turn a relative path to where the specific layout's assets are located (see \nCreating Layouts\n for further information). If for example the desired layout is located at \npopups/layout_one\n, the according page (without any widgets yet) would look like this:\n\n\n{\n   \nlayout\n: \npopups/layout_one\n\n}\n\n\n\n\n\nNow let's assume the html file of \npopups/layout_one\n looks like this:\n\n\ndiv\n\n   \ndiv ax-widget-area=\nheader\n/div\n\n   \ndiv ax-widget-area=\ncontent\n/div\n\n   \ndiv ax-widget-area=\nfooter\n/div\n\n\n/div\n\n\n\n\n\n\nHence there are three areas available, that can be occupied by widgets on the page. To do so, we add another top-level key \nareas\n parallel to\nlayout\n. Its value is a map, where each key is the name of a widget area defined in the layout and the values are arrays, that will later receive the widgets. The order of the areas in the map doesn't matter, as the layout decides where each area will later be displayed. Nevertheless it is advised to keep the order, as it simplifies matters. We thus get the following page file:\n\n\n{\n   \nlayout\n: \npopups/layout_one\n,\n   \nareas\n: {\n      \nheader\n: [],\n      \ncontent\n: [],\n      \nfooter\n: []\n   }\n}\n\n\n\n\n\nThe arrays can now be filled with the widgets to render within each area. In contrast to the area map order is important here, as this is the order in which the widgets will be rendered in the DOM.\n\n\nEach entry in the array is an object that can either reference a widget or a \ncomposition\n. It thus needs to specify either \nwidget\n or \ncomposition\n as key. Additionally a page wide unique (even over inheritance) \nid\n property can be provided. This can be useful for debugging and is mandatory in case a widget provides one or more embedded areas (like e.g. the popover widget). The latter case is explained in detail later in \nTODO\n. Finally it is possible to provide configuration for a widget or a composition under the key \nfeatures\n.\n\n\nOur example with some simple exemplary content:\n\n\n{\n   \nlayout\n: \npopups/layout_one\n,\n   \nareas\n: {\n      \nheader\n: [\n         {\n            \nwidget\n: \nportal/headline_widget\n,\n            \nfeatures\n: {\n               \nheadline\n: {\n                  \nhtmlText\n: \nWelcome!\n,\n                  \nlevel\n: 3\n               }\n            }\n         }\n      ],\n      \ncontent\n: [\n         {\n            \nwidget\n: \nportal/command_bar_widget\n,\n            \nfeatures\n: {\n               \nnext\n: {\n                  \nenabled\n: true\n               }\n            }\n         },\n         {\n            \ncomposition\n: \npopup_composition\n,\n            \nfeatures\n: {\n               \nopenPopup\n: {\n                  \nonActions\n: [ \nnext\n ]\n               }\n            }\n         }\n      ],\n      \nfooter\n: [\n         {\n            \nwidget\n: \nportal/html_display_widget\n,\n            \nfeatures\n: {\n               \ncontent\n: {\n                  \nresource\n: \nfooterTextResource\n\n               }\n            }\n         }\n      ]\n   }\n}\n\n\n\n\n\nInheritance\n\n\nThe most simple way to reuse parts of a page specification is by inheritance. Due to the intentional lack of complex additional inheritance features it is also the most limited way of specification reuse. Nevertheless it has its valid use cases as in every user interface there are some elements that never change across pages. These should be extracted into a base page which defines no layout and than reused by all other pages defining the layout necessary to display their contents.\n\n\nValid candidate widgets for base pages are application headlines, informational notes in a footer area or activities providing common tasks for all pages. Let's apply this to our example from above and extract the HeadlineWidget into a base page called \nbase_page.json\n.\n\n\n{\n   \nareas\n: {\n      \nheader\n: [\n         {\n            \nwidget\n: \nportal/headline_widget\n,\n            \nfeatures\n: {\n               \nheadline\n: {\n                  \nhtmlText\n: \nWelcome!\n,\n                  \nlevel\n: 3\n               }\n            }\n         }\n      ]\n   }\n}\n\n\n\n\n\nWe now can modify our original page using the keyword \nextends\n that references the base page. The parts already provided by the base page can then be deleted:\n\n\n{\n   \nlayout\n: \npopups/layout_one\n,\n   \nextends\n: \nbase_page\n,\n   \nareas\n: {\n      \ncontent\n: [\n         {\n            \nwidget\n: \nportal/command_bar_widget\n,\n            \nfeatures\n: {\n               \nnext\n: {\n                  \nenabled\n: true\n               }\n            }\n         },\n         {\n            \ncomposition\n: \npopup_composition\n,\n            \nfeatures\n: {\n               \nopenPopup\n: {\n                  \nonActions\n: [ \nnext\n ]\n               }\n            }\n         }\n      ],\n      \nfooter\n: [\n         {\n            \nwidget\n: \nportal/html_display_widget\n,\n            \nfeatures\n: {\n               \ncontent\n: {\n                  \nresource\n: \nfooterTextResource\n\n               }\n            }\n         }\n      ]\n   }\n}\n\n\n\n\n\nIt is also possible to add widgets to an area, that is already filled with one or more widgets in the base page. Those widgets in the extending page will be appended to the according area and thus appear after the base widgets in the DOM. If a widget should explicitly be added before another widget, this can be achieved using the keyword \ninsertBeforeId\n. Note that for this to work it's necessary to provide an \nid\n property at the according widget in the base page.\n\n\nLet's assume we wanted to add another additional headline in one extending page. We therefore change the base page first and add an id to the existing headline:\n\n\n{\n   \nareas\n: {\n      \nheader\n: [\n         {\n            \nwidget\n: \nportal/headline_widget\n,\n            \nid\n: \nmainHeadline\n,\n            \nfeatures\n: {\n               \nheadline\n: {\n                  \nhtmlText\n: \nWelcome!\n,\n                  \nlevel\n: 3\n               }\n            }\n         }\n      ]\n   }\n}\n\n\n\n\n\nThe page that has the need to add content thus looks something like this:\n\n\n{\n   \nlayout\n: \npopups/layout_one\n,\n   \nextends\n: \nbase_page\n,\n   \nareas\n: {\n      \nheader\n: [\n         {\n            \nwidget\n: \nportal/headline_widget\n,\n            \ninsertBeforeId\n: \nmainHeadline\n,\n            \nfeatures\n: {\n                \nheadline\n: {\n                   \nhtmlText\n: \nYou just won one billion dollar!\n\n                }\n            }\n         }\n      ],\n      \ncontent\n: [ \n ... some widgets ... \n ],\n      \nfooter\n: [ \n ... some widgets ... \n ]\n   }\n}\n\n\n\n\n\nThat is all inheritance can do for you. Compositions are the way to got for sophisticated reuse of partial specifications. So read on!\n\n\nCompositions\n\n\nIn short compositions are a mixture of page and widget definition: They fill areas with widgets, specify which features are configurable and are used within another page (or composition) like a normal widget.", 
            "title": "Writing Pages"
        }, 
        {
            "location": "/manuals/writing_pages/#writing-pages", 
            "text": "Pages are written in a declarative fashion using the JSON format. Starting point is a simple object and some specific properties that will be explained in this document.", 
            "title": "Writing Pages"
        }, 
        {
            "location": "/manuals/writing_pages/#layouts-and-areas", 
            "text": "First of all a page should specify the layout which defines the available widget areas and how they are arranged visually when rendered by the web browser. If a page is intended to be used as a base page for inheritance (see chapter  Inheritance  for more information), the layout property should be omitted as for the time being only one page in an extension chain may define a layout.  Configuring the layout is done via the  layout  property of the page object. Its value is the name of the layout which is in turn a relative path to where the specific layout's assets are located (see  Creating Layouts  for further information). If for example the desired layout is located at  popups/layout_one , the according page (without any widgets yet) would look like this:  {\n    layout :  popups/layout_one \n}  Now let's assume the html file of  popups/layout_one  looks like this:  div \n    div ax-widget-area= header /div \n    div ax-widget-area= content /div \n    div ax-widget-area= footer /div  /div   Hence there are three areas available, that can be occupied by widgets on the page. To do so, we add another top-level key  areas  parallel to layout . Its value is a map, where each key is the name of a widget area defined in the layout and the values are arrays, that will later receive the widgets. The order of the areas in the map doesn't matter, as the layout decides where each area will later be displayed. Nevertheless it is advised to keep the order, as it simplifies matters. We thus get the following page file:  {\n    layout :  popups/layout_one ,\n    areas : {\n       header : [],\n       content : [],\n       footer : []\n   }\n}  The arrays can now be filled with the widgets to render within each area. In contrast to the area map order is important here, as this is the order in which the widgets will be rendered in the DOM.  Each entry in the array is an object that can either reference a widget or a  composition . It thus needs to specify either  widget  or  composition  as key. Additionally a page wide unique (even over inheritance)  id  property can be provided. This can be useful for debugging and is mandatory in case a widget provides one or more embedded areas (like e.g. the popover widget). The latter case is explained in detail later in  TODO . Finally it is possible to provide configuration for a widget or a composition under the key  features .  Our example with some simple exemplary content:  {\n    layout :  popups/layout_one ,\n    areas : {\n       header : [\n         {\n             widget :  portal/headline_widget ,\n             features : {\n                headline : {\n                   htmlText :  Welcome! ,\n                   level : 3\n               }\n            }\n         }\n      ],\n       content : [\n         {\n             widget :  portal/command_bar_widget ,\n             features : {\n                next : {\n                   enabled : true\n               }\n            }\n         },\n         {\n             composition :  popup_composition ,\n             features : {\n                openPopup : {\n                   onActions : [  next  ]\n               }\n            }\n         }\n      ],\n       footer : [\n         {\n             widget :  portal/html_display_widget ,\n             features : {\n                content : {\n                   resource :  footerTextResource \n               }\n            }\n         }\n      ]\n   }\n}", 
            "title": "Layouts and Areas"
        }
    ]
}