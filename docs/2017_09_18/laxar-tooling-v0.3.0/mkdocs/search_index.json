{
    "docs": [
        {
            "location": "/", 
            "text": "laxar-tooling \n\n\n\n\nA tool support library to inspect \nLaxarJS\n applications\n\n\n\n\nThis library serves as a central point to codify build-time knowledge of LaxarJS applications.\nUse it to add LaxarJS support to your build tool.\n\n\nCurrently \nlaxar-tooling\n serves four main purposes:\n\n\n\n\n\n\nartifactCollector\n: collect a list of artifacts (pages, layouts, themes, widgets,\n  controls) plus meta-information starting from the application's flow(s)\n\n\n\n\n\n\nassetResolver\n: for a single artifact from that list and the list of themes, resolve\n  themed assets for that artifact\n\n\n\n\n\n\nartifactsListing\n: generate a JavaScript module to be used by LaxarJS'\n  \nartifactProvider\n\n\n\n\n\n\nInstallation\n\n\nFirst, make sure you are running NodeJS v4.0 or newer. After that, just install \nlaxar-tooling\n:\n\n\n$\n node -v\n\nv4.4.7\n\n\n$\n npm install --save laxar-tooling\n\n\n\n\n\nUsage\n\n\nRefer to the \nAPI documentation\n and/or real-world usage in \nlaxar-loader", 
            "title": "README"
        }, 
        {
            "location": "/#laxar-tooling", 
            "text": "A tool support library to inspect  LaxarJS  applications   This library serves as a central point to codify build-time knowledge of LaxarJS applications.\nUse it to add LaxarJS support to your build tool.  Currently  laxar-tooling  serves four main purposes:    artifactCollector : collect a list of artifacts (pages, layouts, themes, widgets,\n  controls) plus meta-information starting from the application's flow(s)    assetResolver : for a single artifact from that list and the list of themes, resolve\n  themed assets for that artifact    artifactsListing : generate a JavaScript module to be used by LaxarJS'\n   artifactProvider", 
            "title": "laxar-tooling"
        }, 
        {
            "location": "/#installation", 
            "text": "First, make sure you are running NodeJS v4.0 or newer. After that, just install  laxar-tooling :  $  node -v v4.4.7  $  npm install --save laxar-tooling", 
            "title": "Installation"
        }, 
        {
            "location": "/#usage", 
            "text": "Refer to the  API documentation  and/or real-world usage in  laxar-loader", 
            "title": "Usage"
        }, 
        {
            "location": "/CHANGELOG/", 
            "text": "Changelog\n\n\nLast Changes\n\n\nv0.3.0\n\n\n\n\n#3\n: added new \nartifactListing\n and \nserialize\n APIs to generate artifact listing code.\n\n\nBREAKING CHANGE:\n see ticket for details.\n\n\n\n\n\n\n\n\nv0.2.0\n\n\n\n\n#2\n: added new \nartifactCollector\n and \nassetResolver\n APIs.\n        + \nBREAKING CHANGE:\n The old \nartifactCollector\n, \nresourceCollector\n and \ndependencyCollector\n were removed.\n      See ticket for details.\n\n\n\n\nv0.1.0\n\n\n\n\ninitial version", 
            "title": "Changelog"
        }, 
        {
            "location": "/CHANGELOG/#changelog", 
            "text": "", 
            "title": "Changelog"
        }, 
        {
            "location": "/CHANGELOG/#last-changes", 
            "text": "", 
            "title": "Last Changes"
        }, 
        {
            "location": "/CHANGELOG/#v030", 
            "text": "#3 : added new  artifactListing  and  serialize  APIs to generate artifact listing code.  BREAKING CHANGE:  see ticket for details.", 
            "title": "v0.3.0"
        }, 
        {
            "location": "/CHANGELOG/#v020", 
            "text": "#2 : added new  artifactCollector  and  assetResolver  APIs.\n        +  BREAKING CHANGE:  The old  artifactCollector ,  resourceCollector  and  dependencyCollector  were removed.\n      See ticket for details.", 
            "title": "v0.2.0"
        }, 
        {
            "location": "/CHANGELOG/#v010", 
            "text": "initial version", 
            "title": "v0.1.0"
        }, 
        {
            "location": "/api/artifact_collector.js/", 
            "text": "artifactCollector\n\n\nDetermine application artifacts by inspecting flow, pages and widgets.\n\n\nContents\n\n\nModule Members\n\n\n\n\ncreate\n\n\n\n\nTypes\n\n\n\n\nArtifactCollector\n\n\nArtifactCollector#collectArtifacts\n\n\nArtifactCollector#collectFlows\n\n\nArtifactCollector#collectThemes\n\n\nArtifactCollector#collectPages\n\n\nArtifactCollector#collectLayouts\n\n\nArtifactCollector#collectWidgets\n\n\nArtifactCollector#collectControls\n\n\n\n\n\n\n\n\nModule Members\n\n\ncreate( log, options )\n\n\nCreate an artifact collector instance.\n\n\nExample:\n\n\nconst collector = laxarTooling.artifactCollector.create( log, {\n   projectPath: ref =\n path.relative( base, path.resolve( ref ) ),\n   readJson: filename =\n new Promise( ( resolve, reject ) =\n {\n      fs.readFile( filename, ( err, contents ) =\n {\n         try {\n            err ? reject( err ) : resolve( JSON.parse( contents ) );\n         }\n         catch( err ) {\n            reject( err );\n         }\n      } );\n   } )\n} );\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlog\n\n\nObject\n\n\na logger instance with at least a \nlog.error()\n method\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nadditional options\n\n\n\n\n\n\noptions.projectPath\n\n\nFunction\n\n\na function resolving a given file path to something that can be read by the \nreadJson\n function and either returning it as a \nString\n or asynchronously\n\n\n\n\n\n\noptions.fileContents\n\n\nObject\n\n\nan object mapping file paths (as returned by options.projectPath) to promises that resolve to the parsed JSON contents of the file\n\n\n\n\n\n\noptions.readJson\n\n\nFunction\n\n\na function accepting a file path as an argument and returning a promise that resolves to the parsed JSON contents of the file as a \nPromise\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nArtifactCollector\n\n\nthe created artifact collector\n\n\n\n\n\n\n\n\nTypes\n\n\nArtifactCollector\n\n\nArtifactCollector#collectArtifacts( entries )\n\n\nObtain artifact information asynchronously, starting from a set of flow definitions.\n\n\nExample:\n\n\ncollector.collectArtifacts( [ { flows: [ \nflow\n ], themes: [ \nmy\n, \ndefault\n  ] } ] )\n   .then( artifacts =\n {\n      assert( Array.isArray( artifacts.flows ) );\n      assert( Array.isArray( artifacts.themes ) );\n      assert( Array.isArray( artifacts.pages ) );\n      assert( Array.isArray( artifacts.layouts ) );\n      assert( Array.isArray( artifacts.widgets ) );\n      assert( Array.isArray( artifacts.controls ) );\n   } );\n// =\n {\n//       flows: [ ... ],\n//       themes: [ ... ],\n//       pages: [ ... ],\n//       layouts: [ ... ],\n//       widgets: [ ... ],\n//       contros: [ ... ]\n//    }\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nentries\n\n\nArray.\nObject\n\n\na list of entries containing themes and flows to follow to find all the pages reachable from the flow and their required artifacts\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPromise.\nObject\n\n\nthe artifact listing with the keys \nflows\n, \nthemes\n, \npages\n, \nlayouts\n, \nwidgets\n and \ncontrols\n, of which each is an array of artifact objects\n\n\n\n\n\n\n\n\nArtifactCollector#collectFlows( entries )\n\n\nAsynchronously collect all flows corresponding to the given paths.\n\n\nExample:\n\n\ncollector.collectFlows( [ { flows: [ \npath/to/flow.json\n ] } ] )\n   .then( flows =\n {\n      assert( Array.isArray( flows ) );\n   } );\n// =\n [ {\n//       refs: [ \nflow\n ],\n//       name: \nflow\n,\n//       path: \npath/to/flow.json\n,\n//       pages: [ ... ]\n//    } ]\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nentries\n\n\nArray\n\n\na list of entry objects containing a flows key\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPromise.\nArray\n\n\na promise for an array of flow-meta objects\n\n\n\n\n\n\n\n\nArtifactCollector#collectThemes( entries )\n\n\nCollect meta information on the given themes.\n\n\nExample:\n\n\ncollector.collectThemes( [ { themes: [ \nmy.theme\n, \ndefault.theme\n ] } ] )\n   .then( themes =\n {\n      assert( Array.isArray( themes ) );\n   } );\n// =\n [ {\n//       refs: [ \nmy.theme\n ],\n//       name: \nmy.theme\n,\n//       path: \npath/to/my.theme\n\n//    }, {\n//       refs: [ \ndefault.theme\n ],\n//       name: \ndefault.theme\n,\n//       path: \npath/to/laxar-uikit/themes/default.theme\n\n//    } ]\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nentries\n\n\nArray.\nObject\n\n\na list of entries with themes to include in the artifacts\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPromise.\nArray\n\n\na promise for an array of meta-information about all themes\n\n\n\n\n\n\n\n\nArtifactCollector#collectPages( flows )\n\n\nAsynchronously collect all pages that are reachable from the given list of flows.\n\n\nExample:\n\n\ncollector.collectPages( flows )\n   .then( pages =\n {\n      assert( Array.isArray( pages ) );\n   } );\n// =\n [ {\n//       refs: [ \npage\n ],\n//       name: \npage\n,\n//       path: \npath/to/page.json\n,\n//       pages: [ ... ],\n//       layouts: [ ... ],\n//       widgets: [ ... ]\n//    }, ... ]\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nflows\n\n\nArray.\nString\n\n\na list of flow artifacts as returned by \nArtifactCollector#collectFlows\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPromise.\nArray\n\n\na promise for a combined array of page meta information for these flows\n\n\n\n\n\n\n\n\nArtifactCollector#collectLayouts( pages )\n\n\nFinds layouts based on them being referenced in page areas.\n\n\nExample:\n\n\ncollector.collectLayouts( pages )\n   .then( layouts =\n {\n      assert( Array.isArray( layouts ) );\n   } );\n// =\n [ {\n//       refs: [ \nlayout\n ],\n//       name: \nlayout\n,\n//       path: \npath/to/layout\n\n//    }, ... ]\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npages\n\n\nArray\n\n\na list of page artifacts as returned by \nArtifactCollector#collectPages\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPromise.\nArray\n\n\na promise for an array of meta-information about all layouts\n\n\n\n\n\n\n\n\nArtifactCollector#collectWidgets( pages )\n\n\nCollect meta information on all widget that are referenced from the given pages.\n\n\nExample:\n\n\ncollector.collectWidgets( pages )\n   .then( widgets =\n {\n      assert( Array.isArray( widgets ) );\n   } );\n// =\n [ {\n//       refs: [ \nwidget\n ],\n//       name: \nwidget\n,\n//       path: \npath/to/widget\n,\n//       controls: [ ... ]\n//    }, ... ]\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npages\n\n\nArray\n\n\na list of page artifacts as returned by \nArtifactCollector#collectPages\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPromise.\nArray\n\n\na promise for an array of meta-information about all reachable widgets\n\n\n\n\n\n\n\n\nArtifactCollector#collectControls( widgets )\n\n\nCollect meta information on all controls that are referenced by the given widgets.\n\n\nExample:\n\n\ncollector.collectControls( widgets, themes )\n   .then( controls =\n {\n      assert( Array.isArray( controls ) );\n   } );\n// =\n [ {\n//       refs: [ \ncontrol\n ],\n//       name: \ncontrol\n,\n//       path: \npath/to/control\n,\n//       controls: [ ... ]\n//    }, ... ]\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwidgets\n\n\nArray\n\n\na list of widget artifacts as returned by \nArtifactCollector#collectWidgets\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPromise.\nArray\n\n\na promise for an array of meta-information about all reachable controls", 
            "title": "artifactCollector"
        }, 
        {
            "location": "/api/artifact_collector.js/#artifactcollector", 
            "text": "Determine application artifacts by inspecting flow, pages and widgets.", 
            "title": "artifactCollector"
        }, 
        {
            "location": "/api/artifact_collector.js/#contents", 
            "text": "Module Members   create   Types   ArtifactCollector  ArtifactCollector#collectArtifacts  ArtifactCollector#collectFlows  ArtifactCollector#collectThemes  ArtifactCollector#collectPages  ArtifactCollector#collectLayouts  ArtifactCollector#collectWidgets  ArtifactCollector#collectControls", 
            "title": "Contents"
        }, 
        {
            "location": "/api/artifact_collector.js/#module-members", 
            "text": "", 
            "title": "Module Members"
        }, 
        {
            "location": "/api/artifact_collector.js/#parameters", 
            "text": "Property  Type  Description      log  Object  a logger instance with at least a  log.error()  method    options  Object  additional options    options.projectPath  Function  a function resolving a given file path to something that can be read by the  readJson  function and either returning it as a  String  or asynchronously    options.fileContents  Object  an object mapping file paths (as returned by options.projectPath) to promises that resolve to the parsed JSON contents of the file    options.readJson  Function  a function accepting a file path as an argument and returning a promise that resolves to the parsed JSON contents of the file as a  Promise", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/artifact_collector.js/#returns", 
            "text": "Type  Description      ArtifactCollector  the created artifact collector", 
            "title": "Returns"
        }, 
        {
            "location": "/api/artifact_collector.js/#types", 
            "text": "", 
            "title": "Types"
        }, 
        {
            "location": "/api/artifact_collector.js/#parameters_1", 
            "text": "Property  Type  Description      entries  Array. Object  a list of entries containing themes and flows to follow to find all the pages reachable from the flow and their required artifacts", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/artifact_collector.js/#returns_1", 
            "text": "Type  Description      Promise. Object  the artifact listing with the keys  flows ,  themes ,  pages ,  layouts ,  widgets  and  controls , of which each is an array of artifact objects", 
            "title": "Returns"
        }, 
        {
            "location": "/api/artifact_collector.js/#parameters_2", 
            "text": "Property  Type  Description      entries  Array  a list of entry objects containing a flows key", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/artifact_collector.js/#returns_2", 
            "text": "Type  Description      Promise. Array  a promise for an array of flow-meta objects", 
            "title": "Returns"
        }, 
        {
            "location": "/api/artifact_collector.js/#parameters_3", 
            "text": "Property  Type  Description      entries  Array. Object  a list of entries with themes to include in the artifacts", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/artifact_collector.js/#returns_3", 
            "text": "Type  Description      Promise. Array  a promise for an array of meta-information about all themes", 
            "title": "Returns"
        }, 
        {
            "location": "/api/artifact_collector.js/#parameters_4", 
            "text": "Property  Type  Description      flows  Array. String  a list of flow artifacts as returned by  ArtifactCollector#collectFlows", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/artifact_collector.js/#returns_4", 
            "text": "Type  Description      Promise. Array  a promise for a combined array of page meta information for these flows", 
            "title": "Returns"
        }, 
        {
            "location": "/api/artifact_collector.js/#parameters_5", 
            "text": "Property  Type  Description      pages  Array  a list of page artifacts as returned by  ArtifactCollector#collectPages", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/artifact_collector.js/#returns_5", 
            "text": "Type  Description      Promise. Array  a promise for an array of meta-information about all layouts", 
            "title": "Returns"
        }, 
        {
            "location": "/api/artifact_collector.js/#parameters_6", 
            "text": "Property  Type  Description      pages  Array  a list of page artifacts as returned by  ArtifactCollector#collectPages", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/artifact_collector.js/#returns_6", 
            "text": "Type  Description      Promise. Array  a promise for an array of meta-information about all reachable widgets", 
            "title": "Returns"
        }, 
        {
            "location": "/api/artifact_collector.js/#parameters_7", 
            "text": "Property  Type  Description      widgets  Array  a list of widget artifacts as returned by  ArtifactCollector#collectWidgets", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/artifact_collector.js/#returns_7", 
            "text": "Type  Description      Promise. Array  a promise for an array of meta-information about all reachable controls", 
            "title": "Returns"
        }, 
        {
            "location": "/api/artifact_listing.js/", 
            "text": "artifactListing\n\n\nDetermine application artifacts by inspecting flow, pages and widgets.\n\n\nContents\n\n\nModule Members\n\n\n\n\ncreate\n\n\n\n\nTypes\n\n\n\n\nArtifactListing\n\n\nArtifactListing#buildAliases\n\n\nArtifactListing#buildAssets\n\n\n\n\n\n\n\n\nModule Members\n\n\ncreate( log, options )\n\n\nCreate an artifact listing instance.\n\n\nExample:\n\n\nconst listing = laxarTooling.artifactListing.create( log, {\n   projectPath: ref =\n path.relative( process.cwd, path.resolve( ref ) ),\n   fileExists: filename =\n new Promise( resolve =\n {\n      fs.access( filename, fs.F_OK, err =\n { resolve( !err ); } );\n   } ),\n   readJson: filename =\n new Promise( ( resolve, reject ) =\n {\n      fs.readFile( filename, ( err, contents ) =\n {\n         try {\n            err ? reject( err ) : resolve( JSON.parse( contents ) );\n         }\n         catch( err ) {\n            reject( err );\n         }\n      } );\n   } ),\n   requireFile: ( module, loader ) =\n ( () =\n `require( \n${module}\n )` )\n} );\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlog\n\n\nObject\n\n\na logger instance with at least a \nlog.error()\n method\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nadditional options\n\n\n\n\n\n\noptions.projectPath\n\n\nFunction\n\n\na function resolving a given file path to something that can be read by the \nreadJson\n function and either returning it as a \nString\n or asynchronously\n\n\n\n\n\n\noptions.fileContents\n\n\nObject\n\n\nan object mapping file paths (as returned by options.projectPath) to promises that resolve to the parsed JSON contents of the file\n\n\n\n\n\n\noptions.readJson\n\n\nFunction\n\n\na function accepting a file path as an argument and returning a promise that resolves to the parsed JSON contents of the file as a \nPromise\n\n\n\n\n\n\noptions.fileExists\n\n\nFunction\n\n\na function accepting a file path as an argument and returning a promise that resolves to either \ntrue\n or \nfalse\n depending on the existance of the given file (similar to the deprecated \nfs.exists()\n)\n\n\n\n\n\n\noptions.assetResolver\n\n\nFunction\n\n\noverride the default asset resolver created with the \nprojectPath\n and \nfileExists\n callbacks\n\n\n\n\n\n\noptions.requireFile\n\n\nFunction\n\n\na callback that is called for descriptors, definitions, modules and assets, to inject content into the output\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nArtifactListing\n\n\nthe created artifact listing builder\n\n\n\n\n\n\n\n\nTypes\n\n\nArtifactListing\n\n\nArtifactListing#buildAliases( entries )\n\n\nCreate a map from artifact refs to indices.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nentries\n\n\nArray\n\n\nany of the artifact sub-lists returned by \nArtifactCollector\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPromise.\nObject\n\n\nthe map from artifact refs to indices\n\n\n\n\n\n\n\n\nArtifactListing#buildAssets( artifact, themes, descriptor )\n\n\nBuild the assets object for an artifact and the given themes.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nartifact\n\n\nObject\n\n\nthe artifact to generate the asset listing for\n\n\n\n\n\n\nthemes\n\n\nArray.\nObject\n\n\nthe themes to use for resolving themed artifacts\n\n\n\n\n\n\ndescriptor\n\n\nObject\n\n\nthe (possibly incomplete) artifact descriptor\n\n\n\n\n\n\ndescriptor.assets\n\n\nArray\n\n\nassets to read and embed into the output using the \ncontent\n key\n\n\n\n\n\n\ndescriptor.assetUrls\n\n\nArray\n\n\nassets to resolve and list using the \nurl\n key\n\n\n\n\n\n\ndescriptor.themedAssets\n\n\nArray\n\n\nthemed assets to read and embed into the output using the \ncontent\n key\n\n\n\n\n\n\ndescriptor.themedUrlAssets\n\n\nArray\n\n\nthemed assets to resolve and list using the \nurl\n key\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nObject\n\n\nthe asset listing, containing sub-listings for each theme and entries for each (available) asset, pointing either to a URL or including the asset's raw content", 
            "title": "artifactListing"
        }, 
        {
            "location": "/api/artifact_listing.js/#artifactlisting", 
            "text": "Determine application artifacts by inspecting flow, pages and widgets.", 
            "title": "artifactListing"
        }, 
        {
            "location": "/api/artifact_listing.js/#contents", 
            "text": "Module Members   create   Types   ArtifactListing  ArtifactListing#buildAliases  ArtifactListing#buildAssets", 
            "title": "Contents"
        }, 
        {
            "location": "/api/artifact_listing.js/#module-members", 
            "text": "", 
            "title": "Module Members"
        }, 
        {
            "location": "/api/artifact_listing.js/#parameters", 
            "text": "Property  Type  Description      log  Object  a logger instance with at least a  log.error()  method    options  Object  additional options    options.projectPath  Function  a function resolving a given file path to something that can be read by the  readJson  function and either returning it as a  String  or asynchronously    options.fileContents  Object  an object mapping file paths (as returned by options.projectPath) to promises that resolve to the parsed JSON contents of the file    options.readJson  Function  a function accepting a file path as an argument and returning a promise that resolves to the parsed JSON contents of the file as a  Promise    options.fileExists  Function  a function accepting a file path as an argument and returning a promise that resolves to either  true  or  false  depending on the existance of the given file (similar to the deprecated  fs.exists() )    options.assetResolver  Function  override the default asset resolver created with the  projectPath  and  fileExists  callbacks    options.requireFile  Function  a callback that is called for descriptors, definitions, modules and assets, to inject content into the output", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/artifact_listing.js/#returns", 
            "text": "Type  Description      ArtifactListing  the created artifact listing builder", 
            "title": "Returns"
        }, 
        {
            "location": "/api/artifact_listing.js/#types", 
            "text": "", 
            "title": "Types"
        }, 
        {
            "location": "/api/artifact_listing.js/#parameters_1", 
            "text": "Property  Type  Description      entries  Array  any of the artifact sub-lists returned by  ArtifactCollector", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/artifact_listing.js/#returns_1", 
            "text": "Type  Description      Promise. Object  the map from artifact refs to indices", 
            "title": "Returns"
        }, 
        {
            "location": "/api/artifact_listing.js/#parameters_2", 
            "text": "Property  Type  Description      artifact  Object  the artifact to generate the asset listing for    themes  Array. Object  the themes to use for resolving themed artifacts    descriptor  Object  the (possibly incomplete) artifact descriptor    descriptor.assets  Array  assets to read and embed into the output using the  content  key    descriptor.assetUrls  Array  assets to resolve and list using the  url  key    descriptor.themedAssets  Array  themed assets to read and embed into the output using the  content  key    descriptor.themedUrlAssets  Array  themed assets to resolve and list using the  url  key", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/artifact_listing.js/#returns_2", 
            "text": "Type  Description      Object  the asset listing, containing sub-listings for each theme and entries for each (available) asset, pointing either to a URL or including the asset's raw content", 
            "title": "Returns"
        }, 
        {
            "location": "/api/asset_resolver.js/", 
            "text": "assetResolver\n\n\nHelpers for resolving artifact assets\n\n\nContents\n\n\nModule Members\n\n\n\n\ncreate\n\n\n\n\nTypes\n\n\n\n\nAssetResolver\n\n\nAssetResolver#resolveAssets\n\n\nAssetResolver#resolveThemedAssets\n\n\n\n\n\n\n\n\nModule Members\n\n\ncreate( log, options )\n\n\nCreate an asset resolver instance.\n\n\nExample:\n\n\nconst resolver = laxarTooling.assetResolver.create( log, {\n   projectPath: ref =\n path.relative( base, path.resolve( ref ) ),\n   fileExists: filename =\n new Promise( resolve =\n {\n      fs.access( filename, fs.F_OK, err =\n resolve( !err ) );\n   } )\n} );\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlog\n\n\nObject\n\n\na logger instance with at least a \nlog.error()\n method\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nadditional options\n\n\n\n\n\n\noptions.projectPath\n\n\nFunction\n\n\na function resolving a given file path to something that can be read by the \nfileExists\n function and either returning it as a \nString\n or asynchronously as a \nPromise\n\n\n\n\n\n\noptions.fileExists\n\n\nFunction\n\n\na function accepting a file path as an argument and returning a promise that resolves to either \ntrue\n or \nfalse\n depending on the existance of the given file (similar to the deprecated \nfs.exists()\n)\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAssetResolver\n\n\nthe created asset resolver\n\n\n\n\n\n\n\n\nTypes\n\n\nAssetResolver\n\n\nAssetResolver#resolveAssets( artifact, assetPaths )\n\n\nResolve assets for an artifact.\n\n\nExample:\n\n\nresolver.resolveAssets( {\n   name: \nmy-artifact\n,\n   path: \npath/to/my-artifact\n\n}, [\n   \nmessages.json\n,\n   \nnon-existing-file.txt\n\n] ).then( assets =\n {\n      asset( typeof assets === \nobject\n )\n   } )\n// =\n {\n//       \nmessages.json\n: \npath/to/my-artifact/messages.json\n\n//    }\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nartifact\n\n\nObject\n\n\nan artifact as returned by \nArtifactCollector\n.\n\n\n\n\n\n\nassetPaths\n\n\nArray.\nString\n\n\nthe artifact assets to resolve\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nObject\n\n\nan object mapping paths (relative to the artifact) to URLs for existing files\n\n\n\n\n\n\n\n\nAssetResolver#resolveThemedAssets( artifact, theme, assetPaths )\n\n\nResolve themed assets for an artifact.\n\n\nExample:\n\n\nresolver.resolveThemedAssets( {\n   name: \nmy-artifact\n,\n   path: \npath/to/my-artifact\n\n}, {\n   name: \ndefault.theme\n,\n   path: \npath/to/default.theme\n\n}, [\n   \nmy-artifact.html\n,\n   \ncss/my-artifact.css\n\n] ).then( assets =\n {\n      asset( typeof assets === \nobject\n )\n   } )\n// =\n {\n//       \nmy-artifact.html\n: \npath/to/my-artifact/default.theme/my-artifact.html\n,\n//       \ncss/my-artifact.css\n: \npath/to/my-artifact/default.theme/css/my-artifact.css\n\n//    }\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nartifact\n\n\nObject\n\n\nan artifact as returned by \nArtifactCollector\n.\n\n\n\n\n\n\ntheme\n\n\nArray.\nObject\n\n\na theme artifact as returned by \nArtifactCollector#collectThemes\n.\n\n\n\n\n\n\nassetPaths\n\n\nArray.\nString\n\n\nthe artifact assets to resolve\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nObject\n\n\nan object mapping paths (relative to the artifact) to URLs for existing files", 
            "title": "assetResolver"
        }, 
        {
            "location": "/api/asset_resolver.js/#assetresolver", 
            "text": "Helpers for resolving artifact assets", 
            "title": "assetResolver"
        }, 
        {
            "location": "/api/asset_resolver.js/#contents", 
            "text": "Module Members   create   Types   AssetResolver  AssetResolver#resolveAssets  AssetResolver#resolveThemedAssets", 
            "title": "Contents"
        }, 
        {
            "location": "/api/asset_resolver.js/#module-members", 
            "text": "", 
            "title": "Module Members"
        }, 
        {
            "location": "/api/asset_resolver.js/#parameters", 
            "text": "Property  Type  Description      log  Object  a logger instance with at least a  log.error()  method    options  Object  additional options    options.projectPath  Function  a function resolving a given file path to something that can be read by the  fileExists  function and either returning it as a  String  or asynchronously as a  Promise    options.fileExists  Function  a function accepting a file path as an argument and returning a promise that resolves to either  true  or  false  depending on the existance of the given file (similar to the deprecated  fs.exists() )", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/asset_resolver.js/#returns", 
            "text": "Type  Description      AssetResolver  the created asset resolver", 
            "title": "Returns"
        }, 
        {
            "location": "/api/asset_resolver.js/#types", 
            "text": "", 
            "title": "Types"
        }, 
        {
            "location": "/api/asset_resolver.js/#parameters_1", 
            "text": "Property  Type  Description      artifact  Object  an artifact as returned by  ArtifactCollector .    assetPaths  Array. String  the artifact assets to resolve", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/asset_resolver.js/#returns_1", 
            "text": "Type  Description      Object  an object mapping paths (relative to the artifact) to URLs for existing files", 
            "title": "Returns"
        }, 
        {
            "location": "/api/asset_resolver.js/#parameters_2", 
            "text": "Property  Type  Description      artifact  Object  an artifact as returned by  ArtifactCollector .    theme  Array. Object  a theme artifact as returned by  ArtifactCollector#collectThemes .    assetPaths  Array. String  the artifact assets to resolve", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/asset_resolver.js/#returns_2", 
            "text": "Type  Description      Object  an object mapping paths (relative to the artifact) to URLs for existing files", 
            "title": "Returns"
        }, 
        {
            "location": "/api/file_reader.js/", 
            "text": "fileReader\n\n\nHelper for reading and caching files.\n\n\nContents\n\n\nModule Members\n\n\n\n\ncreate\n\n\n\n\nModule Members\n\n\ncreate( log, fileContents )\n\n\nCreate a function to read files from the file system an cache the contents.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlog\n\n\nLogger\n\n\na logger to log messages in case of error\n\n\n\n\n\n\nfileContents\n\n\nObject\n\n\nthe object to cache file content promises in\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFunction\n\n\na function that wraps \nfs.readFile\n and returns a \nPromise", 
            "title": "fileReader"
        }, 
        {
            "location": "/api/file_reader.js/#filereader", 
            "text": "Helper for reading and caching files.", 
            "title": "fileReader"
        }, 
        {
            "location": "/api/file_reader.js/#contents", 
            "text": "Module Members   create", 
            "title": "Contents"
        }, 
        {
            "location": "/api/file_reader.js/#module-members", 
            "text": "", 
            "title": "Module Members"
        }, 
        {
            "location": "/api/file_reader.js/#parameters", 
            "text": "Property  Type  Description      log  Logger  a logger to log messages in case of error    fileContents  Object  the object to cache file content promises in", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/file_reader.js/#returns", 
            "text": "Type  Description      Function  a function that wraps  fs.readFile  and returns a  Promise", 
            "title": "Returns"
        }, 
        {
            "location": "/api/json_reader.js/", 
            "text": "jsonReader\n\n\nHelper for reading, parsing and caching JSON files.\n\n\nContents\n\n\nModule Members\n\n\n\n\ncreate\n\n\n\n\nModule Members\n\n\ncreate( log, fileContents )\n\n\nCreate a function to read files from the file system, parses them as JSON an cache the contents.\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlog\n\n\nLogger\n\n\na logger to log messages in case of error\n\n\n\n\n\n\nfileContents\n\n\nObject\n\n\nthe object to cache file content promises in\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFunction\n\n\na function that returns a \nPromise", 
            "title": "jsonReader"
        }, 
        {
            "location": "/api/json_reader.js/#jsonreader", 
            "text": "Helper for reading, parsing and caching JSON files.", 
            "title": "jsonReader"
        }, 
        {
            "location": "/api/json_reader.js/#contents", 
            "text": "Module Members   create", 
            "title": "Contents"
        }, 
        {
            "location": "/api/json_reader.js/#module-members", 
            "text": "", 
            "title": "Module Members"
        }, 
        {
            "location": "/api/json_reader.js/#parameters", 
            "text": "Property  Type  Description      log  Logger  a logger to log messages in case of error    fileContents  Object  the object to cache file content promises in", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/json_reader.js/#returns", 
            "text": "Type  Description      Function  a function that returns a  Promise", 
            "title": "Returns"
        }, 
        {
            "location": "/api/serialize.js/", 
            "text": "serialize\n\n\nSerialize JavaScript objects.\n\n\nContents\n\n\nModule Members\n\n\n\n\nserialize\n\n\n\n\nModule Members\n\n\nserialize( object, indent, pad, space )\n\n\nSerialize the given object to valid, human-readable JavaScript.\nMostly like JSON.stringify, this function drops quotes from object keys if possible,\nand \"serializes\" functions by calling them and writing the result to the output\nstring. To embed user-defined code in the output, embed functions into the object.\nAtomic values are serialized with JSON.stringify. Linebreaks are inserted as deemed\nnecessary.\n\n\nExample:\n\n\nserialize( { a: 1, b: [ 1, 2, 3 ], c: () =\n \nrequire( \ntest\n )\n } )\n// =\n \n{ a: 1, b: [ 1, 2, 3 ], c: require( \ntest\n ) }\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nobject\n\n\nObject\n\n\nthe object to serialize\n\n\n\n\n\n\nindent\n\n\nNumber\n\n\nthe number of spaces to use for indent\n\n\n\n\n\n\npad\n\n\nNumber\n\n\nthe initial left padding\n\n\n\n\n\n\nspace\n\n\nString\n\n\nthe character(s) to use for padding\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nString\n\n\nthe serialized JavaScript code", 
            "title": "serialize"
        }, 
        {
            "location": "/api/serialize.js/#serialize", 
            "text": "Serialize JavaScript objects.", 
            "title": "serialize"
        }, 
        {
            "location": "/api/serialize.js/#contents", 
            "text": "Module Members   serialize", 
            "title": "Contents"
        }, 
        {
            "location": "/api/serialize.js/#module-members", 
            "text": "", 
            "title": "Module Members"
        }, 
        {
            "location": "/api/serialize.js/#parameters", 
            "text": "Property  Type  Description      object  Object  the object to serialize    indent  Number  the number of spaces to use for indent    pad  Number  the initial left padding    space  String  the character(s) to use for padding", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/serialize.js/#returns", 
            "text": "Type  Description      String  the serialized JavaScript code", 
            "title": "Returns"
        }
    ]
}