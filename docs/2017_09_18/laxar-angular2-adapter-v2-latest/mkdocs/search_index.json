{
    "docs": [
        {
            "location": "/", 
            "text": "LaxarJS Angular 2 Adapter\n\n\n\n\nWrite LaxarJS widgets and controls using Angular 2\n\n\n\n\nThis technology adapter integrates widgets and controls created using Angular 2 into \nLaxarJS\n applications, by implementing the integration technology \n\"angular2\"\n (skip to the end for a short discussion of the technology identifier).\n\n\nInstallation\n\n\nNote: These instructions only work for LaxarJS v2.\n\n\nnpm install --save laxar-angular2-adapter\n\n\n\n\n\nThis will automatically install Angular 2 and all necessary peer dependencies (libraries and shims).\nLoad the Angular adapter module (\nlaxar-angular2-adapter\n) into your project and pass it to \nlaxar.create\n:\n\n\nimport\n \n{\n \ncreate\n \n}\n \nfrom\n \nlaxar\n;\n\n\nimport\n \n*\n \nas\n \nangular2Adapter\n \nfrom\n \nlaxar-angular2-adapter\n;\n\n\nimport\n \nartifacts\n \nfrom\n \nlaxar-loader/artifacts?flow=main\ntheme=default\n;\n\n\nconst\n \nconfiguration\n \n=\n \n{\n \n/* ... */\n \n};\n\n\ncreate\n(\n \n[\n \nangular2Adapter\n \n/* , ... */\n \n],\n \nartifacts\n,\n \nconfiguration\n \n)\n\n   \n.\nflow\n(\n \n/* ... name, element ... */\n \n)\n\n   \n.\nbootstrap\n();\n\n\n\n\n\n\nThe Angular 2 adapter is not available as pre-built version, which means that Typescript support will need to be added to your project.\nSince \n\"angular2\"\n widgets most probably will need a Typescript compiler anyways, additional setup steps are necessary.\nFirst of all you'll need a \ntsconfig.json\n in your project that configures the Typescript compiler.\nBelow is a basic version we used to implement this adapter, but feel free to change settings if you are more comfortable with Typescript and its compiler options.\n\n\n{\n\n   \ncompilerOptions\n:\n \n{\n\n      \ntarget\n:\n \nes5\n,\n\n      \nmodule\n:\n \ncommonjs\n,\n\n      \nmoduleResolution\n:\n \nnode\n,\n\n      \nsourceMap\n:\n \ntrue\n,\n\n      \nemitDecoratorMetadata\n:\n \ntrue\n,\n\n      \nexperimentalDecorators\n:\n \ntrue\n,\n\n      \nlib\n:\n \n[\n \nes2015\n,\n \ndom\n \n],\n\n      \nnoImplicitAny\n:\n \nfalse\n,\n\n      \nsuppressImplicitAnyIndexErrors\n:\n \ntrue\n,\n\n      \nbaseUrl\n:\n \n./\n,\n\n      \ntypeRoots\n:\n \n[\n\n         \n./node_modules/@types/\n\n      \n]\n\n   \n},\n\n   \ncompileOnSave\n:\n \nfalse\n,\n\n   \nexclude\n:\n \n[\n\n      \n**/bower_components/*\n,\n\n      \n**/node_modules/*\n,\n\n      \n**/*-aot.ts\n\n   \n]\n\n\n}\n\n\n\n\n\n\nThen you need to add webpack support for Typescript.\nThis means you'll need the actual compiler as well as a Typescript loader for webpack.\nThere some different flavors of compilers and loaders for Typescript available, but we chose to go with the common ones.\nAdd these to your project:\n\n\nnpm install --save-dev typescript ts-loader\n\n\n\n\n\n\nFinally include support for Typescript in your \nwebpack.config.js\n.\nBelow is a very simple example, showing only the modified parts:\n\n\nconfig\n \n=\n \n{\n\n\n   \nresolve\n:\n \n{\n\n      \n// Here we add support for Typescript file extensions\n\n      \nextensions\n:\n \n[\n \n.js\n,\n \n.jsx\n,\n \n.ts\n,\n \n.tsx\n \n],\n\n   \n},\n\n\n   \nmodule\n:\n \n{\n\n      \nrules\n:\n \n[\n\n         \n// And here we add the loader rule for these extensions\n\n         \n{\n\n            \ntest\n:\n \n/\\.tsx?$/\n,\n\n            \nloader\n:\n \nts-loader\n\n         \n}\n\n      \n]\n\n   \n}\n\n\n};\n\n\n\n\n\n\nThat's it.\n\n\nUsage\n\n\nWith the adapter in place, you can now write widgets and controls using Angular 2.\nThe \nLaxarJS Yeoman generator\n can create simple widgets and controls for the integration technology \n\"angular2\"\n.\n\n\nCreating an Angular 2 Widget\n\n\nYou can use the LaxarJS generator for Yeoman to create an \nAngular 2\n widget by selecting \n\"angular2\"\n as \nintegration technology\n.\nThe new widget has a \n.ts\n file with a simple widget component and a module declaring that component.\n\n\nThis will basically look like this (assuming the widget was named \nexample-widget\n):\n\n\nimport { Component, NgModule } from \n@angular/core\n;\n\n@Component( {\n   templateUrl: \nax-widget:template:example-widget\n\n} )\nexport class ExampleWidget {\n\n   constructor() {\n\n   }\n\n}\n\n@NgModule( {\n   declarations: [ ExampleWidget ]\n} )\nexport class ExampleWidgetModule {}\n\n\n\n\n\nThe most basic LaxarJS widget using Angular 2 as technology is a standard Angular component, that belongs to a module declaring the component.\nThe only important thing is the naming of the module and the component, as the adapter will reference them under these names.\n\n\nAdditionally there is one thing that's completely specific to LaxarJS in this basic setup:\nThe \ntemplateUrl\n property of the component does not directly point to a real file, but rather is an identifier for which template file to load by the LaxarJS Angular 2 adapter.\nThis string will be automatically generated for you when using the yeoman generator and in general should never be changed.\nIf this template url is present, the HTML file under the correct theme folder will be loaded for the widget instance, just as it is the case for any other widget technology.\nFeel free to provide a \"real\" path here or even use an embedded template string, if you don't want to use this mechanism.\n\n\nCreating and using an Angular 2 Control\n\n\nControl support for Angular 2 in LaxarJS is limited to loading the correctly themed stylesheet of the control for you.\nTo be able to use a control (an Angular module and all assets defined for that module) in a widget, you need to import its implementation in the widget and add the corresponding dependencies to the Angular module definition of the widget.\nFor simplicity, we recommend to define and export a module from your control source file and add that as an import to your widget module.\n\n\nSo let's assume the following exemplary control, only defining a directive that modifies the text color of element it is used on:\n\n\nimport { Directive, ElementRef, NgModule } from \n@angular/core\n;\n\n@Directive( {\n   selector: \n[veryImportant]\n\n} )\nclass VeryImportant {\n   constructor( element: ElementRef ) {\n      element.nativeElement.style.color = \nred\n;\n   }\n}\n\n@NgModule( {\n   declarations: [ VeryImportant ],\n   exports: [ VeryImportant ]\n} )\nexport class VeryImportantControlModule {}\n\n\n\n\n\nThe widget that wants to use this control just needs to import the ES module and import the Angular 2 module:\n\n\nimport { VeryImportantControlModule } from \nvery-important-control\n;\n\n// ...\n\n@NgModule( {\n   imports: [ VeryImportantControlModule ],\n   declarations: [ ExampleWidget ]\n} )\nexport class ExampleWidgetModule {}\n\n\n\n\n\nWithin its template the directive defined by the control can now be used just as any other Angular 2 directive:\n\n\nh1\n \nveryImportant\nThis is a very important information!\n/h1\n\n\n\n\n\n\nTesting with LaxarJS Mocks\n\n\nMostly, testing with LaxarJS Mocks works just as for any other technology.\nThe only thing that needs to be loaded are testing shims for \nzone.js\n and some new JavaScript APIs (see \nBrowser Support\n)\nThese shims are already composed in \ntest-support.ts\n in the angular2 adapter.\nSo a basic setup would look like this:\n\n\nimport\n \nlaxar-angular2-adapter/test-support\n;\n\n\nimport\n \n*\n \nas\n \naxMocks\n \nfrom\n \nlaxar-mocks\n;\n\n\n\ndescribe\n(\n \nAn ng2-test-widget\n,\n \n()\n \n=\n \n{\n\n\n   \nlet\n \nwidgetDom\n;\n\n\n   \nbeforeEach\n(\n \naxMocks\n.\nsetupForWidget\n()\n \n);\n\n\n   \nbeforeEach\n(\n \n()\n \n=\n \n{\n\n      \naxMocks\n.\nwidget\n.\nconfigure\n(\n \n{\n\n         \n// Features configuration of the widget\n\n      \n}\n \n);\n\n   \n}\n \n);\n\n   \nbeforeEach\n(\n \naxMocks\n.\nwidget\n.\nload\n \n);\n\n   \nbeforeEach\n(\n \n()\n \n=\n \n{\n\n      \nwidgetDom\n \n=\n \naxMocks\n.\nwidget\n.\nrender\n();\n\n   \n}\n \n);\n\n\n   \nafterEach\n(\n \naxMocks\n.\ntearDown\n \n);\n\n\n   \nit\n(\n \ndoes something useful\n \n)\n \n{\n\n      \n// your tests here\n\n   \n}\n\n\n\n}\n \n);\n\n\n\n\n\n\nBrowser Support\n\n\nAngular 2 makes heavy use of bleeding edge browser features that are no standard yet or are just being implemented in browsers.\nThis may make it necessary to include some shims.\nFor example Internet Explorer 10 will need the \ncore-js\n shim in the application.\nAdd the dependency to your project (we tested with version 2.4.1) and include it at the top of your projects main file (by default this is the file \ninit.js\n):\n\n\nimport\n \ncore-js/client/shim.min.js\n;\n\n\n\n\n\n\nFor widget specs, the \ntest-support.ts\n file of the adapter already includes this shim.\n\n\nWhy the technology identifier \nangular2\n (and not \nangular\n or \nangularx\n or whatever)?\n\n\nOne goal of LaxarJS is to give developers the choice of the framework or library used for the rendering part of a widget.\nStarting from AngularJS 1, LaxarJS now supports many more technologies like Vue.js or React.\nWith the announcement of Angular 2 we very early decided to try to support this new version alongside of the former Angular 1.x releases.\n\n\nSo how should we name this technology when referenced in the widget descriptor file?\nIf we would have chosen \nangular\n, than the installed version of the adapter would have made the difference of the supported version.\nMajor changes in the adapter API would have not been possible since the major version number would have been tied to the major version of AngularJS.\nAdditionally only one version of Angular could be used at a time.\nSo this would be no option.\n\n\nBuilding the support for both versions into one adapter under one version (if at all possible) would have lead to very unmaintainable code and bloated applications.\nSince the current AngularJS version is widely known as Angular 2 and was developed under that name, we just decided to go with \nangular2\n.", 
            "title": "README"
        }, 
        {
            "location": "/#laxarjs-angular-2-adapter", 
            "text": "Write LaxarJS widgets and controls using Angular 2   This technology adapter integrates widgets and controls created using Angular 2 into  LaxarJS  applications, by implementing the integration technology  \"angular2\"  (skip to the end for a short discussion of the technology identifier).", 
            "title": "LaxarJS Angular 2 Adapter"
        }, 
        {
            "location": "/#installation", 
            "text": "Note: These instructions only work for LaxarJS v2.  npm install --save laxar-angular2-adapter  This will automatically install Angular 2 and all necessary peer dependencies (libraries and shims).\nLoad the Angular adapter module ( laxar-angular2-adapter ) into your project and pass it to  laxar.create :  import   {   create   }   from   laxar ;  import   *   as   angular2Adapter   from   laxar-angular2-adapter ;  import   artifacts   from   laxar-loader/artifacts?flow=main theme=default ;  const   configuration   =   {   /* ... */   };  create (   [   angular2Adapter   /* , ... */   ],   artifacts ,   configuration   ) \n    . flow (   /* ... name, element ... */   ) \n    . bootstrap ();   The Angular 2 adapter is not available as pre-built version, which means that Typescript support will need to be added to your project.\nSince  \"angular2\"  widgets most probably will need a Typescript compiler anyways, additional setup steps are necessary.\nFirst of all you'll need a  tsconfig.json  in your project that configures the Typescript compiler.\nBelow is a basic version we used to implement this adapter, but feel free to change settings if you are more comfortable with Typescript and its compiler options.  { \n    compilerOptions :   { \n       target :   es5 , \n       module :   commonjs , \n       moduleResolution :   node , \n       sourceMap :   true , \n       emitDecoratorMetadata :   true , \n       experimentalDecorators :   true , \n       lib :   [   es2015 ,   dom   ], \n       noImplicitAny :   false , \n       suppressImplicitAnyIndexErrors :   true , \n       baseUrl :   ./ , \n       typeRoots :   [ \n          ./node_modules/@types/ \n       ] \n    }, \n    compileOnSave :   false , \n    exclude :   [ \n       **/bower_components/* , \n       **/node_modules/* , \n       **/*-aot.ts \n    ]  }   Then you need to add webpack support for Typescript.\nThis means you'll need the actual compiler as well as a Typescript loader for webpack.\nThere some different flavors of compilers and loaders for Typescript available, but we chose to go with the common ones.\nAdd these to your project:  npm install --save-dev typescript ts-loader   Finally include support for Typescript in your  webpack.config.js .\nBelow is a very simple example, showing only the modified parts:  config   =   { \n\n    resolve :   { \n       // Here we add support for Typescript file extensions \n       extensions :   [   .js ,   .jsx ,   .ts ,   .tsx   ], \n    }, \n\n    module :   { \n       rules :   [ \n          // And here we add the loader rule for these extensions \n          { \n             test :   /\\.tsx?$/ , \n             loader :   ts-loader \n          } \n       ] \n    }  };   That's it.", 
            "title": "Installation"
        }, 
        {
            "location": "/#usage", 
            "text": "With the adapter in place, you can now write widgets and controls using Angular 2.\nThe  LaxarJS Yeoman generator  can create simple widgets and controls for the integration technology  \"angular2\" .", 
            "title": "Usage"
        }, 
        {
            "location": "/#creating-an-angular-2-widget", 
            "text": "You can use the LaxarJS generator for Yeoman to create an  Angular 2  widget by selecting  \"angular2\"  as  integration technology .\nThe new widget has a  .ts  file with a simple widget component and a module declaring that component.  This will basically look like this (assuming the widget was named  example-widget ):  import { Component, NgModule } from  @angular/core ;\n\n@Component( {\n   templateUrl:  ax-widget:template:example-widget \n} )\nexport class ExampleWidget {\n\n   constructor() {\n\n   }\n\n}\n\n@NgModule( {\n   declarations: [ ExampleWidget ]\n} )\nexport class ExampleWidgetModule {}  The most basic LaxarJS widget using Angular 2 as technology is a standard Angular component, that belongs to a module declaring the component.\nThe only important thing is the naming of the module and the component, as the adapter will reference them under these names.  Additionally there is one thing that's completely specific to LaxarJS in this basic setup:\nThe  templateUrl  property of the component does not directly point to a real file, but rather is an identifier for which template file to load by the LaxarJS Angular 2 adapter.\nThis string will be automatically generated for you when using the yeoman generator and in general should never be changed.\nIf this template url is present, the HTML file under the correct theme folder will be loaded for the widget instance, just as it is the case for any other widget technology.\nFeel free to provide a \"real\" path here or even use an embedded template string, if you don't want to use this mechanism.", 
            "title": "Creating an Angular 2 Widget"
        }, 
        {
            "location": "/#creating-and-using-an-angular-2-control", 
            "text": "Control support for Angular 2 in LaxarJS is limited to loading the correctly themed stylesheet of the control for you.\nTo be able to use a control (an Angular module and all assets defined for that module) in a widget, you need to import its implementation in the widget and add the corresponding dependencies to the Angular module definition of the widget.\nFor simplicity, we recommend to define and export a module from your control source file and add that as an import to your widget module.  So let's assume the following exemplary control, only defining a directive that modifies the text color of element it is used on:  import { Directive, ElementRef, NgModule } from  @angular/core ;\n\n@Directive( {\n   selector:  [veryImportant] \n} )\nclass VeryImportant {\n   constructor( element: ElementRef ) {\n      element.nativeElement.style.color =  red ;\n   }\n}\n\n@NgModule( {\n   declarations: [ VeryImportant ],\n   exports: [ VeryImportant ]\n} )\nexport class VeryImportantControlModule {}  The widget that wants to use this control just needs to import the ES module and import the Angular 2 module:  import { VeryImportantControlModule } from  very-important-control ;\n\n// ...\n\n@NgModule( {\n   imports: [ VeryImportantControlModule ],\n   declarations: [ ExampleWidget ]\n} )\nexport class ExampleWidgetModule {}  Within its template the directive defined by the control can now be used just as any other Angular 2 directive:  h1   veryImportant This is a very important information! /h1", 
            "title": "Creating and using an Angular 2 Control"
        }, 
        {
            "location": "/#testing-with-laxarjs-mocks", 
            "text": "Mostly, testing with LaxarJS Mocks works just as for any other technology.\nThe only thing that needs to be loaded are testing shims for  zone.js  and some new JavaScript APIs (see  Browser Support )\nThese shims are already composed in  test-support.ts  in the angular2 adapter.\nSo a basic setup would look like this:  import   laxar-angular2-adapter/test-support ;  import   *   as   axMocks   from   laxar-mocks ;  describe (   An ng2-test-widget ,   ()   =   { \n\n    let   widgetDom ; \n\n    beforeEach (   axMocks . setupForWidget ()   ); \n\n    beforeEach (   ()   =   { \n       axMocks . widget . configure (   { \n          // Features configuration of the widget \n       }   ); \n    }   ); \n    beforeEach (   axMocks . widget . load   ); \n    beforeEach (   ()   =   { \n       widgetDom   =   axMocks . widget . render (); \n    }   ); \n\n    afterEach (   axMocks . tearDown   ); \n\n    it (   does something useful   )   { \n       // your tests here \n    }  }   );", 
            "title": "Testing with LaxarJS Mocks"
        }, 
        {
            "location": "/#browser-support", 
            "text": "Angular 2 makes heavy use of bleeding edge browser features that are no standard yet or are just being implemented in browsers.\nThis may make it necessary to include some shims.\nFor example Internet Explorer 10 will need the  core-js  shim in the application.\nAdd the dependency to your project (we tested with version 2.4.1) and include it at the top of your projects main file (by default this is the file  init.js ):  import   core-js/client/shim.min.js ;   For widget specs, the  test-support.ts  file of the adapter already includes this shim.", 
            "title": "Browser Support"
        }, 
        {
            "location": "/#why-the-technology-identifier-angular2-and-not-angular-or-angularx-or-whatever", 
            "text": "One goal of LaxarJS is to give developers the choice of the framework or library used for the rendering part of a widget.\nStarting from AngularJS 1, LaxarJS now supports many more technologies like Vue.js or React.\nWith the announcement of Angular 2 we very early decided to try to support this new version alongside of the former Angular 1.x releases.  So how should we name this technology when referenced in the widget descriptor file?\nIf we would have chosen  angular , than the installed version of the adapter would have made the difference of the supported version.\nMajor changes in the adapter API would have not been possible since the major version number would have been tied to the major version of AngularJS.\nAdditionally only one version of Angular could be used at a time.\nSo this would be no option.  Building the support for both versions into one adapter under one version (if at all possible) would have lead to very unmaintainable code and bloated applications.\nSince the current AngularJS version is widely known as Angular 2 and was developed under that name, we just decided to go with  angular2 .", 
            "title": "Why the technology identifier angular2 (and not angular or angularx or whatever)?"
        }, 
        {
            "location": "/CHANGELOG/", 
            "text": "Changelog\n\n\nLast Changes\n\n\nv2.0.1\n\n\n\n\n#9\n: fixed typescript version\n\n\n\n\nv2.0.0\n\n\nv2.0.0-rc.1\n\n\n\n\n#8\n: fixed dependencies in package.json\n\n\n\n\nv2.0.0-rc.0\n\n\n\n\n#4\n: fixed tests, used laxar-infrastructure, polished README.md\n\n\n#7\n: added Travis-CI support\n\n\n\n\nv2.0.0-alpha.3\n\n\nv2.0.0-alpha.2\n\n\n\n\n#6\n: added .npmignore with \nspec\n folders\n\n\n\n\nv2.0.0-alpha.1\n\n\n\n\n#4\n: removed obsolete adapter-wide anchor element parameter\n\n\n#3\n: removed dist version support\n\n\n\n\nv2.0.0-alpha.0\n\n\n\n\n#1\n: implemented angular 2 widget adapter", 
            "title": "Changelog"
        }, 
        {
            "location": "/CHANGELOG/#changelog", 
            "text": "", 
            "title": "Changelog"
        }, 
        {
            "location": "/CHANGELOG/#last-changes", 
            "text": "", 
            "title": "Last Changes"
        }, 
        {
            "location": "/CHANGELOG/#v201", 
            "text": "#9 : fixed typescript version", 
            "title": "v2.0.1"
        }, 
        {
            "location": "/CHANGELOG/#v200", 
            "text": "", 
            "title": "v2.0.0"
        }, 
        {
            "location": "/CHANGELOG/#v200-rc1", 
            "text": "#8 : fixed dependencies in package.json", 
            "title": "v2.0.0-rc.1"
        }, 
        {
            "location": "/CHANGELOG/#v200-rc0", 
            "text": "#4 : fixed tests, used laxar-infrastructure, polished README.md  #7 : added Travis-CI support", 
            "title": "v2.0.0-rc.0"
        }, 
        {
            "location": "/CHANGELOG/#v200-alpha3", 
            "text": "", 
            "title": "v2.0.0-alpha.3"
        }, 
        {
            "location": "/CHANGELOG/#v200-alpha2", 
            "text": "#6 : added .npmignore with  spec  folders", 
            "title": "v2.0.0-alpha.2"
        }, 
        {
            "location": "/CHANGELOG/#v200-alpha1", 
            "text": "#4 : removed obsolete adapter-wide anchor element parameter  #3 : removed dist version support", 
            "title": "v2.0.0-alpha.1"
        }, 
        {
            "location": "/CHANGELOG/#v200-alpha0", 
            "text": "#1 : implemented angular 2 widget adapter", 
            "title": "v2.0.0-alpha.0"
        }
    ]
}