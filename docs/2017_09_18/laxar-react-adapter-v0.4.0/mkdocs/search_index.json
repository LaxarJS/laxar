{
    "docs": [
        {
            "location": "/", 
            "text": "LaxarJS React Adapter\n\n\n\n\nWrite LaxarJS widgets and controls in React\n\n\n\n\nInstallation\n\n\nbower install laxar-react-adapter\n\n\n\n\n\n\nThis will automatically install React if not already installed.\n\n\nAdd the React adapter to your bootstrapping modules, by editing the \ninit.js\n and the \nrequire_config.js\n of your LaxarJS project.\nYou will need to adjust the \npaths\n object in your RequireJS configuration:\n\n\nlaxar-react-adapter\n:\n \nlaxar-react-adapter/laxar-react-adapter\n,\n\n\nreact\n:\n \nreact/react\n,\n\n\nreact-dom\n:\n \nreact/react-dom\n,\n\n\n\n\n\n\nThe adapter relies on \nreact-dom\n, and your widgets will need to find \nreact\n.\nNow you can pass the adapter through the second argument to \nax.bootstrap\n:\n\n\nrequire\n(\n \n[\n\n   \n/* existing dependencies ... */\n,\n\n   \nlaxar-react-adapter\n\n\n],\n \nfunction\n(\n \n/* laxar, applicationModules, resources, ... */\n,\n \nreactAdapter\n \n)\n \n{\n\n   \n// ... setup file listings etc. ...\n\n   \nax\n.\nbootstrap\n(\n \n/* applicationModules */\n,\n \n[\n \nreactAdapter\n \n]\n \n);\n\n\n}\n \n);\n\n\n\n\n\n\nIf you already have other custom adapters in your project, simply add the React adapter to your current list.\n\n\nUsage\n\n\nWith the adapter in place, you can now write widgets and controls using React.\nThe Laxarjs generator can create simple widgets and controls with the integration technology \n\"react\"\n.\nContinue reading for details.\n\n\nCreating a React Widget\n\n\nYou can use the LaxarJS generator for Yeoman to create a \nreact\n widget.\nby selecting \n\"react\"\n as \nintegration technology\n.\nThe new widget has a JSX file with a simple widget controller.\n\n\nFor example \nmyNewWidget.jsx\n:\n\n\nimport\n \nReact\n \nfrom\n \nreact\n;\n\n\nimport\n \nax\n \nfrom\n \nlaxar\n;\n\n\n\nconst\n \ninjections\n \n=\n \n[\n \naxContext\n,\n \naxReactRender\n \n];\n\n\n\nfunction\n \ncreate\n(\n \ncontext\n,\n \nreactRender\n \n)\n \n{\n\n\n   \nreturn\n \n{\n\n      \nonDomAvailable\n:\n \nrender\n\n   \n};\n\n\n   \n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n   \nfunction\n \nrender\n()\n \n{\n\n      \nreactRender\n(\n \ndiv\n/div\n );\n\n   \n}\n\n\n};\n\n\n\nexport\n \ndefault\n \n{\n\n   \nname\n:\n \nmyNewWidget\n,\n\n   \ninjections\n:\n \ninjections\n,\n\n   \ncreate\n:\n \ncreate\n\n\n};\n\n\n\n\n\n\nThe controller in this file injects the \naxContext\n which is a complete object containing all configuration and API specifically available to this widget instance. The injected \naxReactRender\n is provided by the react adapter. This injected function is a no-op as long as the widget is invisible (e.g. in a background-tab, or within a closed popup). As soon as the widget has been attached to the page DOM, \naxReactRender\n goes through to \nReact.render\n.\n\n\nRead the LaxarJS documentation for more about \nwriting widget controllers\n and the available injections.\n\n\nCreating a React Control\n\n\nA LaxarJS control allows you to encapsulates one or more React components with associated CSS styles, that can be overwritten by themes.\n\n\nReact controls are implemented as regular AMD-modules, just like \nplain\n controls.\nSelect \n\"react\"\n as the integration technology when you generate the control with the LaxarJS Yeoman generator.\n\n\nimport\n \nReact\n \nfrom\n \nreact\n;\n\n\n\nconst\n \nMyReactControl\n \n=\n \nReact\n.\ncreateClass\n({\n\n\nrender\n()\n \n{\n\n      \nreturn\n \ndiv\n \nclassName\n=\nmy-new-control\n/div\n;\n\n   \n}\n\n\n}\n \n);\n\n\n\nexport\n \ndefault\n \nMyNewControl\n;\n\n\n\n\n\n\nIn your new control make sure to export all components that you wish to make available to widgets.\n\n\nRead the LaxarJS documentation for more about \nproviding controls\n.\n\n\nTesting with LaxarJS Mocks\n\n\nStarting with \nlaxar-mocks\n v0.5.0, you can pass custom adapters when creating the testbed-setup function.\nSimply write your specs like this:\n\n\ndefine\n(\n \n[\n\n   \njson!../widget.json\n,\n\n   \nlaxar-react-adapter\n,\n\n   \nlaxar-mocks\n\n\n],\n \nfunction\n(\n \ndescriptor\n,\n \naxReactAdapter\n,\n \naxMocks\n \n)\n \n{\n\n   \nuse strict\n;\n\n\n   \ndescribe\n(\n \nThe my-counter-widget\n,\n \nfunction\n()\n \n{\n\n\n      \nbeforeEach\n(\n \naxMocks\n.\ncreateSetupForWidget\n(\n \ndescriptor\n,\n \n{\n\n         \n// register the adapter:\n\n         \nadapter\n:\n \naxReactAdapter\n,\n\n         \n// with React JSX, usually we will not use an HTML template:\n\n         \nknownMissingResources\n:\n \n[\n \ndefault.theme/my-counter-widget.html\n \n]\n\n      \n}\n \n)\n \n);\n\n\n      \n// ... tests ...\n\n\n      \nafterEach\n(\n \naxMocks\n.\ntearDown\n \n);\n\n\n   \n}\n \n);\n\n\n}\n \n);", 
            "title": "README"
        }, 
        {
            "location": "/#laxarjs-react-adapter", 
            "text": "Write LaxarJS widgets and controls in React", 
            "title": "LaxarJS React Adapter"
        }, 
        {
            "location": "/#installation", 
            "text": "bower install laxar-react-adapter   This will automatically install React if not already installed.  Add the React adapter to your bootstrapping modules, by editing the  init.js  and the  require_config.js  of your LaxarJS project.\nYou will need to adjust the  paths  object in your RequireJS configuration:  laxar-react-adapter :   laxar-react-adapter/laxar-react-adapter ,  react :   react/react ,  react-dom :   react/react-dom ,   The adapter relies on  react-dom , and your widgets will need to find  react .\nNow you can pass the adapter through the second argument to  ax.bootstrap :  require (   [ \n    /* existing dependencies ... */ , \n    laxar-react-adapter  ],   function (   /* laxar, applicationModules, resources, ... */ ,   reactAdapter   )   { \n    // ... setup file listings etc. ... \n    ax . bootstrap (   /* applicationModules */ ,   [   reactAdapter   ]   );  }   );   If you already have other custom adapters in your project, simply add the React adapter to your current list.", 
            "title": "Installation"
        }, 
        {
            "location": "/#usage", 
            "text": "With the adapter in place, you can now write widgets and controls using React.\nThe Laxarjs generator can create simple widgets and controls with the integration technology  \"react\" .\nContinue reading for details.", 
            "title": "Usage"
        }, 
        {
            "location": "/#creating-a-react-widget", 
            "text": "You can use the LaxarJS generator for Yeoman to create a  react  widget.\nby selecting  \"react\"  as  integration technology .\nThe new widget has a JSX file with a simple widget controller.  For example  myNewWidget.jsx :  import   React   from   react ;  import   ax   from   laxar ;  const   injections   =   [   axContext ,   axReactRender   ];  function   create (   context ,   reactRender   )   { \n\n    return   { \n       onDomAvailable :   render \n    }; \n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////// \n\n    function   render ()   { \n       reactRender (   div /div  ); \n    }  };  export   default   { \n    name :   myNewWidget , \n    injections :   injections , \n    create :   create  };   The controller in this file injects the  axContext  which is a complete object containing all configuration and API specifically available to this widget instance. The injected  axReactRender  is provided by the react adapter. This injected function is a no-op as long as the widget is invisible (e.g. in a background-tab, or within a closed popup). As soon as the widget has been attached to the page DOM,  axReactRender  goes through to  React.render .  Read the LaxarJS documentation for more about  writing widget controllers  and the available injections.", 
            "title": "Creating a React Widget"
        }, 
        {
            "location": "/#creating-a-react-control", 
            "text": "A LaxarJS control allows you to encapsulates one or more React components with associated CSS styles, that can be overwritten by themes.  React controls are implemented as regular AMD-modules, just like  plain  controls.\nSelect  \"react\"  as the integration technology when you generate the control with the LaxarJS Yeoman generator.  import   React   from   react ;  const   MyReactControl   =   React . createClass ({  render ()   { \n       return   div   className = my-new-control /div ; \n    }  }   );  export   default   MyNewControl ;   In your new control make sure to export all components that you wish to make available to widgets.  Read the LaxarJS documentation for more about  providing controls .", 
            "title": "Creating a React Control"
        }, 
        {
            "location": "/#testing-with-laxarjs-mocks", 
            "text": "Starting with  laxar-mocks  v0.5.0, you can pass custom adapters when creating the testbed-setup function.\nSimply write your specs like this:  define (   [ \n    json!../widget.json , \n    laxar-react-adapter , \n    laxar-mocks  ],   function (   descriptor ,   axReactAdapter ,   axMocks   )   { \n    use strict ; \n\n    describe (   The my-counter-widget ,   function ()   { \n\n       beforeEach (   axMocks . createSetupForWidget (   descriptor ,   { \n          // register the adapter: \n          adapter :   axReactAdapter , \n          // with React JSX, usually we will not use an HTML template: \n          knownMissingResources :   [   default.theme/my-counter-widget.html   ] \n       }   )   ); \n\n       // ... tests ... \n\n       afterEach (   axMocks . tearDown   ); \n\n    }   );  }   );", 
            "title": "Testing with LaxarJS Mocks"
        }, 
        {
            "location": "/CHANGELOG/", 
            "text": "Changelog\n\n\nLast Changes\n\n\nv0.4.0\n\n\n\n\n#4\n: documentation: using \"react\" as integration technology with the LaxarJS generator\n\n\n#3\n: documentation: fixed path for require.js\n\n\n\n\nv0.3.0\n\n\n\n\n#2\n: upgraded to React v0.14.x\n        + \nBREAKING CHANGE:\n see ticket for details\n\n\n\n\nv0.2.0\n\n\n\n\n#1\n: added testing documentation\n\n\n\n\nv0.1.0", 
            "title": "Changelog"
        }, 
        {
            "location": "/CHANGELOG/#changelog", 
            "text": "", 
            "title": "Changelog"
        }, 
        {
            "location": "/CHANGELOG/#last-changes", 
            "text": "", 
            "title": "Last Changes"
        }, 
        {
            "location": "/CHANGELOG/#v040", 
            "text": "#4 : documentation: using \"react\" as integration technology with the LaxarJS generator  #3 : documentation: fixed path for require.js", 
            "title": "v0.4.0"
        }, 
        {
            "location": "/CHANGELOG/#v030", 
            "text": "#2 : upgraded to React v0.14.x\n        +  BREAKING CHANGE:  see ticket for details", 
            "title": "v0.3.0"
        }, 
        {
            "location": "/CHANGELOG/#v020", 
            "text": "#1 : added testing documentation", 
            "title": "v0.2.0"
        }, 
        {
            "location": "/CHANGELOG/#v010", 
            "text": "", 
            "title": "v0.1.0"
        }
    ]
}